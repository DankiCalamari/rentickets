/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { GraphPageIterator, prepScopes } from '@microsoft/mgt-element';
/**
 *
 * @param {IGraph} graph
 * @param {string} query the graph resource and query string to be requested
 * @param {string[]} additionalScopes an array of scope to be requested before making the request
 * Should be calculated by the calling code using `IProvider.needsAdditionalScopes()`
 * @returns {Promise<GraphPageIterator<MicrosoftGraph.Event>>} a page iterator to allow
 * the calling code to request more data if present and needed
 */
export const getEventsQueryPageIterator = (graph, query, additionalScopes) => __awaiter(void 0, void 0, void 0, function* () {
    const request = graph.api(query).middlewareOptions(prepScopes(additionalScopes)).orderby('start/dateTime');
    return GraphPageIterator.create(graph, request);
});
/**
 * returns Calender events iterator associated with either the logged in user or a specific groupId
 *
 * @param {IGraph} graph
 * @param {Date} startDateTime
 * @param {Date} endDateTime
 * @param {string} [groupId]
 * @returns {Promise<GraphPageIterator<MicrosoftGraph.Event>>}
 * @memberof Graph
 */
export const getEventsPageIterator = (graph, startDateTime, endDateTime, groupId) => __awaiter(void 0, void 0, void 0, function* () {
    const sdt = `startdatetime=${startDateTime.toISOString()}`;
    const edt = `enddatetime=${endDateTime.toISOString()}`;
    const uri = groupId
        ? `groups/${groupId}/calendar/calendarview?${sdt}&${edt}`
        : `me/calendarview?${sdt}&${edt}`;
    const allValidScopes = groupId
        ? ['Group.Read.All', 'Group.ReadWrite.All']
        : ['Calendars.ReadBasic', 'Calendars.Read', 'Calendars.ReadWrite'];
    return getEventsQueryPageIterator(graph, uri, allValidScopes);
});
//# sourceMappingURL=mgt-agenda.graph.js.map