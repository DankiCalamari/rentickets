{"version":3,"file":"Providers.js","sourceRoot":"src/","sources":["providers/Providers.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { User } from '@microsoft/microsoft-graph-types';\n\nimport { EventDispatcher, EventHandler } from '../utils/EventDispatcher';\nimport { IProvider, ProviderState } from './IProvider';\n\n/**\n * Provides implementation for acquiring the necessary access token for calling the Microsoft Graph APIs.\n *\n * @export\n * @class Providers\n */\nexport class Providers {\n  /**\n   * returns the value of provider used globally. All components use this property to get a reference to the provider.\n   *\n   * @static\n   * @type {IProvider}\n   * @memberof Providers\n   */\n  public static get globalProvider(): IProvider {\n    return this._globalProvider;\n  }\n\n  public static set globalProvider(provider: IProvider) {\n    if (provider !== this._globalProvider) {\n      if (this._globalProvider) {\n        this._globalProvider.removeStateChangedHandler(this.handleProviderStateChanged);\n        if (this._globalProvider.isMultiAccountSupportedAndEnabled) {\n          this._globalProvider.removeActiveAccountChangedHandler(this.handleActiveAccountChanged);\n        }\n      }\n\n      if (provider) {\n        provider.onStateChanged(this.handleProviderStateChanged);\n        if (provider.isMultiAccountSupportedAndEnabled) {\n          provider.onActiveAccountChanged(this.handleActiveAccountChanged);\n        }\n      }\n\n      this._globalProvider = provider;\n      this._eventDispatcher.fire(ProvidersChangedState.ProviderChanged);\n    }\n  }\n\n  /**\n   * Fires event when Provider changes state\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static onProviderUpdated(event: EventHandler<ProvidersChangedState>) {\n    this._eventDispatcher.add(event);\n  }\n\n  /**\n   * Remove event handler\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static removeProviderUpdatedListener(event: EventHandler<ProvidersChangedState>) {\n    this._eventDispatcher.remove(event);\n  }\n\n  /**\n   * Fires event when Provider changes state\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static onActiveAccountChanged(event: EventHandler<unknown>) {\n    this._activeAccountChangedDispatcher.add(event);\n  }\n\n  /**\n   * Remove event handler\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static removeActiveAccountChangedListener(event: EventHandler<unknown>) {\n    this._activeAccountChangedDispatcher.remove(event);\n  }\n\n  /**\n   * Gets the current signed in user\n   *\n   * @static\n   * @memberof Providers\n   */\n  public static me(): Promise<User> {\n    if (!this.client) {\n      this._mePromise = null;\n      return null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    if (!this._mePromise) {\n      this._mePromise = this.getMe();\n    }\n\n    return this._mePromise;\n  }\n\n  /**\n   * Get current signed in user details\n   *\n   * @private\n   * @static\n   * @return {*}  {Promise<User>}\n   * @memberof Providers\n   */\n  private static async getMe(): Promise<User> {\n    try {\n      const response: User = (await this.client.api('me').get()) as User;\n      if (response?.id) {\n        return response;\n      }\n    } catch {\n      // no-op\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets the cache ID, creates one if it does not exist\n   *\n   * @static\n   * @memberof Providers\n   */\n  public static async getCacheId() {\n    if (this._cacheId) {\n      return this._cacheId;\n    }\n    if (Providers.globalProvider?.state === ProviderState.SignedIn) {\n      if (!this._cacheId) {\n        const client = this.client;\n        if (client) {\n          try {\n            this._cacheId = await this.createCacheId();\n          } catch {\n            // no-op\n          }\n        }\n      }\n    }\n    return this._cacheId;\n  }\n\n  /**\n   * Unset the cache ID\n   *\n   * @static\n   * @memberof Providers\n   */\n  private static unsetCacheId() {\n    this._cacheId = null;\n    this._mePromise = null;\n  }\n\n  /**\n   * Create cache ID\n   *\n   * @private\n   * @static\n   * @return {*}  {Promise<string>}\n   * @memberof Providers\n   */\n  private static async createCacheId(): Promise<string> {\n    if (Providers.globalProvider.isMultiAccountSupportedAndEnabled) {\n      const cacheId = this.createCacheIdWithAccountDetails();\n      if (cacheId) {\n        return cacheId;\n      }\n    }\n    return await this.createCacheIdWithUserDetails();\n  }\n\n  /**\n   * Create a cache ID with user userID and principal name\n   *\n   * @static\n   * @param {User} response\n   * @return {*}\n   * @memberof Providers\n   */\n  private static async createCacheIdWithUserDetails(): Promise<string> {\n    const response: User = await this.me();\n    if (response?.id) {\n      return response.id + '-' + response.userPrincipalName;\n    } else return null;\n  }\n\n  /**\n   * Create cache ID with tenant ID and user ID\n   *\n   * @private\n   * @static\n   * @return {*}  {string}\n   * @memberof Providers\n   */\n  private static createCacheIdWithAccountDetails(): string {\n    const user = Providers.globalProvider.getActiveAccount();\n    if (user.tenantId && user.id) {\n      return user.tenantId + user.id;\n    } else return null;\n  }\n\n  /**\n   * Gets the current graph client\n   *\n   * @readonly\n   * @static\n   * @type {Client}\n   * @memberof Providers\n   */\n  public static get client(): Client {\n    if (Providers.globalProvider && Providers.globalProvider.state === ProviderState.SignedIn) {\n      return Providers.globalProvider.graph.client;\n    }\n    return null;\n  }\n\n  private static readonly _eventDispatcher = new EventDispatcher<ProvidersChangedState>();\n\n  private static readonly _activeAccountChangedDispatcher = new EventDispatcher<unknown>();\n\n  private static _globalProvider: IProvider;\n  private static _cacheId: string;\n  private static _mePromise: Promise<User>;\n\n  private static readonly handleProviderStateChanged = () => {\n    if (!Providers.globalProvider || Providers.globalProvider.state !== ProviderState.SignedIn) {\n      // clear current signed in user info\n      Providers._mePromise = null;\n    }\n\n    Providers._eventDispatcher.fire(ProvidersChangedState.ProviderStateChanged);\n  };\n\n  private static readonly handleActiveAccountChanged = () => {\n    Providers.unsetCacheId();\n    Providers._activeAccountChangedDispatcher.fire(null);\n  };\n}\n\n/**\n * on Provider Change State\n *\n * @export\n * @enum {number}\n */\nexport enum ProvidersChangedState {\n  /**\n   * ProviderChanged = 0\n   */\n  ProviderChanged,\n  /**\n   * ProviderStateChanged = 1\n   */\n  ProviderStateChanged\n}\n"]}