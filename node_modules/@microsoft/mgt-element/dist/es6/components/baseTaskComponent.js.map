{"version":3,"file":"baseTaskComponent.js","sourceRoot":"src/","sources":["components/baseTaskComponent.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Task } from '@lit/task';\n\nimport { LitElement, PropertyValueMap, PropertyValues, TemplateResult, html } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { ProviderState } from '../providers/IProvider';\nimport { Providers } from '../providers/Providers';\nimport { LocalizationHelper } from '../utils/LocalizationHelper';\nimport { PACKAGE_VERSION } from '../utils/version';\nimport { ComponentMediaQuery } from './baseComponent';\n\n/**\n * BaseComponent extends LitElement adding mgt specific features to all components\n *\n * @export  MgtBaseTaskComponent\n * @abstract\n * @class MgtBaseTaskComponent\n * @extends {LitElement}\n */\nexport abstract class MgtBaseTaskComponent extends LitElement {\n  /**\n   * Supplies the component with a reactive property based on the current provider state\n   *\n   * @protected\n   * @memberof MgtBaseTaskComponent\n   */\n  @state() protected providerState: ProviderState = ProviderState.Loading;\n  /**\n   * Exposes the semver of the library the component is part of\n   *\n   * @readonly\n   * @static\n   * @memberof MgtBaseTaskComponent\n   */\n  public static get packageVersion() {\n    return PACKAGE_VERSION;\n  }\n\n  /**\n   * Gets or sets the direction of the component\n   *\n   * @protected\n   * @memberof MgtBaseTaskComponent\n   */\n  @state() protected direction: 'ltr' | 'rtl' | 'auto' = 'ltr';\n\n  /**\n   * Gets the ComponentMediaQuery of the component\n   *\n   * @readonly\n   * @type {MgtElement.ComponentMediaQuery}\n   * @memberof MgtBaseTaskComponent\n   */\n  public get mediaQuery(): ComponentMediaQuery {\n    if (this.offsetWidth < 768) {\n      return ComponentMediaQuery.mobile;\n    } else if (this.offsetWidth < 1200) {\n      return ComponentMediaQuery.tablet;\n    } else {\n      return ComponentMediaQuery.desktop;\n    }\n  }\n\n  /**\n   * A flag to check if the component has updated once.\n   *\n   * @readonly\n   * @protected\n   * @type {boolean}\n   * @memberof MgtBaseTaskComponent\n   */\n  protected get isFirstUpdated(): boolean {\n    return this._isFirstUpdated;\n  }\n\n  /**\n   * returns component strings\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtBaseTaskComponent\n   */\n  protected get strings(): Record<string, string> {\n    return {};\n  }\n\n  private _isFirstUpdated = false;\n\n  constructor() {\n    super();\n    this.handleDirectionChanged();\n    this.handleLocalizationChanged();\n  }\n\n  /**\n   * Invoked each time the custom element is appended into a document-connected element\n   *\n   * @memberof MgtBaseTaskComponent\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    LocalizationHelper.onStringsUpdated(this.handleLocalizationChanged);\n    LocalizationHelper.onDirectionUpdated(this.handleDirectionChanged);\n  }\n\n  /**\n   * Invoked each time the custom element is removed from a document-connected element\n   *\n   * @memberof MgtBaseTaskComponent\n   */\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    LocalizationHelper.removeOnStringsUpdated(this.handleLocalizationChanged);\n    LocalizationHelper.removeOnDirectionUpdated(this.handleDirectionChanged);\n    Providers.removeProviderUpdatedListener(this.handleProviderUpdates);\n    Providers.removeActiveAccountChangedListener(this.handleActiveAccountUpdates);\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(changedProperties: PropertyValueMap<unknown> | Map<PropertyKey, unknown>): void {\n    super.firstUpdated(changedProperties);\n    this._isFirstUpdated = true;\n    Providers.onProviderUpdated(this.handleProviderUpdates);\n    Providers.onActiveAccountChanged(this.handleActiveAccountUpdates);\n  }\n\n  /**\n   * Used to clear state in inherited components\n   */\n  protected clearState(): void {\n    // no-op\n  }\n\n  /**\n   * helps facilitate creation of events across components\n   *\n   * @protected\n   * @param {string} eventName\n   * @param {*} [detail]\n   * @param {boolean} [bubbles=false]\n   * @param {boolean} [cancelable=false]\n   * @param {boolean} [composed=false]\n   * @return {*}  {boolean}\n   * @memberof MgtBaseTaskComponent\n   */\n  protected fireCustomEvent(\n    eventName: string,\n    detail?: unknown,\n    bubbles = false,\n    cancelable = false,\n    composed = false\n  ): boolean {\n    const event = new CustomEvent(eventName, {\n      bubbles,\n      cancelable,\n      composed,\n      detail\n    });\n    return this.dispatchEvent(event);\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param changedProperties Map of changed properties with old values\n   */\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    this.fireCustomEvent('updated', undefined, true, false);\n  }\n\n  /**\n   * load state into the component.\n   * Override this function to provide actual loading logic.\n   */\n  protected async loadState() {\n    return Promise.resolve();\n  }\n\n  /**\n   * Override this function to provide the actual list of properties to trigger the task to run.\n   * The default implementation returns an array with the providerState.\n   * @returns {unknown[]} the properties when changed which trigger the Task to run\n   */\n  protected args(): unknown[] {\n    return [this.providerState];\n  }\n\n  /**\n   * Task that is run whenever one of the args changes\n   * By default this task will call loadState\n   */\n  protected _task = new Task(this, {\n    task: () => this.loadState(),\n    args: () => this.args()\n  });\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render() {\n    return this._task.render({\n      pending: this.renderLoading,\n      complete: this.renderContent,\n      error: this.renderError\n    });\n  }\n\n  /**\n   * A default loading template.\n   * @returns default loading template\n   */\n  protected renderLoading = (): TemplateResult => {\n    return html`<span>Loading...</span>`;\n  };\n\n  protected renderError = (e: unknown): TemplateResult => {\n    return html`<p>Error: ${e}</p>`;\n  };\n\n  protected renderContent = (): TemplateResult => {\n    return html`<!-- baseTaskComponent, please implement renderContent -->`;\n  };\n\n  private readonly handleProviderUpdates = () => {\n    this.providerState = Providers.globalProvider?.state ?? ProviderState.Loading;\n  };\n\n  private readonly handleActiveAccountUpdates = () => {\n    this.clearState();\n  };\n\n  private readonly handleLocalizationChanged = () => {\n    LocalizationHelper.updateStringsForTag(this.tagName, this.strings);\n    this.requestUpdate();\n  };\n\n  private readonly handleDirectionChanged = () => {\n    this.direction = LocalizationHelper.getDocumentDirection();\n  };\n}\n"]}