{"version":3,"file":"IProvider.js","sourceRoot":"src/","sources":["providers/IProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { AuthenticationProvider, AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client';\nimport { validateBaseURL } from '../utils/validateBaseURL';\nimport { GraphEndpoint, IGraph, MICROSOFT_GRAPH_DEFAULT_ENDPOINT } from '../IGraph';\nimport { EventDispatcher, EventHandler } from '../utils/EventDispatcher';\n\n/**\n * Provider Type to be extended for implementing new providers\n *\n * @export\n * @abstract\n * @class IProvider\n * @implements {AuthenticationProvider}\n */\nexport abstract class IProvider implements AuthenticationProvider {\n  /**\n   * The Graph object that contains the Graph client sdk\n   *\n   * @type {Graph}\n   * @memberof IProvider\n   */\n  public graph: IGraph;\n\n  /**\n   * Specifies if the provider has enabled support for multiple accounts\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  protected isMultipleAccountDisabled = true;\n\n  /**\n   * Specifies if Multi account functionality is supported by the provider and enabled.\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  public get isMultiAccountSupportedAndEnabled(): boolean {\n    return false;\n  }\n\n  private _state: ProviderState;\n  private readonly _loginChangedDispatcher = new EventDispatcher<LoginChangedEvent>();\n  private readonly _activeAccountChangedDispatcher = new EventDispatcher<ActiveAccountChanged>();\n  private _baseURL: GraphEndpoint = MICROSOFT_GRAPH_DEFAULT_ENDPOINT;\n\n  private _approvedScopes: string[] = [];\n  public get approvedScopes(): string[] {\n    return this._approvedScopes;\n  }\n\n  public set approvedScopes(value: string[]) {\n    this._approvedScopes = value.map(v => v.toLowerCase());\n  }\n\n  public hasAtLeastOneApprovedScope(requiredScopeSet: string[]): boolean {\n    return requiredScopeSet.some(s => this.approvedScopes.includes(s.toLowerCase().trim()));\n  }\n\n  public hasAllOneApprovedScope(requiredScopeSet: string[]): boolean {\n    return requiredScopeSet.some(s => !this.approvedScopes.includes(s.toLowerCase().trim()));\n  }\n\n  /**\n   * Examines the currently consented scopes for any match in the requiredScopeSet to determine what, if any, scopes need to be consented to\n   *\n   * @param {string[]} requiredScopeSet an array of scopes to be checked\n   * @returns {string[]} if any matches in requiredScopeSet exist then an empty array is returns, otherwise an array containing the first element in the requiredScopeSet is returned\n   */\n  public needsAdditionalScopes(requiredScopeSet: string[]): string[] {\n    const reqScopes: string[] = [];\n    if (requiredScopeSet.length && !this.hasAtLeastOneApprovedScope(requiredScopeSet)) {\n      reqScopes.push(requiredScopeSet[0].trim());\n    }\n    return reqScopes;\n  }\n\n  /**\n   * The base URL to be used in the graph client config.\n   */\n  public set baseURL(url: GraphEndpoint) {\n    if (validateBaseURL(url)) {\n      this._baseURL = url;\n      return;\n    } else {\n      throw new Error(`${url} is not a valid Graph URL endpoint.`);\n    }\n  }\n\n  public get baseURL(): GraphEndpoint {\n    return this._baseURL;\n  }\n\n  private _customHosts?: string[] = undefined;\n\n  /**\n   * Custom Hostnames to allow graph client to utilize\n   */\n  public set customHosts(hosts: string[] | undefined) {\n    this._customHosts = hosts;\n  }\n\n  public get customHosts(): string[] | undefined {\n    return this._customHosts;\n  }\n\n  /**\n   * Enable/Disable incremental consent\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  private _isIncrementalConsentDisabled = false;\n\n  /**\n   * Backing field for isMultiAccountSupported\n   *\n   * @protected\n   * @memberof IProvider\n   */\n  protected isMultipleAccountSupported = false;\n\n  /**\n   * Does the provider support multiple accounts?\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  public get isMultiAccountSupported(): boolean {\n    return this.isMultipleAccountSupported;\n  }\n  /**\n   * returns state of Provider\n   *\n   * @readonly\n   * @type {ProviderState}\n   * @memberof IProvider\n   */\n  public get state(): ProviderState {\n    return this._state;\n  }\n\n  /**\n   * Incremental consent setting\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get isIncrementalConsentDisabled(): boolean {\n    return this._isIncrementalConsentDisabled;\n  }\n\n  /**\n   * Enable/Disable incremental consent\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public set isIncrementalConsentDisabled(disabled: boolean) {\n    this._isIncrementalConsentDisabled = disabled;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtIProvider';\n  }\n\n  constructor() {\n    this._state = ProviderState.Loading;\n  }\n\n  /**\n   * sets state of Provider and fires loginchangedDispatcher\n   *\n   * @param {ProviderState} state\n   * @memberof IProvider\n   */\n  public setState(state: ProviderState) {\n    if (state !== this._state) {\n      this._state = state;\n      this._loginChangedDispatcher.fire({});\n    }\n  }\n\n  /**\n   * event handler when login changes\n   *\n   * @param {EventHandler<LoginChangedEvent>} eventHandler\n   * @memberof IProvider\n   */\n  public onStateChanged(eventHandler: EventHandler<LoginChangedEvent>) {\n    this._loginChangedDispatcher.add(eventHandler);\n  }\n  /**\n   * removes event handler for when login changes\n   *\n   * @param {EventHandler<LoginChangedEvent>} eventHandler\n   * @memberof IProvider\n   */\n  public removeStateChangedHandler(eventHandler: EventHandler<LoginChangedEvent>) {\n    this._loginChangedDispatcher.remove(eventHandler);\n  }\n\n  /**\n   * option implementation that can be called to sign in user (required for mgt-login to work)\n   *\n   * @returns {Promise<void>}\n   * @memberof IProvider\n   */\n  public login?(): Promise<void>;\n\n  /**\n   * optional implementation that can be called to sign out user (required for mgt-login to work)\n   *\n   * @returns {Promise<void>}\n   * @memberof IProvider\n   */\n  public logout?(): Promise<void>;\n\n  /**\n   * Returns all signed in accounts.\n   *\n   * @return {*}  {any[]}\n   * @memberof IProvider\n   */\n  public getAllAccounts?(): IProviderAccount[];\n\n  /**\n   * Returns active account in case of multi-account sign in\n   *\n   * @return {*}  {any[]}\n   * @memberof IProvider\n   */\n  public getActiveAccount?(): IProviderAccount;\n\n  /**\n   * Switch between two signed in accounts\n   *\n   * @param {*} user\n   * @memberof IProvider\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public setActiveAccount?(user: IProviderAccount) {\n    this.fireActiveAccountChanged();\n  }\n\n  /**\n   * Event handler when Active account changes\n   *\n   * @param {EventHandler<ActiveAccountChanged>} eventHandler\n   * @memberof IProvider\n   */\n  public onActiveAccountChanged(eventHandler: EventHandler<ActiveAccountChanged>) {\n    this._activeAccountChangedDispatcher.add(eventHandler);\n  }\n\n  /**\n   * Removes event handler for when Active account changes\n   *\n   * @param {EventHandler<ActiveAccountChanged>} eventHandler\n   * @memberof IProvider\n   */\n  public removeActiveAccountChangedHandler(eventHandler: EventHandler<ActiveAccountChanged>) {\n    this._activeAccountChangedDispatcher.remove(eventHandler);\n  }\n\n  /**\n   * Fires event when active account changes\n   *\n   * @memberof IProvider\n   */\n  private fireActiveAccountChanged() {\n    this._activeAccountChangedDispatcher.fire({});\n  }\n\n  /**\n   * uses scopes to recieve access token\n   *\n   * @param {...string[]} scopes\n   * @returns {Promise<string>}\n   * @memberof IProvider\n   */\n  public getAccessTokenForScopes(...scopes: string[]): Promise<string> {\n    return this.getAccessToken({ scopes });\n  }\n\n  /**\n   * Promise to receive access token using Provider options\n   *\n   * @abstract\n   * @param {AuthenticationProviderOptions} [options]\n   * @returns {Promise<string>}\n   * @memberof IProvider\n   */\n  public abstract getAccessToken(options?: AuthenticationProviderOptions): Promise<string>;\n}\n\n/**\n * ActiveAccountChanged Event\n *\n * @export\n * @interface ActiveAccountChanged\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ActiveAccountChanged {}\n/**\n * loginChangedEvent\n *\n * @export\n * @interface LoginChangedEvent\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface LoginChangedEvent {}\n\n/**\n * LoginType\n *\n * @export\n * @enum {number}\n */\nexport enum LoginType {\n  /**\n   * Popup = 0\n   */\n  Popup,\n  /**\n   * Redirect = 1\n   */\n  Redirect\n}\n\n/**\n * ProviderState\n *\n * @export\n * @enum {number}\n */\nexport enum ProviderState {\n  /**\n   * Loading = 0\n   */\n  Loading,\n  /**\n   * SignedOut = 1\n   */\n  SignedOut,\n  /**\n   * SignedIn = 2\n   */\n  SignedIn\n}\n\n/**\n * Account details\n *\n * @export\n */\nexport interface IProviderAccount {\n  id: string;\n  mail?: string;\n  name?: string;\n  tenantId?: string;\n}\n"]}