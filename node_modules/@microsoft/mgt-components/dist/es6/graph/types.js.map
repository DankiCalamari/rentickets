{"version":3,"file":"types.js","sourceRoot":"src/","sources":["graph/types.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAoCH,MAAM,SAAS,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,WAAW,CAAU,CAAC;AASvF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAc,EAAqB,EAAE;IAC9D,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAiB,CAAC,CAAC;AAC5E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,KAAa,EAAE,eAAyB,UAAU,EAAY,EAAE;IAChG,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC;QACtB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n\n/**\n * IDynamicPerson describes the person object we use throughout mgt-person,\n * which can be one of three similar Graph types.\n *\n * In addition, this custom type also defines the optional `personImage` property,\n * which is used to pass the image around to other components as part of the person object.\n */\nexport type IUser = MicrosoftGraph.User | MicrosoftGraph.Person;\nexport type IContact = MicrosoftGraph.Contact;\nexport type IGroup = MicrosoftGraph.Group;\n\nexport type IDynamicPerson = (IUser | IContact | IGroup) & {\n  /**\n   * personDetails.personImage is a toolkit injected property to pass image between components\n   * an optimization to avoid fetching the image when unnecessary.\n   *\n   * @type {string}\n   */\n  personImage?: string;\n};\n\n/**\n * avatarSize describes the enum strings that can be passed in to determine\n * size of avatar.\n */\nexport type AvatarSize = 'small' | 'large' | 'auto';\n\n/**\n * Insight string types used to retrieve OneDrive files\n */\nexport type OfficeGraphInsightString = 'trending' | 'used' | 'shared';\n\nconst viewTypes = ['image', 'oneline', 'twolines', 'threelines', 'fourlines'] as const;\n/**\n * Enumeration to define what parts of the person component render\n *\n * @export\n * @enum {string}\n */\nexport type ViewType = (typeof viewTypes)[number];\n\nexport const isViewType = (value: unknown): value is ViewType => {\n  return typeof value === 'string' && viewTypes.includes(value as ViewType);\n};\n\nexport const viewTypeConverter = (value: string, defaultValue: ViewType = 'twolines'): ViewType => {\n  if (isViewType(value)) {\n    return value;\n  }\n  return defaultValue;\n};\n\n/**\n * Postion describes the position of the dropdown\n */\nexport type Position = 'above' | 'below';\n"]}