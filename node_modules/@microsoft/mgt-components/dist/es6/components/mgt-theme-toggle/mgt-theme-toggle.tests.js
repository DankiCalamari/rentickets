/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable @typescript-eslint/no-unused-expressions */
/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
import { registerMgtThemeToggleComponent } from './mgt-theme-toggle';
import { html, fixture, expect } from '@open-wc/testing';
import { sendMouse, emulateMedia } from '@web/test-runner-commands';
class Deferred {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}
const getMiddleOfElement = (element) => {
    const { x, y, width, height } = element.getBoundingClientRect();
    return {
        x: Math.floor(x + window.scrollX + width / 2),
        y: Math.floor(y + window.scrollY + height / 2)
    };
};
describe('mgt-theme-toggle - media behavior tests', () => {
    registerMgtThemeToggleComponent();
    it('should render as checked whe color scheme is dark', () => __awaiter(void 0, void 0, void 0, function* () {
        yield emulateMedia({ colorScheme: 'dark' });
        expect(matchMedia('(prefers-color-scheme: dark)').matches).to.be.true;
        const darkToggle = yield fixture('<mgt-theme-toggle></mgt-theme-toggle>');
        yield expect(darkToggle).shadowDom.to.equal(`<fluent-switch
        aria-checked="true"
        aria-disabled="false"
        checked="true"
        role="switch"
        tabindex="0"
      >
        <span slot="checked-message">Dark</span>
        <span slot="unchecked-message">Light</span>
        <label for="direction-switch">Color mode:</label>
      </fluent-switch>`);
    }));
    it('should emit darkmodechanged true on inital render when the color scheme is dark', () => __awaiter(void 0, void 0, void 0, function* () {
        const deferred = new Deferred();
        const listener = (e) => {
            deferred.resolve(e.detail);
        };
        yield emulateMedia({ colorScheme: 'dark' });
        expect(matchMedia('(prefers-color-scheme: dark)').matches).to.be.true;
        yield fixture(html `<mgt-theme-toggle @darkmodechanged=${listener}></mgt-theme-toggle>`);
        // darkmodechanged emitted when setting initial value of checked
        expect(yield deferred.promise).to.be.true;
    }));
    it('should render as unchecked when color scheme is light', () => __awaiter(void 0, void 0, void 0, function* () {
        yield emulateMedia({ colorScheme: 'light' });
        expect(matchMedia('(prefers-color-scheme: light)').matches).to.be.true;
        const lightToggle = yield fixture('<mgt-theme-toggle></mgt-theme-toggle>');
        yield expect(lightToggle).shadowDom.to.equal(`<fluent-switch
        aria-checked="false"
        aria-disabled="false"
        checked="false"
        role="switch"
        tabindex="0"
      >
        <span slot="checked-message">Dark</span>
        <span slot="unchecked-message">Light</span>
        <label for="direction-switch">Color mode:</label>
      </fluent-switch>`);
    }));
});
describe('mgt-theme-toggle - tests', () => {
    beforeEach(() => {
        registerMgtThemeToggleComponent();
    });
    it('should render', () => __awaiter(void 0, void 0, void 0, function* () {
        const toggle = yield fixture('<mgt-theme-toggle></mgt-theme-toggle>');
        yield expect(toggle).shadowDom.to.equal(`<fluent-switch
        aria-checked="false"
        aria-disabled="false"
        checked="false"
        role="switch"
        tabindex="0"
      >
        <span slot="checked-message">Dark</span>
        <span slot="unchecked-message">Light</span>
        <label for="direction-switch">Color mode:</label>
      </fluent-switch>`);
    }));
    it("should emit darkmodechanged with the current 'checked' state on click", () => __awaiter(void 0, void 0, void 0, function* () {
        let darkModeDeferred = new Deferred();
        const listener = (e) => {
            darkModeDeferred.resolve(e.detail);
        };
        const element = yield fixture(html `<mgt-theme-toggle @darkmodechanged=${listener}></mgt-theme-toggle>`);
        const toggle = element.shadowRoot.querySelector('[role=switch]');
        const { x, y } = getMiddleOfElement(element);
        // darkmodechanged emitted when setting initial value of checked
        expect(yield darkModeDeferred.promise).to.be.false;
        expect(toggle).attribute('checked', 'false');
        // click to set switch on
        darkModeDeferred = new Deferred();
        yield sendMouse({ type: 'click', position: [x, y] });
        expect(yield darkModeDeferred.promise).to.be.true;
        expect(toggle.checked).to.be.true;
        // click to set switch off
        darkModeDeferred = new Deferred();
        yield sendMouse({ type: 'click', position: [x, y] });
        expect(yield darkModeDeferred.promise).to.be.false;
        expect(toggle.checked).to.be.false;
    }));
    it('should have a checked switch if mode is dark', () => __awaiter(void 0, void 0, void 0, function* () {
        const toggle = yield fixture('<mgt-theme-toggle mode="dark"></mgt-theme-toggle>');
        yield expect(toggle).shadowDom.to.equal(`<fluent-switch
        aria-checked="true"
        aria-disabled="false"
        checked="true"
        role="switch"
        tabindex="0"
      >
        <span slot="checked-message">Dark</span>
        <span slot="unchecked-message">Light</span>
        <label for="direction-switch">Color mode:</label>
      </fluent-switch>`);
        yield expect(toggle).shadowDom.to.be.accessible();
    }));
});
//# sourceMappingURL=mgt-theme-toggle.tests.js.map