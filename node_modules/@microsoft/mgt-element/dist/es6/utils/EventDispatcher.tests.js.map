{"version":3,"file":"EventDispatcher.tests.js","sourceRoot":"src/","sources":["utils/EventDispatcher.tests.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAE9C,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,SAAS,CAAC,GAAG,EAAE;QACb,mCAAmC;QACnC,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;QACzC,MAAM,QAAQ,GAAG,IAAI,EAAE,CAAC;QACxB,MAAM,QAAQ,GAAG,IAAI,EAAE,CAAC;QACxB,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzB,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzB,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEzB,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC5B,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC5B,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC5B,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC5B,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;QAC7E,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;YACzC,MAAM,QAAQ,GAAG,IAAI,EAAE,CAAC;YACxB,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAClC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { EventDispatcher } from './EventDispatcher';\nimport { assert, restore, fake } from 'sinon';\n\ndescribe('EventDispatcher tests', () => {\n  afterEach(() => {\n    // Restore the default sandbox here\n    restore();\n  });\n  it('should add and remove event handlers', () => {\n    const dispatcher = new EventDispatcher();\n    const handler1 = fake();\n    const handler2 = fake();\n    dispatcher.add(handler1);\n    dispatcher.add(handler2);\n    dispatcher.fire('event');\n\n    assert.calledOnce(handler1);\n    assert.calledOnce(handler2);\n    dispatcher.remove(handler1);\n    dispatcher.fire('event');\n    assert.calledOnce(handler1);\n    assert.callCount(handler2, 2);\n  });\n\n  it('should not throw when remove is called with an unregistered handler', () => {\n    try {\n      const dispatcher = new EventDispatcher();\n      const handler1 = fake();\n      dispatcher.remove(handler1);\n    } catch (e) {\n      assert.fail('should not throw');\n    }\n    assert.pass('did not throw');\n  });\n});\n"]}