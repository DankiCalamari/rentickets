{"version":3,"file":"prepScopes.js","sourceRoot":"src/","sources":["utils/prepScopes.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,4BAA4B,EAAE,MAAM,mCAAmC,CAAC;AACjF,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD;;;;;;;GAOG;AAEH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,MAAgB,EAAE,QAAQ,GAAG,SAAS,CAAC,cAAc,EAAE,EAAE;IAClF,MAAM,gBAAgB,GAAG,QAAQ,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;IAChE,MAAM,mBAAmB,GAAG;QAC1B,MAAM,EAAE,gBAAgB;KACzB,CAAC;IAEF,IAAI,CAAC,QAAQ,CAAC,4BAA4B,EAAE,CAAC;QAC3C,OAAO,CAAC,IAAI,4BAA4B,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,CAAC;IAC5E,CAAC;SAAM,CAAC;QACN,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { AuthenticationHandlerOptions } from '@microsoft/microsoft-graph-client';\nimport { Providers } from '../providers/Providers';\n\n/**\n * creates an AuthenticationHandlerOptions from scopes array that\n * can be used in the Graph sdk middleware chain\n *\n * @export\n * @param {...string[]} scopes\n * @returns\n */\n\nexport const prepScopes = (scopes: string[], provider = Providers.globalProvider) => {\n  const additionalScopes = provider.needsAdditionalScopes(scopes);\n  const authProviderOptions = {\n    scopes: additionalScopes\n  };\n\n  if (!provider.isIncrementalConsentDisabled) {\n    return [new AuthenticationHandlerOptions(undefined, authProviderOptions)];\n  } else {\n    return [];\n  }\n};\n"]}