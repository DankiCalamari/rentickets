/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { SimpleProvider } from './SimpleProvider';
import { expect } from '@open-wc/testing';
describe('IProvider.needsAdditionalScopes tests', () => {
    let p;
    beforeEach(() => {
        p = new SimpleProvider(() => Promise.resolve('fake-token'), () => Promise.resolve(), () => Promise.resolve());
        p.approvedScopes = ['user.read', 'group.read.all', 'presence.read'];
    });
    it('should provide an empty array when one scope is already present', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = p.needsAdditionalScopes(['groupmember.read.all', 'group.read.all']);
        yield expect(result).to.eql([]);
    }));
    it('should provide an empty array when one scope is already present ignoring case of scopes in provider', () => __awaiter(void 0, void 0, void 0, function* () {
        p.approvedScopes = ['user.read', 'Group.Read.All', 'presence.read'];
        const result = p.needsAdditionalScopes(['groupmember.read.all', 'group.read.all']);
        yield expect(result).to.eql([]);
    }));
    it('should provide an empty array when one scope is already present ignoring case of scopes in provider', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = p.needsAdditionalScopes(['groupmember.read.all', 'Group.Read.All']);
        yield expect(result).to.eql([]);
    }));
    it('should provide an the first element in the passed array where there is no overlap', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = p.needsAdditionalScopes(['groupmember.read.all', 'group.readwrite.all']);
        yield expect(result).to.eql(['groupmember.read.all']);
    }));
});
//# sourceMappingURL=IProvider.tests.js.map