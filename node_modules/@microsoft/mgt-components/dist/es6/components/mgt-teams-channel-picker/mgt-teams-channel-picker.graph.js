/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CacheService, prepScopes } from '@microsoft/mgt-element';
import { getPhotoForResource, getPhotoInvalidationTime, getIsPhotosCacheEnabled } from '../../graph/graph.photos';
import { schemas } from '../../graph/cacheStores';
const teamReadScopes = [
    'Team.ReadBasic.All',
    'TeamSettings.Read.All',
    'TeamSettings.ReadWrite.All',
    'User.Read.All',
    'User.ReadWrite.All'
];
const channelReadScopes = ['Channel.ReadBasic.All', 'ChannelSettings.Read.All', 'ChannelSettings.ReadWrite.All'];
const teamPhotoReadScopes = ['Team.ReadBasic.All', 'TeamSettings.Read.All', 'TeamSettings.ReadWrite.All'];
/**
 * async promise, returns all Teams associated with the user logged in
 *
 * @returns {Promise<Team[]>}
 * @memberof Graph
 */
export const getAllMyTeams = (graph) => __awaiter(void 0, void 0, void 0, function* () {
    const scopes = teamReadScopes;
    const teams = (yield graph
        .api('/me/joinedTeams')
        .select(['displayName', 'id', 'isArchived'])
        .middlewareOptions(prepScopes(scopes))
        .get());
    return teams === null || teams === void 0 ? void 0 : teams.value;
});
/**
 * Load the photos for a give set of teamIds
 *
 * @param graph {IGraph}
 * @param teamIds {string[]}
 * @returns {Promise<CachePhotos>}
 */
export const getTeamsPhotosForPhotoIds = (graph, teamIds) => __awaiter(void 0, void 0, void 0, function* () {
    let cache;
    let photos = {};
    if (getIsPhotosCacheEnabled()) {
        cache = CacheService.getCache(schemas.photos, schemas.photos.stores.teams);
        for (const id of teamIds) {
            try {
                const photoDetail = yield cache.getValue(id);
                if (photoDetail && getPhotoInvalidationTime() > Date.now() - photoDetail.timeCached) {
                    photos[id] = photoDetail;
                }
            }
            catch (_) {
                // no-op
            }
        }
        if (Object.keys(photos).length) {
            return photos;
        }
    }
    photos = {};
    for (const id of teamIds) {
        try {
            const photoDetail = yield getPhotoForResource(graph, `/teams/${id}`, teamPhotoReadScopes);
            if (getIsPhotosCacheEnabled() && photoDetail) {
                yield cache.putValue(id, photoDetail);
            }
            photos[id] = photoDetail;
        }
        catch (_) {
            // no-op
        }
    }
    return photos;
});
/**
 * Creates an array of DropdownItems from an array of Teams populated with channels and photos
 *
 * @param graph {IGraph}
 * @param teams {Team[]} the teams to get channels for
 * @returns {Promise<DropdownItem[]>} a promise that resolves to an array of DropdownItems
 */
export const getChannelsForTeams = (graph, teams) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const batch = graph.createBatch();
    for (const team of teams) {
        batch.get(team.id, `teams/${team.id}/channels`, channelReadScopes);
    }
    const responses = yield batch.executeAll();
    const result = [];
    for (const team of teams) {
        const channelsForTeam = responses.get(team.id);
        // skip over any teams that don't have channels
        if (!((_b = (_a = channelsForTeam === null || channelsForTeam === void 0 ? void 0 : channelsForTeam.content) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.length))
            continue;
        result.push({
            item: team,
            channels: channelsForTeam.content.value.map(c => ({ item: c }))
        });
    }
    return result;
});
//# sourceMappingURL=mgt-teams-channel-picker.graph.js.map