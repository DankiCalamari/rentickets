/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { fixture, html, expect, oneEvent } from '@open-wc/testing';
import { MockProvider, Providers } from '@microsoft/mgt-element';
import { MgtPeople, registerMgtPeopleComponent } from './mgt-people';
describe('mgt-people - tests', () => {
    registerMgtPeopleComponent();
    Providers.globalProvider = new MockProvider(true);
    it('should render with overflow', () => __awaiter(void 0, void 0, void 0, function* () {
        const mgtPeople = yield fixture(html `<mgt-people
          people-queries="Lidia, Megan, Lynne, Brian, Joni">
        </mgt-people>
        `);
        // @ts-expect-error TS2554 expects 3 arguments got 2 https://github.com/open-wc/open-wc/issues/2746
        yield oneEvent(mgtPeople, 'people-rendered');
        // eslint-disable-next-line @typescript-eslint/no-unused-expressions
        expect(mgtPeople.shadowRoot.querySelector('.overflow')).to.not.be.null;
        yield expect(mgtPeople).shadowDom.to.be.accessible();
    }));
    it('has required scopes', () => {
        expect(MgtPeople.requiredScopes).to.have.members([
            'user.readbasic.all',
            'user.read.all',
            'user.read',
            'people.read',
            'presence.read.all',
            'presence.read',
            'contacts.read'
        ]);
    });
});
//# sourceMappingURL=mgt-people.tests.js.map