{"version":3,"file":"graph.photos.js","sourceRoot":"src/","sources":["graph/graph.photos.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes, CacheItem, CacheService, CacheStore } from '@microsoft/mgt-element';\nimport { ResponseType } from '@microsoft/microsoft-graph-client';\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { Person, ProfilePhoto } from '@microsoft/microsoft-graph-types';\n\nimport { blobToBase64 } from '../utils/Utils';\nimport { schemas } from './cacheStores';\nimport { findContactsByEmail, getEmailFromGraphEntity } from './graph.people';\nimport { findUsers } from './graph.user';\nimport { IDynamicPerson } from './types';\n\n/**\n * photo object stored in cache\n */\nexport interface CachePhoto extends CacheItem {\n  /**\n   * user tag associated with photo\n   */\n  eTag?: string;\n  /**\n   * user/contact photo\n   */\n  photo?: string;\n}\n\n/**\n * Defines expiration time\n */\nexport const getPhotoInvalidationTime = () =>\n  CacheService.config.photos.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether photo store is enabled\n */\nexport const getIsPhotosCacheEnabled = () => CacheService.config.photos.isEnabled && CacheService.config.isEnabled;\n\n/**\n * Ordered list of scopes able to load user photos for any user, least privilege comes first\n */\nexport const anyUserValidPhotoScopes = ['User.ReadBasic.All', 'User.Read.All', 'User.ReadWrite.All'];\n\n/**\n * Ordered list of scopes able to load user photo for the current user, least privilege comes first\n */\nexport const currentUserValidPhotoScopes = ['User.Read', 'User.ReadWrite', ...anyUserValidPhotoScopes];\n\n/**\n * retrieves a photo for the specified resource.\n *\n * @param {string} resource\n * @param {string[]} scopes\n * @returns {Promise<string>}\n */\nexport const getPhotoForResource = async (graph: IGraph, resource: string, scopes: string[]): Promise<CachePhoto> => {\n  try {\n    const response = (await graph\n      .api(`${resource}/photo/$value`)\n      .responseType(ResponseType.RAW)\n      .middlewareOptions(prepScopes(scopes))\n      .get()) as Response;\n\n    if (response.status === 404) {\n      // 404 means the resource does not have a photo\n      // we still want to cache that state\n      // so we return an object that can be cached\n      return { eTag: null, photo: null };\n    } else if (!response.ok) {\n      return null;\n    }\n\n    const eTag = response['@odata.mediaEtag'] as string;\n    const blob = await blobToBase64(await response.blob());\n    return { eTag, photo: blob };\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * async promise, returns Graph photos associated with contacts of the logged in user\n *\n * @param contactId\n * @returns {Promise<string>}\n * @memberof Graph\n */\nexport const getContactPhoto = async (graph: IGraph, contactId: string): Promise<string> => {\n  let cache: CacheStore<CachePhoto>;\n  let photoDetails: CachePhoto;\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.contacts);\n    photoDetails = await cache.getValue(contactId);\n    if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {\n      return photoDetails.photo;\n    }\n  }\n  const validContactPhotoScopes = ['Contacts.Read', 'Contacts.ReadWrite'];\n\n  photoDetails = await getPhotoForResource(graph, `me/contacts/${contactId}`, validContactPhotoScopes);\n  if (getIsPhotosCacheEnabled() && photoDetails) {\n    await cache.putValue(contactId, photoDetails);\n  }\n  return photoDetails ? photoDetails.photo : null;\n};\n\n/**\n * async promise, returns Graph photo associated with provided userId\n *\n * @param userId\n * @returns {Promise<string>}\n * @memberof Graph\n */\nexport const getUserPhoto = async (graph: IGraph, userId: string): Promise<string> => {\n  let cache: CacheStore<CachePhoto>;\n  let photoDetails: CachePhoto;\n\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.users);\n    photoDetails = await cache.getValue(userId);\n    if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {\n      return photoDetails.photo;\n    } else if (photoDetails) {\n      // there is a photo in the cache, but it's stale. implicit assumption that the app has permissions\n      // necessary to fetch photo metadata otherwise there couldn't be data in the cache\n      try {\n        const response = (await graph.api(`users/${userId}/photo`).get()) as ProfilePhoto;\n        if (\n          response &&\n          (response['@odata.mediaEtag'] !== photoDetails.eTag ||\n            (response['@odata.mediaEtag'] === null && photoDetails.eTag === null))\n        ) {\n          // set photoDetails to null so that photo gets pulled from the graph later\n          photoDetails = null;\n        }\n      } catch {\n        return null;\n      }\n    }\n  }\n  // if there is a photo in the cache, we got here because it was stale\n  photoDetails = photoDetails || (await getPhotoForResource(graph, `users/${userId}`, anyUserValidPhotoScopes));\n  if (getIsPhotosCacheEnabled() && photoDetails) {\n    await cache.putValue(userId, photoDetails);\n  }\n  return photoDetails ? photoDetails.photo : null;\n};\n\n/**\n * async promise, returns Graph photo associated with the logged in user\n *\n * @returns {Promise<string>}\n * @memberof Graph\n */\nexport const myPhoto = async (graph: IGraph): Promise<string> => {\n  let cache: CacheStore<CachePhoto>;\n  let photoDetails: CachePhoto;\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.users);\n    photoDetails = await cache.getValue('me');\n    if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {\n      return photoDetails.photo;\n    }\n  }\n\n  try {\n    const response = (await graph.api('me/photo').get()) as ProfilePhoto;\n    if (\n      response &&\n      (response['@odata.mediaEtag'] !== photoDetails.eTag ||\n        (response['@odata.mediaEtag'] === null && photoDetails.eTag === null))\n    ) {\n      photoDetails = null;\n    }\n  } catch {\n    return null;\n  }\n  photoDetails = photoDetails || (await getPhotoForResource(graph, 'me', currentUserValidPhotoScopes));\n  if (getIsPhotosCacheEnabled()) {\n    await cache.putValue('me', photoDetails || {});\n  }\n\n  return photoDetails ? photoDetails.photo : null;\n};\n\n/**\n * async promise, loads image of user\n *\n * @export\n */\nexport const getPersonImage = async (graph: IGraph, person: IDynamicPerson, useContactsApis = true) => {\n  // handle if person but not user\n  if ('personType' in person && (person as Person).personType.subclass !== 'OrganizationUser') {\n    if ((person as Person).personType.subclass === 'PersonalContact' && useContactsApis) {\n      // if person is a contact, look for them and their photo in contact api\n      const contactMail = getEmailFromGraphEntity(person);\n      const contact = await findContactsByEmail(graph, contactMail);\n      if (contact?.length && contact[0].id) {\n        return await getContactPhoto(graph, contact[0].id);\n      }\n    }\n\n    return null;\n  }\n\n  // handle if user\n  if ((person as MicrosoftGraph.Person).userPrincipalName || person.id) {\n    // try to find a user by userPrincipalName\n    const id = (person as MicrosoftGraph.Person).userPrincipalName || person.id;\n    return await getUserPhoto(graph, id);\n  }\n\n  // else assume id is for user and try to get photo\n  if (person.id) {\n    const image = await getUserPhoto(graph, person.id);\n    if (image) {\n      return image;\n    }\n  }\n\n  // let's try to find a person by the email\n  const email = getEmailFromGraphEntity(person);\n\n  if (email) {\n    // try to find user\n    const users = await findUsers(graph, email, 1);\n    if (users?.length) {\n      return await getUserPhoto(graph, users[0].id);\n    }\n\n    // if no user, try to find a contact\n    if (useContactsApis) {\n      const contacts = await findContactsByEmail(graph, email);\n      if (contacts?.length) {\n        return await getContactPhoto(graph, contacts[0].id);\n      }\n    }\n  }\n\n  return null;\n};\n\n/**\n * Load the image for a group\n *\n * @param graph\n * @param group\n * @param useContactsApis\n * @returns\n */\nexport const getGroupImage = async (graph: IGraph, group: IDynamicPerson) => {\n  let photoDetails: CachePhoto;\n  let cache: CacheStore<CachePhoto>;\n\n  const groupId = group.id;\n\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.groups);\n    photoDetails = await cache.getValue(groupId);\n    if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {\n      return photoDetails.photo;\n    } else if (photoDetails) {\n      // there is a photo in the cache, but it's stale\n      try {\n        const response = (await graph.api(`groups/${groupId}/photo`).get()) as ProfilePhoto;\n        if (\n          response &&\n          (response['@odata.mediaEtag'] !== photoDetails.eTag ||\n            (response['@odata.mediaEtag'] === null && photoDetails.eTag === null))\n        ) {\n          // set photoDetails to null so that photo gets pulled from the graph later\n          photoDetails = null;\n        }\n      } catch {\n        return null;\n      }\n    }\n  }\n\n  const validGroupPhotoScopes = ['Group.Read.All', 'Group.ReadWrite.All'];\n  // if there is a photo in the cache, we got here because it was stale\n  photoDetails = photoDetails || (await getPhotoForResource(graph, `groups/${groupId}`, validGroupPhotoScopes));\n  if (getIsPhotosCacheEnabled() && photoDetails) {\n    await cache.putValue(groupId, photoDetails);\n  }\n  return photoDetails ? photoDetails.photo : null;\n};\n\n/**\n * checks if user has a photo in the cache\n *\n * @param userId\n * @returns {CachePhoto}\n * @memberof Graph\n */\nexport const getPhotoFromCache = async (userId: string, storeName: string): Promise<CachePhoto> => {\n  const cache = CacheService.getCache<CachePhoto>(schemas.photos, storeName);\n  const item = await cache.getValue(userId);\n  return item;\n};\n\n/**\n * checks if user has a photo in the cache\n *\n * @param userId\n * @returns {void}\n * @memberof Graph\n */\nexport const storePhotoInCache = async (userId: string, storeName: string, value: CachePhoto): Promise<void> => {\n  const cache = CacheService.getCache<CachePhoto>(schemas.photos, storeName);\n  await cache.putValue(userId, value);\n};\n"]}