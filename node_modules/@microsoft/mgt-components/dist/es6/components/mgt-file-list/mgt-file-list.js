/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Providers, ProviderState, mgtHtml, MgtTemplatedTaskComponent, registerComponent, customElementHelper } from '@microsoft/mgt-element';
import { html } from 'lit';
import { property, state } from 'lit/decorators.js';
import { repeat } from 'lit/directives/repeat.js';
import { clearFilesCache, fetchNextAndCacheForFilesPageIterator, getDriveFilesByIdIterator, getDriveFilesByPathIterator, getFilesByIdIterator, getFilesByListQueryIterator, getFilesByPathIterator, getFilesByQueries, getFilesIterator, getGroupFilesByIdIterator, getGroupFilesByPathIterator, getMyInsightsFiles, getSiteFilesByIdIterator, getSiteFilesByPathIterator, getUserFilesByIdIterator, getUserFilesByPathIterator, getUserInsightsFiles } from '../../graph/graph.files';
import './mgt-file-upload/mgt-file-upload';
import { getSvg, SvgIcon } from '../../utils/SvgHelper';
import { viewTypeConverter } from '../../graph/types';
import { styles } from './mgt-file-list-css';
import { strings } from './strings';
import { MgtFile, registerMgtFileComponent } from '../mgt-file/mgt-file';
import { registerMgtFileUploadComponent } from './mgt-file-upload/mgt-file-upload';
import { fluentProgressRing } from '@fluentui/web-components';
import { registerFluentComponents } from '../../utils/FluentComponents';
import { getRelativeDisplayDate } from '../../utils/Utils';
import { getFileTypeIconUri } from '../../styles/fluent-icons';
export const registerMgtFileListComponent = () => {
    registerFluentComponents(fluentProgressRing);
    registerMgtFileComponent();
    registerMgtFileUploadComponent();
    registerComponent('file-list', MgtFileList);
};
const isSharedInsight = (sharedInsightFile) => {
    return 'lastShared' in sharedInsightFile;
};
/**
 * The File List component displays a list of multiple folders and files by
 * using the file/folder name, an icon, and other properties specified by the developer.
 * This component uses the mgt-file component.
 *
 * @export
 * @class MgtFileList
 *
 * @fires {CustomEvent<MicrosoftGraph.DriveItem>} itemClick - Fired when a user clicks on a file.
 * it returns the file (DriveItem) details.
 *
 * NOTE: This component also allows customizing the tokens from mgt-file and mgt-file-upload components.
 * @cssprop --file-list-background-color - {Color} the background color of the component.
 * @cssprop --file-list-box-shadow - {String} the box-shadow syle of the component. Default value is --elevation-shadow-card-rest.
 * @cssprop --file-list-border-radius - {Length} the file list box border radius. Default value is 8px.
 * @cssprop --file-list-border - {String} the file list border style. Default value is none.
 * @cssprop --file-list-padding -{String} the file list padding.  Default value is 0px.
 * @cssprop --file-list-margin -{String} the file list margin. Default value is 0px.
 * @cssprop --show-more-button-background-color - {Color} the "show more" button background color.
 * @cssprop --show-more-button-background-color--hover - {Color} the "show more" button background color on hover.
 * @cssprop --show-more-button-font-size - {String} the "show more" text font size. Default value is 12px.
 * @cssprop --show-more-button-padding - {String} the "show more" button padding. Default value is 0px.
 * @cssprop --show-more-button-border-bottom-right-radius - {String} the "show more" button bottom right border radius. Default value is 8px.
 * @cssprop --show-more-button-border-bottom-left-radius - {String} the "show more" button bottom left border radius. Default value is 8px;
 * @cssprop --progress-ring-size -{String} Progress ring height and width. Default value is 24px.
 */
export class MgtFileList extends MgtTemplatedTaskComponent {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * using the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    get strings() {
        return strings;
    }
    /**
     * The name for display in the overview section.
     *
     * @readonly
     * @type {string}
     * @memberof MgtFileList
     */
    get displayName() {
        return this.strings.filesSectionTitle;
    }
    /**
     * The title for the card when rendered as a card full.
     *
     * @readonly
     * @type {string}
     * @memberof MgtFileList
     */
    get cardTitle() {
        return this.strings.filesSectionTitle;
    }
    /**
     * Render the icon for display in the navigation ribbon.
     *
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderIcon() {
        return getSvg(SvgIcon.Files);
    }
    /**
     * Get the scopes required for file list
     *
     * @static
     * @return {*}  {string[]}
     * @memberof MgtFileList
     */
    static get requiredScopes() {
        return [...new Set([...MgtFile.requiredScopes])];
    }
    constructor(files) {
        super();
        this._isCompact = false;
        /**
         * allows developer to provide an array of file queries
         *
         * @type {string[]}
         * @memberof MgtFileList
         */
        this.fileQueries = null;
        /**
         * allows developer to provide an array of files
         *
         * @type {MicrosoftGraph.DriveItem[]}
         * @memberof MgtFileList
         */
        this.files = null;
        /**
         * Sets what data to be rendered (file icon only, oneline, twolines threelines).
         * Default is 'threelines'.
         *
         * @type {ViewType}
         * @memberof MgtFileList
         */
        this.itemView = 'threelines';
        /**
         * allows developer to provide file type to filter the list
         * can be docx
         *
         * @type {string[]}
         * @memberof MgtFileList
         */
        this.fileExtensions = [];
        /**
         * A number value to indicate the number of more files to load when show more button is clicked
         *
         * @type {number}
         * @memberof MgtFileList
         */
        this.pageSize = 10;
        this.disableOpenOnClick = false;
        /**
         * A boolean value indication if 'show-more' button should be disabled
         *
         * @type {boolean}
         * @memberof MgtFileList
         */
        this.hideMoreFilesButton = false;
        /**
         * A boolean value indication if file upload extension should be enable or disabled
         *
         * @type {boolean}
         * @memberof MgtFileList
         */
        this.enableFileUpload = false;
        /**
         * A number value to indicate the max number allowed of files to upload.
         *
         * @type {number}
         * @memberof MgtFileList
         */
        this.maxUploadFile = 10;
        /**
         * A Array of file extensions to be excluded from file upload.
         *
         * @type {string[]}
         * @memberof MgtFileList
         */
        this.excludedFileExtensions = [];
        this._preloadedFiles = [];
        // tracking user arrow key input of selection for accessibility purpose
        this._focusedItemIndex = -1;
        this.renderLoading = () => {
            if (!this.files) {
                return this.renderTemplate('loading', null) || html ``;
            }
            return this.renderContent();
        };
        /**
         * Render the file list
         *
         * @return {*}
         * @memberof MgtFileList
         */
        this.renderContent = () => {
            if (!this.files || this.files.length === 0) {
                return this.renderNoData();
            }
            if (this._personCardFiles) {
                this.files = this._personCardFiles;
            }
            return this._isCompact ? this.renderCompactView() : this.renderFullView();
        };
        /**
         * Handles setting the focusedItemIndex to 0 when you focus on the first item
         * in the file list.
         *
         * @returns void
         */
        this.onFocusFirstItem = () => (this._focusedItemIndex = 0);
        /**
         * Handle accessibility keyboard keydown events (arrow up, arrow down, enter, tab) on file list
         *
         * @param event
         */
        this.onFileListKeyDown = (event) => {
            const target = event.target;
            let fileList;
            if (!target.classList) {
                fileList = this.renderRoot.querySelector('.file-list-children');
            }
            else {
                fileList = this.renderRoot.querySelector('.file-list');
            }
            let focusedItem;
            if (!(fileList === null || fileList === void 0 ? void 0 : fileList.children.length)) {
                return;
            }
            if (event.code === 'ArrowUp' || event.code === 'ArrowDown') {
                if (event.code === 'ArrowUp') {
                    if (this._focusedItemIndex === -1) {
                        this._focusedItemIndex = fileList.children.length;
                    }
                    this._focusedItemIndex = (this._focusedItemIndex - 1 + fileList.children.length) % fileList.children.length;
                }
                if (event.code === 'ArrowDown') {
                    this._focusedItemIndex = (this._focusedItemIndex + 1) % fileList.children.length;
                }
                focusedItem = fileList.children[this._focusedItemIndex];
                this.updateItemBackgroundColor(fileList, focusedItem, 'focused');
            }
            if (event.code === 'Enter' || event.code === 'Space') {
                focusedItem = fileList.children[this._focusedItemIndex];
                const file = focusedItem.children[0];
                event.preventDefault();
                this.fireCustomEvent('itemClick', file.fileDetails);
                this.handleFileClick(file.fileDetails);
                this.updateItemBackgroundColor(fileList, focusedItem, 'selected');
            }
            if (event.code === 'Tab') {
                focusedItem = fileList.children[this._focusedItemIndex];
            }
        };
        this.handleSharedInsightClick = (file, e) => {
            var _a;
            if (((_a = file.resourceReference) === null || _a === void 0 ? void 0 : _a.webUrl) && !this.disableOpenOnClick) {
                e.preventDefault();
                window.open(file.resourceReference.webUrl, '_blank', 'noreferrer');
            }
        };
        this.handleFileClick = (file) => {
            var _a;
            const hasChildFolders = ((_a = file === null || file === void 0 ? void 0 : file.folder) === null || _a === void 0 ? void 0 : _a.childCount) > 0 && (file === null || file === void 0 ? void 0 : file.children);
            // the item has child folders, on click should get the child folders and render them
            if (hasChildFolders) {
                this.showChildren(file.id);
                return;
            }
            if ((file === null || file === void 0 ? void 0 : file.webUrl) && !this.disableOpenOnClick) {
                window.open(file.webUrl, '_blank', 'noreferrer');
            }
        };
        this.showChildren = (fileId) => {
            const itemDOM = this.renderRoot.querySelector(`#file-list-item-${fileId}`);
            this.renderChildren(fileId, itemDOM);
        };
        this.renderChildren = (itemId, itemDOM) => {
            const fileListName = customElementHelper.isDisambiguated
                ? `${customElementHelper.prefix}-file-list`
                : 'mgt-file-list';
            const childrenContainer = this.renderRoot.querySelector(`#file-list-children-${itemId}`);
            if (!childrenContainer) {
                const fl = document.createElement(fileListName);
                fl.setAttribute('item-id', itemId);
                fl.setAttribute('id', `file-list-children-${itemId}`);
                fl.setAttribute('class', 'file-list-children-show');
                itemDOM.after(fl);
            }
            else {
                // toggle to show/hide the children container
                if (childrenContainer.classList.contains('file-list-children-hide')) {
                    childrenContainer.setAttribute('class', 'file-list-children-show');
                }
                else {
                    childrenContainer.setAttribute('class', 'file-list-children-hide');
                }
            }
        };
        this._personCardFiles = files;
    }
    /**
     * Reset state
     *
     * @memberof MgtFileList
     */
    clearState() {
        super.clearState();
        this.files = null;
        this._personCardFiles = null;
    }
    /**
     * Set the section to compact view mode
     *
     * @returns
     * @memberof BasePersonCardSection
     */
    asCompactView() {
        this._isCompact = true;
        return this;
    }
    /**
     * Set the section to full view mode
     *
     * @returns
     * @memberof BasePersonCardSection
     */
    asFullView() {
        this._isCompact = false;
        return this;
    }
    args() {
        return [
            this.providerState,
            this.fileListQuery,
            this.fileQueries,
            this.siteId,
            this.driveId,
            this.groupId,
            this.itemId,
            this.itemPath,
            this.userId,
            this.insightType,
            this.fileExtensions,
            this.pageSize,
            this.maxFileSize
        ];
    }
    /**
     * Render the compact view
     *
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderCompactView() {
        const files = this.files.slice(0, 3);
        return this.renderFiles(files);
    }
    /**
     * Render the full view
     *
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderFullView() {
        return this.renderTemplate('default', { files: this.files }) || this.renderFiles(this.files);
    }
    /**
     * Render the state when no data is available
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderNoData() {
        return (this.renderTemplate('no-data', null) ||
            (this.enableFileUpload === true && Providers.globalProvider !== undefined
                ? html `
            <div class="file-list-wrapper" dir=${this.direction}>
              ${this.renderFileUpload()}
            </div>`
                : html ``));
    }
    /**
     * Render the list of files.
     *
     * @protected
     * @param {*} files
     * @returns {TemplateResult}
     * @memberof mgtFileList
     */
    renderFiles(files) {
        return html `
      <div id="file-list-wrapper" class="file-list-wrapper" dir=${this.direction}>
        ${this.enableFileUpload ? this.renderFileUpload() : null}
        <ul
          id="file-list"
          class="file-list"
        >
          <li
            id="file-list-item-${this.files[0].id}"
            tabindex="0"
            class="file-item"
            @keydown="${this.onFileListKeyDown}"
            @focus="${this.onFocusFirstItem}"
            @click=${(e) => this.handleItemSelect(files[0], e)}>
            ${this.renderFile(files[0])}
          </li>
          ${repeat(files.slice(1), f => f.id, f => html `
              <li
                id="file-list-item-${f.id}"
                class="file-item"
                @keydown="${this.onFileListKeyDown}"
                @click=${(e) => this.handleItemSelect(f, e)}>
                ${this.renderFile(f)}
              </li>
            `)}
        </ul>
        ${!this.hideMoreFilesButton &&
            this.pageIterator &&
            (this.pageIterator.hasNext || this._preloadedFiles.length) &&
            !this._isCompact
            ? this.renderMoreFileButton()
            : null}
      </div>
    `;
    }
    /**
     * Render an individual file.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof mgtFileList
     */
    renderFile(file) {
        const view = this.itemView;
        // if file is type SharedInsight, render Shared Insight File
        if (isSharedInsight(file)) {
            return this.renderSharedInsightFile(file);
        }
        return (this.renderTemplate('file', { file }, file.id) ||
            mgtHtml `
        <mgt-file class="mgt-file-item" .fileDetails=${file} .view=${view}></mgt-file>
      `);
    }
    /**
     * Render a file item of Shared Insight Type
     *
     * @protected
     * @param {IFile} file
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderSharedInsightFile(file) {
        const lastModifiedTemplate = file.lastShared
            ? html `
          <div class="shared_insight_file__last-modified">
            ${this.strings.sharedTextSubtitle} ${getRelativeDisplayDate(new Date(file.lastShared.sharedDateTime))}
          </div>
        `
            : null;
        return html `
      <div class="shared_insight_file" @click=${(e) => this.handleSharedInsightClick(file, e)} tabindex="0">
        <div class="shared_insight_file__icon">
          <img alt="${file.resourceVisualization.title}" src=${getFileTypeIconUri(file.resourceVisualization.type, 48, 'svg')} />
        </div>
        <div class="shared_insight_file__details">
          <div class="shared_insight_file__name">${file.resourceVisualization.title}</div>
          ${lastModifiedTemplate}
        </div>
      </div>
    `;
    }
    /**
     * Render the button when clicked will show more files.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderMoreFileButton() {
        if (this._isLoadingMore) {
            return html `
        <fluent-progress-ring role="progressbar" viewBox="0 0 8 8" class="progress-ring"></fluent-progress-ring>
      `;
        }
        else {
            return html `
        <fluent-button
          appearance="stealth"
          id="show-more"
          class="show-more"
          @click=${() => this.renderNextPage()}
        >
          <span class="show-more-text">${this.strings.showMoreSubtitle}</span>
        </fluent-button>`;
        }
    }
    /**
     * Render MgtFileUpload sub component
     *
     * @returns
     */
    renderFileUpload() {
        const fileUploadConfig = {
            graph: Providers.globalProvider.graph.forComponent(this),
            driveId: this.driveId,
            excludedFileExtensions: this.excludedFileExtensions,
            groupId: this.groupId,
            itemId: this.itemId,
            itemPath: this.itemPath,
            userId: this.userId,
            siteId: this.siteId,
            maxFileSize: this.maxFileSize,
            maxUploadFile: this.maxUploadFile
        };
        return mgtHtml `
        <mgt-file-upload .fileUploadList=${fileUploadConfig} ></mgt-file-upload>
      `;
    }
    /**
     * load state into the component.
     *
     * @protected
     * @returns
     * @memberof MgtFileList
     */
    loadState() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const provider = Providers.globalProvider;
            if (!provider || provider.state === ProviderState.Loading) {
                return;
            }
            if (provider.state === ProviderState.SignedOut) {
                this.files = null;
                return;
            }
            const graph = provider.graph.forComponent(this);
            let files;
            let pageIterator;
            const getFromMyDrive = !this.driveId && !this.siteId && !this.groupId && !this.userId;
            // combinations of these attributes must be provided in order for the component to know which endpoint to call to request files
            // not supplying enough for these combinations will get a null file result
            if ((this.driveId && !this.itemId && !this.itemPath) ||
                (this.groupId && !this.itemId && !this.itemPath) ||
                (this.siteId && !this.itemId && !this.itemPath) ||
                (this.userId && !this.insightType && !this.itemId && !this.itemPath)) {
                this.files = null;
            }
            if (!this.files) {
                if (this.fileListQuery) {
                    pageIterator = yield getFilesByListQueryIterator(graph, this.fileListQuery, this.pageSize);
                }
                else if (this.fileQueries) {
                    files = yield getFilesByQueries(graph, this.fileQueries);
                }
                else if (getFromMyDrive) {
                    if (this.itemId) {
                        pageIterator = yield getFilesByIdIterator(graph, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getFilesByPathIterator(graph, this.itemPath, this.pageSize);
                    }
                    else if (this.insightType) {
                        files = yield getMyInsightsFiles(graph, this.insightType);
                    }
                    else {
                        pageIterator = yield getFilesIterator(graph, this.pageSize);
                    }
                }
                else if (this.driveId) {
                    if (this.itemId) {
                        pageIterator = yield getDriveFilesByIdIterator(graph, this.driveId, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getDriveFilesByPathIterator(graph, this.driveId, this.itemPath, this.pageSize);
                    }
                }
                else if (this.groupId) {
                    if (this.itemId) {
                        pageIterator = yield getGroupFilesByIdIterator(graph, this.groupId, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getGroupFilesByPathIterator(graph, this.groupId, this.itemPath, this.pageSize);
                    }
                }
                else if (this.siteId) {
                    if (this.itemId) {
                        pageIterator = yield getSiteFilesByIdIterator(graph, this.siteId, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getSiteFilesByPathIterator(graph, this.siteId, this.itemPath, this.pageSize);
                    }
                }
                else if (this.userId) {
                    if (this.itemId) {
                        pageIterator = yield getUserFilesByIdIterator(graph, this.userId, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getUserFilesByPathIterator(graph, this.userId, this.itemPath, this.pageSize);
                    }
                    else if (this.insightType) {
                        files = yield getUserInsightsFiles(graph, this.userId, this.insightType);
                    }
                }
                if (pageIterator) {
                    this.pageIterator = pageIterator;
                    this._preloadedFiles = [...this.pageIterator.value];
                    // handle when cached file length is greater than page size
                    if (this._preloadedFiles.length >= this.pageSize) {
                        files = this._preloadedFiles.splice(0, this.pageSize);
                    }
                    else {
                        files = this._preloadedFiles.splice(0, this._preloadedFiles.length);
                    }
                }
                // filter files when extensions are provided
                let filteredByFileExtension;
                if (((_a = this.fileExtensions) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    // retrive all pages before filtering
                    if ((_b = this.pageIterator) === null || _b === void 0 ? void 0 : _b.value) {
                        while (this.pageIterator.hasNext) {
                            yield fetchNextAndCacheForFilesPageIterator(this.pageIterator);
                        }
                        files = this.pageIterator.value;
                        this._preloadedFiles = [];
                    }
                    filteredByFileExtension = files.filter(file => {
                        for (const e of this.fileExtensions) {
                            if (e === this.getFileExtension(file.name)) {
                                return file;
                            }
                        }
                    });
                }
                if ((filteredByFileExtension === null || filteredByFileExtension === void 0 ? void 0 : filteredByFileExtension.length) >= 0) {
                    this.files = filteredByFileExtension;
                    if (this.pageSize) {
                        files = this.files.splice(0, this.pageSize);
                        this.files = files;
                    }
                }
                else {
                    this.files = files;
                }
            }
            for (const file of this.files) {
                if (((_c = file === null || file === void 0 ? void 0 : file.folder) === null || _c === void 0 ? void 0 : _c.childCount) > 0) {
                    // expand the file with children
                    const driveId = (_d = file === null || file === void 0 ? void 0 : file.parentReference) === null || _d === void 0 ? void 0 : _d.driveId;
                    const itemId = file === null || file === void 0 ? void 0 : file.id;
                    const iterator = yield getDriveFilesByIdIterator(graph, driveId, itemId, 5);
                    if (iterator) {
                        const children = [...iterator.value];
                        file.children = children;
                    }
                }
            }
        });
    }
    /**
     * Handle the click event on an item.
     *
     * @protected
     * @memberof MgtFileList
     */
    handleItemSelect(item, event) {
        this.handleFileClick(item);
        this.fireCustomEvent('itemClick', item);
        // handle accessibility updates when item clicked
        if (event) {
            const fileList = this.renderRoot.querySelector('.file-list');
            // get index of the focused item
            const nodes = Array.from(fileList.children);
            const li = event.target.closest('li');
            const index = nodes.indexOf(li);
            this._focusedItemIndex = index;
            const clickedItem = fileList.children[this._focusedItemIndex];
            this.updateItemBackgroundColor(fileList, clickedItem, 'selected');
        }
    }
    /**
     * Handle the click event on button to show next page.
     *
     * @protected
     * @memberof MgtFileList
     */
    renderNextPage() {
        return __awaiter(this, void 0, void 0, function* () {
            // render next page from cache if exists, or else use iterator
            if (this._preloadedFiles.length > 0) {
                this.files = [
                    ...this.files,
                    ...this._preloadedFiles.splice(0, Math.min(this.pageSize, this._preloadedFiles.length))
                ];
            }
            else {
                if (this.pageIterator.hasNext) {
                    this._isLoadingMore = true;
                    const root = this.renderRoot.querySelector('#file-list-wrapper');
                    if (root === null || root === void 0 ? void 0 : root.animate) {
                        // play back
                        root.animate([
                            {
                                height: 'auto',
                                transformOrigin: 'top left'
                            },
                            {
                                height: 'auto',
                                transformOrigin: 'top left'
                            }
                        ], {
                            duration: 1000,
                            easing: 'ease-in-out',
                            fill: 'both'
                        });
                    }
                    yield fetchNextAndCacheForFilesPageIterator(this.pageIterator);
                    this._isLoadingMore = false;
                    this.files = this.pageIterator.value;
                }
            }
            this.requestUpdate();
        });
    }
    /**
     * Get file extension string from file name
     *
     * @param name file name
     * @returns {string} file extension
     */
    getFileExtension(name) {
        const re = /(?:\.([^.]+))?$/;
        const fileExtension = re.exec(name)[1] || '';
        return fileExtension;
    }
    /**
     * Handle remove and add css class on accessibility keyboard select and focus
     *
     * @param fileList HTML element
     * @param focusedItem HTML element
     * @param className background class to be applied
     */
    updateItemBackgroundColor(fileList, focusedItem, className) {
        // reset background color and remove tabindex
        for (const node of fileList.children) {
            node.classList.remove(className);
            node.removeAttribute('tabindex');
        }
        // set focused item background color
        if (focusedItem) {
            focusedItem.classList.add(className);
            focusedItem.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
            focusedItem.setAttribute('tabindex', '0');
            focusedItem.focus();
        }
        // remove selected classes
        for (const node of fileList.children) {
            node.classList.remove('selected');
        }
    }
    /**
     * Handle reload of File List and condition to clear cache
     *
     * @param clearCache boolean, if true clear cache
     */
    reload(clearCache = false) {
        if (clearCache) {
            // clear cache File List
            void clearFilesCache();
        }
        // explicitly run the task to reload data
        void this._task.run();
    }
}
__decorate([
    state(),
    __metadata("design:type", Object)
], MgtFileList.prototype, "_isCompact", void 0);
__decorate([
    state(),
    __metadata("design:type", Array)
], MgtFileList.prototype, "_personCardFiles", void 0);
__decorate([
    property({
        attribute: 'file-list-query'
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "fileListQuery", void 0);
__decorate([
    property({
        attribute: 'file-queries',
        converter: (value, _type) => {
            if (value) {
                return value.split(',').map(v => v.trim());
            }
            else {
                return null;
            }
        }
    }),
    __metadata("design:type", Array)
], MgtFileList.prototype, "fileQueries", void 0);
__decorate([
    property({ type: Object }),
    __metadata("design:type", Array)
], MgtFileList.prototype, "files", void 0);
__decorate([
    property({
        attribute: 'site-id'
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "siteId", void 0);
__decorate([
    property({
        attribute: 'drive-id'
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "driveId", void 0);
__decorate([
    property({
        attribute: 'group-id'
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "groupId", void 0);
__decorate([
    property({
        attribute: 'item-id'
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "itemId", void 0);
__decorate([
    property({
        attribute: 'item-path'
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "itemPath", void 0);
__decorate([
    property({
        attribute: 'user-id'
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "userId", void 0);
__decorate([
    property({
        attribute: 'insight-type'
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "insightType", void 0);
__decorate([
    property({
        attribute: 'item-view',
        converter: value => viewTypeConverter(value, 'threelines')
    }),
    __metadata("design:type", String)
], MgtFileList.prototype, "itemView", void 0);
__decorate([
    property({
        attribute: 'file-extensions',
        converter: (value, _type) => {
            return value.split(',').map(v => v.trim());
        }
    }),
    __metadata("design:type", Array)
], MgtFileList.prototype, "fileExtensions", void 0);
__decorate([
    property({
        attribute: 'page-size',
        type: Number
    }),
    __metadata("design:type", Object)
], MgtFileList.prototype, "pageSize", void 0);
__decorate([
    property({
        attribute: 'disable-open-on-click',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtFileList.prototype, "disableOpenOnClick", void 0);
__decorate([
    property({
        attribute: 'hide-more-files-button',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtFileList.prototype, "hideMoreFilesButton", void 0);
__decorate([
    property({
        attribute: 'max-file-size',
        type: Number
    }),
    __metadata("design:type", Number)
], MgtFileList.prototype, "maxFileSize", void 0);
__decorate([
    property({
        attribute: 'enable-file-upload',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtFileList.prototype, "enableFileUpload", void 0);
__decorate([
    property({
        attribute: 'max-upload-file',
        type: Number
    }),
    __metadata("design:type", Object)
], MgtFileList.prototype, "maxUploadFile", void 0);
__decorate([
    property({
        attribute: 'excluded-file-extensions',
        converter: (value, _type) => {
            return value.split(',').map(v => v.trim());
        }
    }),
    __metadata("design:type", Array)
], MgtFileList.prototype, "excludedFileExtensions", void 0);
__decorate([
    state(),
    __metadata("design:type", Boolean)
], MgtFileList.prototype, "_isLoadingMore", void 0);
//# sourceMappingURL=mgt-file-list.js.map