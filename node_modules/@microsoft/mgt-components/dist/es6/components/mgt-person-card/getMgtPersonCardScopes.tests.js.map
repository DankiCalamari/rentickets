{"version":3,"file":"getMgtPersonCardScopes.tests.js","sourceRoot":"src/","sources":["components/mgt-person-card/getMgtPersonCardScopes.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { MgtPersonCardConfig } from './MgtPersonCardConfig';\nimport { expect } from '@open-wc/testing';\nimport { getMgtPersonCardScopes } from './getMgtPersonCardScopes';\n\ndescribe('getMgtPersonCardScopes() tests', () => {\n  const originalConfigMessaging = MgtPersonCardConfig.isSendMessageVisible;\n  const originalConfigContactApis = MgtPersonCardConfig.useContactApis;\n  const originalConfigOrgSection = { ...MgtPersonCardConfig.sections.organization };\n  const originalConfigSections = { ...MgtPersonCardConfig.sections };\n  beforeEach(() => {\n    MgtPersonCardConfig.sections = { ...originalConfigSections };\n    MgtPersonCardConfig.sections.organization = { ...originalConfigOrgSection };\n    MgtPersonCardConfig.useContactApis = originalConfigContactApis;\n    MgtPersonCardConfig.isSendMessageVisible = originalConfigMessaging;\n  });\n  it('should have a minimal permission set', () => {\n    const expectedScopes = [\n      'User.Read.All',\n      'People.Read.All',\n      'Sites.Read.All',\n      'Mail.Read',\n      'Mail.ReadBasic',\n      'Contacts.Read',\n      'Chat.ReadWrite'\n    ];\n    expect(getMgtPersonCardScopes()).to.have.members(expectedScopes);\n  });\n\n  it('should have not have Sites.Read.All if files is configured off', () => {\n    MgtPersonCardConfig.sections.files = false;\n\n    const expectedScopes = [\n      'User.Read.All',\n      'People.Read.All',\n      'Mail.Read',\n      'Mail.ReadBasic',\n      'Contacts.Read',\n      'Chat.ReadWrite'\n    ];\n    expect(getMgtPersonCardScopes()).to.have.members(expectedScopes);\n  });\n\n  it('should have not have Mail scopes if mail is configured off', () => {\n    MgtPersonCardConfig.sections.mailMessages = false;\n\n    const expectedScopes = ['User.Read.All', 'People.Read.All', 'Sites.Read.All', 'Contacts.Read', 'Chat.ReadWrite'];\n    expect(getMgtPersonCardScopes()).to.have.members(expectedScopes);\n  });\n\n  it('should have People.Read but not People.Read.All if showWorksWith is false', () => {\n    MgtPersonCardConfig.sections.organization.showWorksWith = false;\n    const expectedScopes = [\n      'User.Read.All',\n      'People.Read',\n      'Sites.Read.All',\n      'Mail.Read',\n      'Mail.ReadBasic',\n      'Contacts.Read',\n      'Chat.ReadWrite'\n    ];\n    expect(getMgtPersonCardScopes()).to.have.members(expectedScopes);\n  });\n\n  it('should have not have User.Read.All if profile and organization are false', () => {\n    MgtPersonCardConfig.sections.organization = undefined;\n    MgtPersonCardConfig.sections.profile = false;\n\n    const expectedScopes = [\n      'User.Read',\n      'User.ReadBasic.All',\n      'People.Read',\n      'Sites.Read.All',\n      'Mail.Read',\n      'Mail.ReadBasic',\n      'Contacts.Read',\n      'Chat.ReadWrite'\n    ];\n    const actualScopes = getMgtPersonCardScopes();\n    expect(actualScopes).to.have.members(expectedScopes);\n\n    expect(actualScopes).to.not.include('User.Read.All');\n  });\n\n  it('should have not have Chat.ReadWrite if isSendMessageVisible is false', () => {\n    MgtPersonCardConfig.isSendMessageVisible = false;\n\n    const expectedScopes = [\n      'User.Read.All',\n      'People.Read.All',\n      'Sites.Read.All',\n      'Mail.Read',\n      'Mail.ReadBasic',\n      'Contacts.Read'\n    ];\n    const actualScopes = getMgtPersonCardScopes();\n    expect(actualScopes).to.have.members(expectedScopes);\n\n    expect(actualScopes).to.not.include('Chat.ReadWrite');\n  });\n\n  it('should have not have Chat.ReadWrite if useContactApis is false', () => {\n    MgtPersonCardConfig.useContactApis = false;\n\n    const expectedScopes = [\n      'User.Read.All',\n      'People.Read.All',\n      'Sites.Read.All',\n      'Mail.Read',\n      'Mail.ReadBasic',\n      'Chat.ReadWrite'\n    ];\n    const actualScopes = getMgtPersonCardScopes();\n    expect(actualScopes).to.have.members(expectedScopes);\n\n    expect(actualScopes).to.not.include('Contacts.Read');\n  });\n});\n"]}