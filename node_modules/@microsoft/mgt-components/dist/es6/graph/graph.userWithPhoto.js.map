{"version":3,"file":"graph.userWithPhoto.js","sourceRoot":"src/","sources":["graph/graph.userWithPhoto.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { CacheService, IGraph, prepScopes } from '@microsoft/mgt-element';\n\nimport {\n  CachePhoto,\n  anyUserValidPhotoScopes,\n  currentUserValidPhotoScopes,\n  getIsPhotosCacheEnabled,\n  getPhotoForResource,\n  getPhotoFromCache,\n  getPhotoInvalidationTime,\n  storePhotoInCache\n} from './graph.photos';\nimport { CacheUser, getIsUsersCacheEnabled, getUserInvalidationTime } from './graph.user';\nimport { IDynamicPerson } from './types';\nimport { schemas } from './cacheStores';\nimport { Photo } from '@microsoft/microsoft-graph-types';\nimport { isGraphError } from './isGraphError';\n\n/**\n * async promise, returns IDynamicPerson\n *\n * @param {string} userId\n * @returns {(Promise<IDynamicPerson>)}\n * @memberof Graph\n */\nexport const getUserWithPhoto = async (\n  graph: IGraph,\n  userId?: string,\n  requestedProps?: string[]\n): Promise<IDynamicPerson> => {\n  const anyUserValidScopes = [\n    'User.ReadBasic.All',\n    'User.Read.All',\n    'Directory.Read.All',\n    'User.ReadWrite.All',\n    'Directory.ReadWrite.All'\n  ];\n\n  const currentUserValidScopes = ['User.Read', 'User.ReadWrite', ...anyUserValidScopes];\n\n  const requiredUserScopes = userId ? anyUserValidScopes : currentUserValidScopes;\n  const requiredPhotoScopes = userId ? anyUserValidPhotoScopes : currentUserValidPhotoScopes;\n\n  let photo: string;\n  let user: IDynamicPerson = null;\n\n  let cachedPhoto: CachePhoto;\n  let cachedUser: CacheUser;\n\n  const resource = userId ? `users/${userId}` : 'me';\n  const fullResource = resource + (requestedProps ? `?$select=${requestedProps.toString()}` : '');\n\n  // attempt to get user and photo from cache if enabled\n  if (getIsUsersCacheEnabled()) {\n    const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n    cachedUser = await cache.getValue(userId || 'me');\n    if (cachedUser && getUserInvalidationTime() > Date.now() - cachedUser.timeCached) {\n      user = cachedUser.user ? (JSON.parse(cachedUser.user) as IDynamicPerson) : null;\n      if (user !== null && requestedProps) {\n        const uniqueProps = requestedProps.filter(prop => !Object.keys(user).includes(prop));\n        if (uniqueProps.length >= 1) {\n          user = null;\n          cachedUser = null;\n        }\n      }\n    } else {\n      cachedUser = null;\n    }\n  }\n  if (getIsPhotosCacheEnabled()) {\n    cachedPhoto = await getPhotoFromCache(userId || 'me', schemas.photos.stores.users);\n    if (cachedPhoto && getPhotoInvalidationTime() > Date.now() - cachedPhoto.timeCached) {\n      photo = cachedPhoto.photo;\n    } else if (cachedPhoto) {\n      try {\n        const response: Photo = (await graph.api(`${resource}/photo`).get()) as Photo;\n        if (response?.['@odata.mediaEtag'] && response['@odata.mediaEtag'] === cachedPhoto.eTag) {\n          // put current image into the cache to update the timestamp since etag is the same\n          await storePhotoInCache(userId || 'me', schemas.photos.stores.users, cachedPhoto);\n          photo = cachedPhoto.photo;\n        } else {\n          cachedPhoto = null;\n        }\n      } catch (e: unknown) {\n        if (isGraphError(e)) {\n          // if 404 received (photo not found) but user already in cache, update timeCache value to prevent repeated 404 error / graph calls on each page refresh\n          if (e.code === 'ErrorItemNotFound' || e.code === 'ImageNotFound') {\n            await storePhotoInCache(userId || 'me', schemas.photos.stores.users, { eTag: null, photo: null });\n          }\n        }\n      }\n    }\n  }\n\n  // if both are not in the cache, batch get them\n  if (!cachedPhoto && !cachedUser) {\n    let eTag: string;\n\n    // batch calls\n    const batch = graph.createBatch();\n    if (userId) {\n      batch.get(\n        'user',\n        `/users/${userId}${requestedProps ? '?$select=' + requestedProps.toString() : ''}`,\n        requiredUserScopes\n      );\n      batch.get('photo', `users/${userId}/photo/$value`, requiredPhotoScopes);\n    } else {\n      batch.get('user', 'me', requiredUserScopes);\n      batch.get('photo', 'me/photo/$value', requiredPhotoScopes);\n    }\n    const response = await batch.executeAll();\n\n    const photoResponse = response.get('photo');\n    if (photoResponse) {\n      // eslint-disable-next-line @typescript-eslint/dot-notation\n      eTag = photoResponse.headers['ETag'];\n      photo = photoResponse.content as string;\n    }\n\n    const userResponse = response.get('user');\n    if (userResponse) {\n      user = userResponse.content as IDynamicPerson;\n    }\n\n    // store user & photo in their respective cache\n    if (getIsUsersCacheEnabled()) {\n      const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n      await cache.putValue(userId || 'me', { user: JSON.stringify(user) });\n    }\n    if (getIsPhotosCacheEnabled()) {\n      await storePhotoInCache(userId || 'me', schemas.photos.stores.users, { eTag, photo });\n    }\n  } else if (!cachedPhoto) {\n    try {\n      // if only photo or user is not cached, get it individually\n      const response = await getPhotoForResource(graph, resource, requiredPhotoScopes);\n      if (response) {\n        if (getIsPhotosCacheEnabled()) {\n          await storePhotoInCache(userId || 'me', schemas.photos.stores.users, {\n            eTag: response.eTag,\n            photo: response.photo\n          });\n        }\n        photo = response.photo;\n      }\n    } catch (_) {\n      // intentionally left empty...\n    }\n  } else if (!cachedUser) {\n    // get user from graph\n    try {\n      const response: IDynamicPerson = (await graph\n        .api(fullResource)\n        .middlewareOptions(prepScopes(requiredUserScopes))\n        .get()) as IDynamicPerson;\n\n      if (response) {\n        if (getIsUsersCacheEnabled()) {\n          const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n          await cache.putValue(userId || 'me', { user: JSON.stringify(response) });\n        }\n        user = response;\n      }\n    } catch (_) {\n      // intentionally left empty...\n    }\n  }\n\n  if (user) {\n    user.personImage = photo;\n  }\n  return user;\n};\n"]}