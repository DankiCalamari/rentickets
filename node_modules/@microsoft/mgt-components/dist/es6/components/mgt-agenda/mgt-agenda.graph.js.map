{"version":3,"file":"mgt-agenda.graph.js","sourceRoot":"src/","sources":["components/mgt-agenda/mgt-agenda.graph.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAE,iBAAiB,EAAU,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAG/E;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CACxC,KAAa,EACb,KAAa,EACb,gBAA0B,EACwB,EAAE;IACpD,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,iBAAiB,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAE3G,OAAO,iBAAiB,CAAC,MAAM,CAAuB,KAAK,EAAE,OAAO,CAAC,CAAC;AACxE,CAAC,CAAA,CAAC;AAEF;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,KAAa,EACb,aAAmB,EACnB,WAAiB,EACjB,OAAgB,EACkC,EAAE;IACpD,MAAM,GAAG,GAAG,iBAAiB,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC;IAC3D,MAAM,GAAG,GAAG,eAAe,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC;IAEvD,MAAM,GAAG,GAAW,OAAO;QACzB,CAAC,CAAC,UAAU,OAAO,0BAA0B,GAAG,IAAI,GAAG,EAAE;QACzD,CAAC,CAAC,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;IACpC,MAAM,cAAc,GAAG,OAAO;QAC5B,CAAC,CAAC,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;QAC3C,CAAC,CAAC,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,qBAAqB,CAAC,CAAC;IAErE,OAAO,0BAA0B,CAAC,KAAK,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;AAChE,CAAC,CAAA,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphPageIterator, IGraph, prepScopes } from '@microsoft/mgt-element';\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n\n/**\n *\n * @param {IGraph} graph\n * @param {string} query the graph resource and query string to be requested\n * @param {string[]} additionalScopes an array of scope to be requested before making the request\n * Should be calculated by the calling code using `IProvider.needsAdditionalScopes()`\n * @returns {Promise<GraphPageIterator<MicrosoftGraph.Event>>} a page iterator to allow\n * the calling code to request more data if present and needed\n */\nexport const getEventsQueryPageIterator = async (\n  graph: IGraph,\n  query: string,\n  additionalScopes: string[]\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> => {\n  const request = graph.api(query).middlewareOptions(prepScopes(additionalScopes)).orderby('start/dateTime');\n\n  return GraphPageIterator.create<MicrosoftGraph.Event>(graph, request);\n};\n\n/**\n * returns Calender events iterator associated with either the logged in user or a specific groupId\n *\n * @param {IGraph} graph\n * @param {Date} startDateTime\n * @param {Date} endDateTime\n * @param {string} [groupId]\n * @returns {Promise<GraphPageIterator<MicrosoftGraph.Event>>}\n * @memberof Graph\n */\nexport const getEventsPageIterator = async (\n  graph: IGraph,\n  startDateTime: Date,\n  endDateTime: Date,\n  groupId?: string\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> => {\n  const sdt = `startdatetime=${startDateTime.toISOString()}`;\n  const edt = `enddatetime=${endDateTime.toISOString()}`;\n\n  const uri: string = groupId\n    ? `groups/${groupId}/calendar/calendarview?${sdt}&${edt}`\n    : `me/calendarview?${sdt}&${edt}`;\n  const allValidScopes = groupId\n    ? ['Group.Read.All', 'Group.ReadWrite.All']\n    : ['Calendars.ReadBasic', 'Calendars.Read', 'Calendars.ReadWrite'];\n\n  return getEventsQueryPageIterator(graph, uri, allValidScopes);\n};\n"]}