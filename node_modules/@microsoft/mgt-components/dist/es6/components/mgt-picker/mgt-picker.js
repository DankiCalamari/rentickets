/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property, state } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { MgtTemplatedTaskComponent, mgtHtml } from '@microsoft/mgt-element';
import { strings } from './strings';
import { fluentCombobox, fluentOption } from '@fluentui/web-components';
import { registerFluentComponents } from '../../utils/FluentComponents';
import '../../styles/style-helper';
import { registerMgtGetComponent } from '../mgt-get/mgt-get';
import { styles } from './mgt-picker-css';
import { registerComponent } from '@microsoft/mgt-element';
export const registerMgtPickerComponent = () => {
    registerFluentComponents(fluentCombobox, fluentOption);
    registerMgtGetComponent();
    registerComponent('picker', MgtPicker);
};
/**
 * Web component that allows a single entity pick from a generic endpoint from Graph. Is a thin wrapper over mgt-get.
 * Does not load any state itself, only received state from mgt-get via events.
 *
 * @fires {CustomEvent<any>} selectionChanged - Fired when an option is clicked/selected
 * @export
 * @class MgtPicker
 * @extends {MgtTemplatedTaskComponent}
 *
 * @cssprop --picker-background-color - {Color} Picker component background color
 * @cssprop --picker-list-max-height - {String} max height for options list. Default value is 380px.
 */
export class MgtPicker extends MgtTemplatedTaskComponent {
    get strings() {
        return strings;
    }
    static get styles() {
        return styles;
    }
    constructor() {
        super();
        /**
         * Api version to use for request
         *
         * @type {string}
         * @memberof MgtPicker
         */
        this.version = 'v1.0';
        /**
         * Maximum number of pages to get for the resource
         * default = 3
         * if <= 0, all pages will be fetched
         *
         * @type {number}
         * @memberof MgtPicker
         */
        this.maxPages = 3;
        /**
         * The scopes to request
         *
         * @type {string[]}
         * @memberof MgtPicker
         */
        this.scopes = [];
        /**
         * Enables cache on the response from the specified resource
         * default = false
         *
         * @type {boolean}
         * @memberof MgtPicker
         */
        this.cacheEnabled = false;
        /**
         * Invalidation period of the cache for the responses in milliseconds
         *
         * @type {number}
         * @memberof MgtPicker
         */
        this.cacheInvalidationPeriod = 0;
        this.renderLoading = () => {
            if (!this.response) {
                return this.renderTemplate('loading', null);
            }
            return this.renderContent();
        };
        /**
         * Invoked on each update to perform rendering the picker. This method must return
         * a lit-html TemplateResult. Setting properties inside this method will *not*
         * trigger the element to update.
         */
        this.renderContent = () => {
            var _a;
            const error = this.error ? this.error : null;
            if (error && this.hasTemplate('error')) {
                return this.renderTemplate('error', { error }, 'error');
            }
            else if (this.hasTemplate('no-data')) {
                return this.renderTemplate('no-data', null);
            }
            return ((_a = this.response) === null || _a === void 0 ? void 0 : _a.length) > 0 ? this.renderPicker() : this.renderGet();
        };
        /**
         * Handles getting the fluent option item in the dropdown and fires a custom
         * event with it when you press Enter or Backspace keys.
         *
         * @param {KeyboardEvent} e
         */
        this.handleComboboxKeydown = (e) => {
            let value;
            let item;
            const keyName = e.key;
            const comboBox = e.target;
            const fluentOptionEl = comboBox.querySelector('.selected');
            if (fluentOptionEl) {
                value = fluentOptionEl.getAttribute('value');
            }
            if ('Enter' === keyName) {
                if (value) {
                    item = this.response.filter(res => res.id === value).pop();
                    this.fireCustomEvent('selectionChanged', item, true, false, true);
                }
            }
        };
        this.placeholder = this.strings.comboboxPlaceholder;
        this.entityType = null;
        this.keyName = null;
    }
    /**
     * Refresh the data
     *
     * @param {boolean} [hardRefresh=false]
     * if false (default), the component will only update if the data changed
     * if true, the data will be first cleared and reloaded completely
     * @memberof MgtPicker
     */
    refresh(hardRefresh = false) {
        if (hardRefresh) {
            this.clearState();
        }
        void this._task.run();
    }
    /**
     * Clears the state of the component
     *
     * @protected
     * @memberof MgtPicker
     */
    clearState() {
        this.response = null;
        this.error = null;
    }
    /**
     * Render picker.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPicker
     */
    renderPicker() {
        return mgtHtml `
      <fluent-combobox
        @keydown=${this.handleComboboxKeydown}
        current-value=${ifDefined(this.selectedValue)}
        part="picker"
        class="picker"
        id="combobox"
        autocomplete="list"
        placeholder=${this.placeholder}>
          ${this.response.map(item => html `
            <fluent-option value=${item.id} @click=${(e) => this.handleClick(e, item)}> ${this.getNestedPropertyValue(item, this.keyName)} </fluent-option>`)}
      </fluent-combobox>
     `;
    }
    getNestedPropertyValue(item, keyName) {
        const keys = keyName.split('.');
        let value = item;
        for (const key of keys) {
            value = value[key];
            if (value === undefined) {
                console.warn(`mgt-picker: Key '${key}' is undefined.`);
                return '';
            }
        }
        return value;
    }
    /**
     * Renders mgt-get which does a GET request to the resource.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPicker
     */
    renderGet() {
        return mgtHtml `
      <mgt-get
        class="mgt-get"
        resource=${this.resource}
        version=${this.version}
        .scopes=${this.scopes}
        max-pages=${this.maxPages}
        ?cache-enabled=${this.cacheEnabled}
        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>
      </mgt-get>`;
    }
    /**
     * When the component is first updated wire up the event listeners.
     * @param changedProperties a map of changed properties with old values
     */
    firstUpdated(changedProperties) {
        super.firstUpdated(changedProperties);
        const parent = this.renderRoot;
        if (parent) {
            parent.addEventListener('dataChange', (e) => this.handleDataChange(e));
        }
        else {
            console.error('ðŸ¦’: mgt-picker component requires a renderRoot. Something has gone horribly wrong.');
        }
    }
    handleDataChange(e) {
        const response = e.detail.response.value;
        const error = e.detail.error ? e.detail.error : null;
        this.response = response;
        this.error = error;
    }
    handleClick(_e, item) {
        this.fireCustomEvent('selectionChanged', item, true, false, true);
    }
}
__decorate([
    property({
        attribute: 'resource',
        type: String
    }),
    __metadata("design:type", String)
], MgtPicker.prototype, "resource", void 0);
__decorate([
    property({
        attribute: 'version',
        type: String
    }),
    __metadata("design:type", Object)
], MgtPicker.prototype, "version", void 0);
__decorate([
    property({
        attribute: 'max-pages',
        type: Number
    }),
    __metadata("design:type", Object)
], MgtPicker.prototype, "maxPages", void 0);
__decorate([
    property({
        attribute: 'placeholder',
        type: String
    }),
    __metadata("design:type", String)
], MgtPicker.prototype, "placeholder", void 0);
__decorate([
    property({
        attribute: 'key-name',
        type: String
    }),
    __metadata("design:type", String)
], MgtPicker.prototype, "keyName", void 0);
__decorate([
    property({
        attribute: 'entity-type',
        type: String
    }),
    __metadata("design:type", String)
], MgtPicker.prototype, "entityType", void 0);
__decorate([
    property({
        attribute: 'scopes',
        converter: value => {
            return value ? value.toLowerCase().split(',') : null;
        }
    }),
    __metadata("design:type", Array)
], MgtPicker.prototype, "scopes", void 0);
__decorate([
    property({
        attribute: 'cache-enabled',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtPicker.prototype, "cacheEnabled", void 0);
__decorate([
    property({
        attribute: 'cache-invalidation-period',
        type: Number
    }),
    __metadata("design:type", Object)
], MgtPicker.prototype, "cacheInvalidationPeriod", void 0);
__decorate([
    property({
        attribute: 'selected-value',
        type: String
    }),
    __metadata("design:type", String)
], MgtPicker.prototype, "selectedValue", void 0);
__decorate([
    state(),
    __metadata("design:type", Array)
], MgtPicker.prototype, "response", void 0);
//# sourceMappingURL=mgt-picker.js.map