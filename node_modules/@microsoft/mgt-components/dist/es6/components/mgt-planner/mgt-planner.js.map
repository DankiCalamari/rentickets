{"version":3,"file":"mgt-planner.js","sourceRoot":"src/","sources":["components/mgt-planner/mgt-planner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport {\n  ComponentMediaQuery,\n  MgtTemplatedTaskComponent,\n  ProviderState,\n  Providers,\n  mgtHtml\n} from '@microsoft/mgt-element';\nimport { Person, PlannerAssignments, PlannerTask, User } from '@microsoft/microsoft-graph-types';\nimport { Contact } from '@microsoft/microsoft-graph-types-beta';\nimport { HTMLTemplateResult, PropertyValueMap, TemplateResult, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { getMe } from '../../graph/graph.user';\nimport { getShortDateString } from '../../utils/Utils';\nimport { MgtPeoplePicker, registerMgtPeoplePickerComponent } from '../mgt-people-picker/mgt-people-picker';\nimport { MgtPeople, registerMgtPeopleComponent } from '../mgt-people/mgt-people';\nimport '../mgt-person/mgt-person';\nimport '../sub-components/mgt-arrow-options/mgt-arrow-options';\nimport '../sub-components/mgt-dot-options/mgt-dot-options';\nimport { MgtFlyout, registerMgtFlyoutComponent } from '../sub-components/mgt-flyout/mgt-flyout';\nimport { styles } from './mgt-planner-css';\nimport { strings } from './strings';\nimport { ITask, ITaskFolder, ITaskGroup, ITaskSource, PlannerTaskSource } from './task-sources';\nimport { getSvg, SvgIcon } from '../../utils/SvgHelper';\nimport { isElementDark } from '../../utils/isDark';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport {\n  fluentSelect,\n  fluentOption,\n  fluentTextField,\n  fluentButton,\n  fluentCheckbox,\n  fluentSkeleton\n} from '@fluentui/web-components';\nimport { registerComponent } from '@microsoft/mgt-element';\nimport { registerMgtDotOptionsComponent } from '../sub-components/mgt-dot-options/mgt-dot-options';\nimport { registerMgtArrowOptionsComponent } from '../sub-components/mgt-arrow-options/mgt-arrow-options';\n\n/*\n * Filter function\n */\nexport type TaskFilter = (task: PlannerTask) => boolean;\n\nconst plannerAssignment = {\n  '@odata.type': '#microsoft.graph.plannerAssignment',\n  orderHint: ' !'\n};\n\nexport const registerMgtPlannerComponent = () => {\n  registerFluentComponents(fluentSelect, fluentOption, fluentTextField, fluentButton, fluentCheckbox, fluentSkeleton);\n\n  registerMgtArrowOptionsComponent();\n  registerMgtDotOptionsComponent();\n  registerMgtFlyoutComponent();\n  registerMgtPeopleComponent();\n  registerMgtPeoplePickerComponent();\n  registerComponent('planner', MgtPlanner);\n};\n\n/**\n * Web component enables the user to view, add, remove, complete, or edit tasks. It works with tasks in Microsoft Planner.\n *\n * @export\n * @class MgtPlanner\n * @extends {MgtBaseComponent}\n *\n * @fires {CustomEvent<ITask>} taskAdded - Fires when a new task has been created.\n * @fires {CustomEvent<ITask>} taskChanged - Fires when task metadata has been changed, such as marking completed.\n * @fires {CustomEvent<ITask>} taskClick - Fires when the user clicks or taps on a task.\n * @fires {CustomEvent<ITask>} taskRemoved - Fires when an existing task has been deleted.\n *\n * @cssprop --tasks-header-padding - {String} Tasks header padding. Default is 0 0 14px 0.\n * @cssprop --tasks-header-margin - {String} Tasks header margin. Default is none.\n * @cssprop --tasks-header-text-font-size: {Length} the font size of the tasks header. Default is 24px.\n * @cssprop --tasks-header-text-font-weight: {Length} the font weight of the tasks header. Default is 600.\n * @cssprop --tasks-header-text-color: {Color} the font color of the tasks header.\n * @cssprop --tasks-header-text-hover-color: {Color} the font color of the tasks header when you hover on it.\n *\n * @cssprop --tasks-new-button-width - {Length} Tasks new button width. Default is none.\n * @cssprop --tasks-new-button-height - {Length} Tasks new button height. Default is none\n * @cssprop --tasks-new-button-text-color - {Color} Tasks new button text color.\n * @cssprop --tasks-new-button-text-font-weight - {Length} Tasks new button text font weight. Default is 700.\n * @cssprop --tasks-new-button-background - {Length} Tasks new button background.\n * @cssprop --tasks-new-button-border - {Length} Tasks new button border. Default is none.\n * @cssprop --tasks-new-button-background-hover - {Color} Tasks new button hover background.\n * @cssprop --tasks-new-button-background-active - {Color} Tasks new button active background.\n *\n * @cssprop --task-add-new-button-width - {Length} Add a new task button width. Default is none.\n * @cssprop --task-add-new-button-height - {Length} Add a new task button height. Default is none\n * @cssprop --task-add-new-button-text-color - {Color} Add a new task button text color.\n * @cssprop --task-add-new-button-text-font-weight - {Length} Add a new task button text font weight. Default is 700.\n * @cssprop --task-add-new-button-background - {Length} Add a new task button background.\n * @cssprop --task-add-new-button-border - {Length} Add a new task button border. Default is none.\n * @cssprop --task-add-new-button-background-hover - {Color} Add a new task button hover background.\n * @cssprop --task-add-new-button-background-active - {Color} Add a new task button active background.\n *\n * @cssprop --task-cancel-new-button-width - {Length} Cancel adding a new task button width. Default is none.\n * @cssprop --task-cancel-new-button-height - {Length} Cancel adding a new task button height. Default is none\n * @cssprop --task-cancel-new-button-text-color - {Color} Cancel adding a new task button text color.\n * @cssprop --task-cancel-new-button-text-font-weight - {Length} Cancel adding a new task button text font weight. Default is 700.\n * @cssprop --task-cancel-new-button-background - {Length} Cancel adding a new task button background.\n * @cssprop --task-cancel-new-button-border - {Length} Cancel adding a new task button border. Default is none.\n * @cssprop --task-cancel-new-button-background-hover - {Color} Cancel adding a new task button hover background.\n * @cssprop --task-cancel-new-button-background-active - {Color} Cancel adding a new task button active background.\n *\n * @cssprop --task-new-input-border - {Length} the border of the input for a new task. Default is fluent UI input border.\n * @cssprop --task-new-input-border-radius - {Length} the border radius of the input for a new task. Default is fluent UI input border.\n * @cssprop --task-new-input-background-color - {Color} the background color of the new task input.\n * @cssprop --task-new-input-hover-background-color - {Color} the background color of the new task input when you hover.\n * @cssprop --task-new-input-placeholder-color - {Color} the placeholder colder of the new task input.\n * @cssprop --task-new-dropdown-border - {Length} the border of the dropdown for a new task. Default is fluent UI dropdown border.\n * @cssprop --task-new-dropdown-border-radius - {Length} the border radius of the dropdown for a new task. Default is fluent UI dropdown border.\n * @cssprop --task-new-dropdown-background-color - {Color} the background color of the new task dropdown.\n * @cssprop --task-new-dropdown-hover-background-color - {Color} the background color of the new task dropdown when you hover.\n * @cssprop --task-new-dropdown-placeholder-color - {Color} the placeholder colder of the new task dropdown.\n * @cssprop --task-new-dropdown-list-background-color - {Color} the background color of the dropdown list options.\n * @cssprop --task-new-dropdown-option-text-color - {Color} the text color of the dropdown option text.\n * @cssprop --task-new-dropdown-option-hover-background-color - {Color} the background color of the dropdown option when you hover.\n * @cssprop --task-new-person-icon-color - {Color} color of the assign person text.\n * @cssprop --task-new-person-icon-text-color - {Color} color of the text beside the assign person icon.\n *\n * @cssprop --task-complete-checkbox-background-color - {Color} A completed task checkbox background color.\n * @cssprop --task-complete-checkbox-text-color - {Color} A completed task checkbox check color.\n * @cssprop --task-incomplete-checkbox-background-color - {Color} An incomplete task checkbox background color.\n * @cssprop --task-incomplete-checkbox-background-hover-color - {Color} An incomplete task checkbox background color.\n *\n * @cssprop --task-title-text-font-size - {Length} Task title text font size. Default is medium.\n * @cssprop --task-title-text-font-weight - {Length} Task title text font weight. Default is 600.\n * @cssprop --task-complete-title-text-color - {Length} Task title color for a complete task.\n * @cssprop --task-incomplete-title-text-color - {Length} Task title color for an incomplete task.\n *\n * @cssprop --task-icons-width - {Length} The icons in a task width size. Default is 20px;\n * @cssprop --task-icons-height - {Length} The icons in a task height size. Default is 20px;\n * @cssprop --task-icons-background-color - {Color} The icons in a task color background color.\n * @cssprop --task-icons-text-font-color - {Color} The text beside icons in a task color background color.\n * @cssprop --task-icons-text-font-size - {Length} The font size of the text beside icons in a task. Default is 12px.\n * @cssprop --task-icons-text-font-weight - {Length} The font weight of the text beside icons in a task. Default is 600.\n *\n * @cssprop --task-complete-background-color - {Color} The background color of a task that is complete.\n * @cssprop --task-incomplete-background-color - {Color} The background color of a task that is incomplete.\n * @cssprop --task-complete-border - {Length} The border of a task that is complete.  Default is 2px dotted var(--neutral-fill-strong-rest).\n * @cssprop --task-incomplete-border - {Length} The border of a task that is incomplete. Default is 1px solid var(--neutral-fill-strong-rest).\n * @cssprop --task-complete-border-radius - {Length} The border radius of a task that is incomplete. Default is 4px.\n * @cssprop --task-incomplete-border-radius - {Length} The border radius of a task that is incomplete. Default is 4px.\n * @cssprop --task-complete-padding - {Length} The padding of a task that is complete. Default is 10px.\n * @cssprop --task-incomplete-padding - {Length} The padding of a task that is incomplete. Default is 10px.\n * @cssprop --tasks-gap - {Length} The size of the gap between two tasks in a row. Default is 20px.\n *\n * @cssprop --tasks-background-color - {Color} the color of the background where the tasks are rendered.\n * @cssprop --tasks-border - {Length} the border of the area the tasks are rendered. Default is none.\n * @cssprop --tasks-border-radius - {Length} the border radius of the area where the tasks are rendered. Default is none.\n * @cssprop --tasks-padding - {Length} the padding of the are where the tasks are rendered. Default is 12px.\n */\nexport class MgtPlanner extends MgtTemplatedTaskComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * Strings for localization\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtPlanner\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  /**\n   * Get whether new task view is visible\n   *\n   * @memberof MgtPlanner\n   */\n  public get isNewTaskVisible(): boolean {\n    return this._isNewTaskVisible;\n  }\n\n  /**\n   * Set whether new task is visible\n   *\n   * @memberof MgtPlanner\n   */\n  public set isNewTaskVisible(value: boolean) {\n    this._isNewTaskVisible = value;\n    if (!value) {\n      this._newTaskDueDate = null;\n      this._newTaskName = '';\n      this._newTaskGroupId = '';\n      this._newTaskContainerId = '';\n    }\n  }\n\n  /**\n   * determines if tasks are un-editable\n   *\n   * @type {boolean}\n   */\n  @property({ attribute: 'read-only', type: Boolean })\n  public readOnly: boolean;\n\n  /**\n   * if set, the component will only show tasks from this plan\n   *\n   * @type {string}\n   */\n  @property({ attribute: 'target-id', type: String })\n  public targetId: string;\n\n  /**\n   * if set, the component will only show tasks from this bucket\n   *\n   * @type {string}\n   */\n  @property({ attribute: 'target-bucket-id', type: String })\n  public targetBucketId: string;\n\n  /**\n   * if set, the component will first show tasks from this plan\n   *\n   * @type {string}\n   * @memberof MgtPlanner\n   */\n  @property({ attribute: 'initial-id', type: String })\n  public initialId: string;\n\n  /**\n   * if set, the component will first show tasks from this bucket\n   *\n   * @type {string}\n   * @memberof MgtPlanner\n   */\n  @property({ attribute: 'initial-bucket-id', type: String })\n  public initialBucketId: string;\n\n  /**\n   * sets whether the header is rendered\n   *\n   * @type {boolean}\n   * @memberof MgtPlanner\n   */\n  @property({ attribute: 'hide-header', type: Boolean })\n  public hideHeader: boolean;\n\n  /**\n   * sets whether the options are rendered\n   *\n   * @type {boolean}\n   * @memberof MgtPlanner\n   */\n  @property({ attribute: 'hide-options', type: Boolean })\n  public hideOptions: boolean;\n\n  /**\n   * allows developer to define specific group id\n   *\n   * @type {string}\n   */\n  @property({ attribute: 'group-id', type: String })\n  public groupId: string;\n\n  /**\n   * Optional filter function when rendering tasks\n   *\n   * @type {TaskFilter}\n   * @memberof MgtPlanner\n   */\n  public taskFilter: TaskFilter;\n\n  /**\n   * Get the scopes required for tasks\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtPlanner\n   */\n  public static get requiredScopes(): string[] {\n    return [\n      ...new Set([\n        'group.read.all',\n        'group.readwrite.all',\n        'tasks.read',\n        'tasks.readwrite',\n        ...MgtPeople.requiredScopes,\n        ...MgtPeoplePicker.requiredScopes\n      ])\n    ];\n  }\n\n  @state() private _isNewTaskVisible: boolean;\n  @state() private _newTaskBeingAdded: boolean;\n  @state() private _newTaskName: string;\n  @state() private _newTaskDueDate: Date;\n  @state() private _newTaskGroupId: string;\n  @state() private _newTaskFolderId: string;\n  @state() private _newTaskContainerId: string;\n  @state() private _groups: ITaskGroup[];\n  @state() private _folders: ITaskFolder[];\n  @state() private _tasks: ITask[];\n  @state() private _hiddenTasks: string[];\n  @state() private _inTaskLoad: boolean;\n  @state() private _hasDoneInitialLoad: boolean;\n\n  @state() private _currentGroup: string;\n  @state() private _currentFolder: string;\n  @state() private _isDarkMode = false;\n  @state() private _me: User = null;\n\n  private get filteredTasks(): ITask[] {\n    const temp = this._tasks\n      .filter(task => this.isTaskInSelectedGroupFilter(task))\n      .filter(task => this.isTaskInSelectedFolderFilter(task))\n      .filter(task => !this._hiddenTasks.includes(task.id));\n\n    if (this.taskFilter) {\n      return temp.filter(task => this.taskFilter(task._raw));\n    }\n    return temp;\n  }\n\n  private previousMediaQuery: ComponentMediaQuery;\n\n  constructor() {\n    super();\n    this.clearState();\n\n    this.previousMediaQuery = this.mediaQuery;\n  }\n\n  /**\n   * updates provider state\n   *\n   * @memberof MgtPlanner\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('resize', this.onResize);\n    window.addEventListener('darkmodechanged', this.onThemeChanged);\n    // invoked to ensure we have the correct initial value for _isDarkMode\n    this.onThemeChanged();\n  }\n\n  /**\n   * removes updates on provider state\n   *\n   * @memberof MgtPlanner\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('darkmodechanged', this.onThemeChanged);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * clears state of component\n   */\n  protected clearState(): void {\n    this._newTaskFolderId = '';\n    this._newTaskGroupId = '';\n    this._newTaskDueDate = null;\n    this._newTaskName = '';\n    this._newTaskBeingAdded = false;\n\n    this._tasks = [];\n    this._folders = [];\n    this._groups = [];\n    this._hiddenTasks = [];\n\n    this._hasDoneInitialLoad = false;\n    this._inTaskLoad = false;\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(changedProperties: PropertyValueMap<unknown>) {\n    super.firstUpdated(changedProperties);\n\n    if (this.initialId && !this._currentGroup) {\n      this._currentGroup = this.initialId;\n    }\n\n    if (this.initialBucketId && !this._currentFolder) {\n      this._currentFolder = this.initialBucketId;\n    }\n  }\n\n  /**\n   * Renders the loading state of the component if the initial load has not been completed\n   * @returns {TemplateResult}\n   */\n  protected renderLoading = (): TemplateResult => {\n    if (!this._hasDoneInitialLoad) {\n      return this.renderLoadingTask();\n    }\n    return this.renderContent();\n  };\n\n  /**\n   * Renders the contentful state of the component.\n   */\n  protected renderContent = () => {\n    const loadingTask = this._inTaskLoad && !this._hasDoneInitialLoad ? this.renderLoadingTask() : null;\n\n    let header: TemplateResult;\n\n    if (!this.hideHeader) {\n      header = html`\n        <div class=\"header\">\n          ${this.renderPlanOptions()}\n        </div>\n      `;\n    }\n\n    return html`\n      ${header}\n      <div class=\"tasks\">\n        ${this._isNewTaskVisible ? this.renderNewTask() : null} ${loadingTask}\n        ${repeat(\n          this.filteredTasks,\n          task => task.id,\n          task => this.renderTask(task)\n        )}\n      </div>\n    `;\n  };\n\n  /**\n   * loads tasks from dataSource\n   *\n   * @returns\n   * @memberof MgtPlanner\n   */\n  protected async loadState() {\n    const ts = this.getTaskSource();\n    if (!ts) {\n      return;\n    }\n\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return;\n    }\n\n    this._inTaskLoad = true;\n    if (!this._me) {\n      const graph = provider.graph.forComponent(this);\n      this._me = await getMe(graph);\n    }\n\n    if (this.groupId) {\n      await this._loadTasksForGroup(ts);\n    } else if (this.targetId) {\n      await this._loadTargetPlannerTasks(ts);\n    } else {\n      await this._loadAllTasks(ts);\n    }\n\n    this._inTaskLoad = false;\n    this._hasDoneInitialLoad = true;\n  }\n\n  private readonly onResize = () => {\n    if (this.mediaQuery !== this.previousMediaQuery) {\n      this.previousMediaQuery = this.mediaQuery;\n      this.requestUpdate();\n    }\n  };\n\n  private readonly onThemeChanged = () => {\n    this._isDarkMode = isElementDark(this);\n  };\n\n  private async _loadTargetPlannerTasks(ts: ITaskSource) {\n    const group = await ts.getTaskGroup(this.targetId);\n    let folders = await ts.getTaskFoldersForTaskGroup(group.id);\n\n    if (this.targetBucketId) {\n      folders = folders.filter(folder => folder.id === this.targetBucketId);\n    }\n\n    const tasks = (\n      await Promise.all(folders.map(folder => ts.getTasksForTaskFolder(folder.id, folder.parentId)))\n    ).reduce((cur, ret) => [...cur, ...ret], []);\n\n    this._tasks = tasks;\n    this._folders = folders;\n    this._groups = [group];\n  }\n\n  private async _loadAllTasks(ts: ITaskSource) {\n    const groups = await ts.getTaskGroups();\n    const folders = (await Promise.all(groups.map(group => ts.getTaskFoldersForTaskGroup(group.id)))).reduce(\n      (cur, ret) => [...cur, ...ret],\n      []\n    );\n\n    const tasks = (\n      await Promise.all(folders.map(folder => ts.getTasksForTaskFolder(folder.id, folder.parentId)))\n    ).reduce((cur, ret) => [...cur, ...ret], []);\n\n    this._tasks = tasks;\n    this._folders = folders;\n    this._groups = groups;\n  }\n\n  private async _loadTasksForGroup(ts: ITaskSource) {\n    const groups = await ts.getTaskGroupsForGroup(this.groupId);\n    const folders = (await Promise.all(groups.map(group => ts.getTaskFoldersForTaskGroup(group.id)))).reduce(\n      (cur, ret) => [...cur, ...ret],\n      []\n    );\n\n    const tasks = (\n      await Promise.all(folders.map(folder => ts.getTasksForTaskFolder(folder.id, folder.parentId)))\n    ).reduce((cur, ret) => [...cur, ...ret], []);\n\n    this._tasks = tasks;\n    this._folders = folders;\n    this._groups = groups;\n  }\n\n  private async addTask(\n    name: string,\n    dueDate: Date,\n    topParentId: string,\n    immediateParentId: string,\n    assignments: PlannerAssignments = {}\n  ) {\n    const ts = this.getTaskSource();\n    if (!ts) {\n      return;\n    }\n\n    const newTask = {\n      assignments,\n      dueDate,\n      immediateParentId,\n      name,\n      topParentId\n    } as ITask;\n\n    this._newTaskBeingAdded = true;\n    newTask._raw = await ts.addTask(newTask);\n    this.fireCustomEvent('taskAdded', newTask);\n\n    this._newTaskBeingAdded = false;\n    this.isNewTaskVisible = false;\n    await this._task.run();\n  }\n\n  private async completeTask(task: ITask) {\n    const ts = this.getTaskSource();\n    if (!ts) {\n      return;\n    }\n    await ts.setTaskComplete(task);\n    this.fireCustomEvent('taskChanged', task);\n\n    await this._task.run();\n  }\n\n  private async uncompleteTask(task: ITask) {\n    const ts = this.getTaskSource();\n    if (!ts) {\n      return;\n    }\n\n    await ts.setTaskIncomplete(task);\n    this.fireCustomEvent('taskChanged', task);\n\n    await this._task.run();\n  }\n\n  private async removeTask(task: ITask, e: Event) {\n    const ts = this.getTaskSource();\n    if (!ts) {\n      return;\n    }\n    // check if e is a Keyboard Event\n    if (e instanceof KeyboardEvent) {\n      if (e.key !== 'Enter') {\n        return;\n      }\n    }\n    this._hiddenTasks = [...this._hiddenTasks, task.id];\n    await ts.removeTask(task);\n    this.fireCustomEvent('taskRemoved', task);\n\n    await this._task.run();\n    this._hiddenTasks = this._hiddenTasks.filter(id => id !== task.id);\n  }\n\n  private async assignPeople(task: ITask, people: (User | Person | Contact)[] = []) {\n    const ts = this.getTaskSource();\n    if (!ts) {\n      return;\n    }\n\n    // create previously selected people Object\n    let currentTaskAssigneesIds: string[] = [];\n    if (task) {\n      if (task.assignments) {\n        currentTaskAssigneesIds = Object.keys(task.assignments).sort();\n      }\n    }\n\n    const newTaskAssigneesIds: string[] = people.map(person => {\n      return person.id;\n    });\n\n    // new people from people picker\n    const isEqual =\n      newTaskAssigneesIds.length === currentTaskAssigneesIds.length &&\n      newTaskAssigneesIds.sort().every((value, index) => {\n        return value === currentTaskAssigneesIds[index];\n      });\n\n    if (isEqual) {\n      return;\n    }\n\n    const peopleObj: Record<string, PlannerAssignments> = {};\n\n    // Removes an assignee to a task by setting the value to null\n    for (const p of currentTaskAssigneesIds) {\n      if (newTaskAssigneesIds.includes(p)) {\n        peopleObj[p] = plannerAssignment;\n      } else {\n        peopleObj[p] = null;\n      }\n    }\n\n    // Adds a person to the task by assigning them a temporary planner value\n    newTaskAssigneesIds.forEach(assigneeId => {\n      if (!currentTaskAssigneesIds.includes(assigneeId)) {\n        peopleObj[assigneeId] = plannerAssignment;\n      }\n    });\n\n    if (task) {\n      await ts.assignPeopleToTask(task, peopleObj);\n      await this._task.run();\n    }\n  }\n\n  private readonly onAddTaskClick = () => {\n    const picker = this.getPeoplePicker(null);\n\n    const peopleObj: Record<string, unknown> = {};\n\n    if (picker) {\n      for (const person of picker?.selectedPeople ?? []) {\n        peopleObj[person.id] = plannerAssignment;\n      }\n    }\n\n    if (!this._newTaskBeingAdded && this._newTaskName && (this._currentGroup || this._newTaskGroupId)) {\n      void this.addTask(\n        this._newTaskName,\n        this._newTaskDueDate,\n        !this._currentGroup ? this._newTaskGroupId : this._currentGroup,\n        !this._currentFolder ? this._newTaskFolderId : this._currentFolder,\n        peopleObj\n      );\n    }\n  };\n\n  private readonly onAddTaskKeyDown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      this.onAddTaskClick();\n    }\n  };\n\n  private readonly addNewTaskButtonClick = () => {\n    this.isNewTaskVisible = !this.isNewTaskVisible;\n  };\n\n  private readonly newTaskVisible = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      this.isNewTaskVisible = false;\n    }\n  };\n\n  private renderPlanOptions(): TemplateResult {\n    const p = Providers.globalProvider;\n\n    if (!p || p.state !== ProviderState.SignedIn) {\n      return null;\n    }\n\n    if (this._inTaskLoad && !this._hasDoneInitialLoad) {\n      return html`<span class=\"loading-header\"></span>`;\n    }\n\n    const addButton =\n      this.readOnly || this._isNewTaskVisible\n        ? null\n        : html`\n          <fluent-button\n            appearance=\"accent\"\n            class=\"new-task-button\"\n            @click=${this.addNewTaskButtonClick}>\n              <span slot=\"start\">${getSvg(SvgIcon.Add, 'currentColor')}</span>\n              ${this.strings.addTaskButtonSubtitle}\n          </fluent-button>\n        `;\n\n    const currentGroup = this._groups.find(d => d.id === this._currentGroup) || {\n      title: this.strings.baseSelfAssigned\n    };\n    const groupOptions = {\n      [this.strings.baseSelfAssigned]: () => {\n        this._currentGroup = null;\n        this._currentFolder = null;\n      }\n    };\n    for (const group of this._groups) {\n      groupOptions[group.title] = () => {\n        this._currentGroup = group.id;\n        this._currentFolder = null;\n      };\n    }\n    const groupSelect: TemplateResult = mgtHtml`\n        <mgt-arrow-options\n          class=\"arrow-options\"\n          .options=\"${groupOptions}\"\n          .value=\"${currentGroup.title}\"\n        ></mgt-arrow-options>`;\n\n    const separator = !this._currentGroup ? null : getSvg(SvgIcon.ChevronRight);\n\n    const currentFolder = this._folders.find(d => d.id === this._currentFolder) || {\n      name: this.strings.bucketsSelfAssigned\n    };\n    const folderOptions = {\n      [this.strings.bucketsSelfAssigned]: () => {\n        this._currentFolder = null;\n      }\n    };\n\n    for (const folder of this._folders.filter(d => d.parentId === this._currentGroup)) {\n      folderOptions[folder.name] = () => {\n        this._currentFolder = folder.id;\n      };\n    }\n\n    const folderSelect = this.targetBucketId\n      ? html`\n            <span class=\"plan-title\">\n              ${this._folders[0]?.name || ''}\n            </span>`\n      : mgtHtml`\n            <mgt-arrow-options class=\"arrow-options\" .options=\"${folderOptions}\" .value=\"${currentFolder.name}\"></mgt-arrow-options>\n          `;\n\n    return html`\n        <div class=\"title\">\n          ${groupSelect} ${separator} ${!this._currentGroup ? null : folderSelect}\n        </div>\n        ${addButton}\n      `;\n  }\n\n  private readonly handleDateChange = (e: UIEvent) => {\n    const value = (e.target as HTMLInputElement).value;\n    if (value) {\n      this._newTaskDueDate = new Date(value + 'T17:00');\n    } else {\n      this._newTaskDueDate = null;\n    }\n  };\n\n  private renderNewTask() {\n    const iconColor = 'var(--neutral-foreground-hint)';\n\n    const taskTitle = html`\n      <fluent-text-field\n        autocomplete=\"off\"\n        ?autofocus=${this.isNewTaskVisible}\n        placeholder=${this.strings.newTaskPlaceholder}\n        .value=\"${this._newTaskName}\"\n        class=\"new-task\"\n        aria-label=${this.strings.newTaskPlaceholder}\n        @input=${(e: KeyboardEvent) => (this._newTaskName = (e.target as HTMLInputElement).value)}>\n      </fluent-text-field>`;\n\n    if (this._groups.length > 0 && !this._newTaskGroupId) {\n      this._newTaskGroupId = this._groups[0].id;\n    }\n\n    const groupOptions = html`\n      ${repeat(\n        this._groups,\n        grp => grp.id,\n        grp => html`<fluent-option value=\"${grp.id}\">${grp.title}</fluent-option>`\n      )}`;\n\n    const group = this._currentGroup\n      ? html`\n          <span class=\"new-task-group\">\n            ${this.renderPlannerIcon(iconColor)}\n            <span>${this.getPlanTitle(this._currentGroup)}</span>\n          </span>`\n      : html`\n            <fluent-select>\n              <span slot=\"start\">${this.renderPlannerIcon(iconColor)}</span>\n              ${this._groups.length > 0 ? groupOptions : html`<fluent-option selected>No groups found</fluent-option>`}\n            </fluent-select>`;\n\n    const folders = this._folders.filter(\n      folder =>\n        (this._currentGroup && folder.parentId === this._currentGroup) ||\n        (!this._currentGroup && folder.parentId === this._newTaskGroupId)\n    );\n    if (folders.length > 0 && !this._newTaskFolderId) {\n      this._newTaskFolderId = folders[0].id;\n    }\n\n    const folderOptions = html`\n      ${repeat(\n        folders,\n        folder => folder.id,\n        folder => html`<fluent-option value=\"${folder.id}\">${folder.name}</fluent-option>`\n      )}`;\n\n    const taskFolder = this._currentFolder\n      ? html`\n          <span class=\"new-task-bucket\">\n            ${this.renderBucketIcon(iconColor)}\n            <span>${this.getFolderName(this._currentFolder)}</span>\n          </span>\n        `\n      : html`\n         <fluent-select>\n          <span slot=\"start\">${this.renderBucketIcon(iconColor)}</span>\n          ${folders.length > 0 ? folderOptions : html`<fluent-option selected>No folders found</fluent-option>`}\n        </fluent-select>`;\n\n    const dateField = { dark: this._isDarkMode, 'new-task': true };\n\n    const taskDue = html`\n      <fluent-text-field\n        autocomplete=\"off\"\n        type=\"date\"\n        class=${classMap(dateField)}\n        aria-label=\"${this.strings.addTaskDate}\"\n        .value=\"${this.dateToInputValue(this._newTaskDueDate)}\"\n        @change=${this.handleDateChange}>\n      </fluent-text-field>`;\n\n    const taskPeople = this.renderAssignedPeople(null);\n\n    const newTaskActionButtons = this._newTaskBeingAdded\n      ? html`<div class=\"task-add-button-container\"></div>`\n      : html`\n          <fluent-button\n            class=\"add-task\"\n            ?disabled=${!this._newTaskName}\n            @click=${this.onAddTaskClick}\n            @keydown=${this.onAddTaskKeyDown}\n            appearance=\"neutral\">\n              ${this.strings.addTaskButtonSubtitle}\n          </fluent-button>\n          <fluent-button\n            class=\"cancel-task\"\n            @click=${() => (this.isNewTaskVisible = false)}\n            @keydown=${this.newTaskVisible}\n            appearance=\"neutral\">\n              ${this.strings.cancelNewTaskSubtitle}\n          </fluent-button>`;\n\n    return html`\n    <div\n      class=${classMap({\n        task: true,\n        'new-task': true\n      })}>\n      <div class=\"task-details-container\">\n        <div class=\"top add-new-task\">\n          <div class=\"check-and-title\">\n            ${taskTitle}\n            <div class=\"task-content\">\n              <div class=\"task-group\">${group}</div>\n              <div class=\"task-bucket\">${taskFolder}</div>\n              ${taskPeople}\n              <div class=\"task-due\">${taskDue}</div>\n            </div>\n          </div>\n          <div class=\"task-options new-task-action-buttons\">${newTaskActionButtons}</div>\n        </div>\n      </div>\n    </div>\n  `;\n  }\n\n  private togglePeoplePicker(task: ITask) {\n    const picker = this.getPeoplePicker(task);\n    const mgtPeople = this.getMgtPeople(task);\n    const flyout = this.getFlyout(task);\n\n    if (picker && mgtPeople && flyout) {\n      if (flyout.isOpen) {\n        flyout.close();\n      } else {\n        picker.selectedPeople = mgtPeople.people;\n        flyout.open();\n        setTimeout(() => picker.focus(), 100);\n      }\n    }\n  }\n\n  private updateAssignedPeople(task: ITask) {\n    const picker = this.getPeoplePicker(task);\n    const mgtPeople = this.getMgtPeople(task);\n\n    if (picker && picker.selectedPeople !== mgtPeople.people) {\n      mgtPeople.people = picker.selectedPeople;\n      void this.assignPeople(task, picker.selectedPeople);\n    }\n  }\n\n  private getPeoplePicker(task: ITask): MgtPeoplePicker {\n    const taskId = task ? task.id : 'new-task';\n    return this.renderRoot.querySelector<MgtPeoplePicker>(`.picker-${taskId}`);\n  }\n\n  private getMgtPeople(task: ITask): MgtPeople {\n    const taskId = task ? task.id : 'new-task';\n    return this.renderRoot.querySelector<MgtPeople>(`.people-${taskId}`);\n  }\n\n  private getFlyout(task: ITask): MgtFlyout {\n    const taskId = task ? task.id : 'new-task';\n    return this.renderRoot.querySelector(`.flyout-${taskId}`);\n  }\n\n  private renderTask(task: ITask) {\n    const { name = 'Task', completed = false, dueDate } = task;\n\n    const groupTitle = this._currentGroup ? null : this.getPlanTitle(task.topParentId);\n    const folderTitle = this._currentFolder ? null : this.getFolderName(task.immediateParentId);\n\n    const context = { task: { ...task._raw, groupTitle, folderTitle } };\n    const taskTemplate = this.renderTemplate('task', context, task.id);\n    if (taskTemplate) {\n      return taskTemplate;\n    }\n\n    let taskDetails = this.renderTemplate('task-details', context, `task-details-${task.id}`);\n\n    if (!taskDetails) {\n      const iconColor = 'var(--neutral-foreground-hint)';\n      const group = this._currentGroup\n        ? null\n        : html`\n              <div class=\"task-group\">\n                <span class=\"task-icon\">${this.renderPlannerIcon(iconColor)}</span>\n                <span class=\"task-icon-text\">${this.getPlanTitle(task.topParentId)}</span>\n              </div>\n            `;\n\n      const folder = this._currentFolder\n        ? null\n        : html`\n            <div class=\"task-bucket\">\n              <span class=\"task-icon\">${this.renderBucketIcon(iconColor)}</span>\n              <span class=\"task-icon-text\">${this.getFolderName(task.immediateParentId)}</span>\n            </div>\n          `;\n\n      const taskDue = !dueDate\n        ? null\n        : html`\n            <div class=\"task-due\">\n              <span class=\"task-icon-text\">${this.strings.due}${getShortDateString(dueDate)}</span>\n            </div>\n          `;\n\n      const taskPeople = this.renderAssignedPeople(task);\n\n      taskDetails = html`${group} ${folder} ${taskPeople} ${taskDue}`;\n    }\n\n    const taskOptions =\n      this.readOnly || this.hideOptions\n        ? null\n        : mgtHtml`\n            <mgt-dot-options\n              class=\"dot-options\"\n              .options=\"${{\n                [this.strings.removeTaskSubtitle]: (e: Event) => this.removeTask(task, e)\n              }}\"\n            ></mgt-dot-options>`;\n\n    const taskClasses = classMap({\n      task: true,\n      complete: completed,\n      incomplete: !completed,\n      'read-only': this.readOnly\n    });\n\n    return html`\n      <div\n        data-id=\"task-${task.id}\"\n        class=${taskClasses}\n        @click=${() => this.handleTaskClick(task)}>\n        <div class=\"task-details-container\">\n          <div class=\"top\">\n            <div class=\"check-and-title\">\n              <fluent-checkbox\n                @click=${(e: MouseEvent) => this.handleTaskCheckClick(e, task)}\n                @keydown=${(e: KeyboardEvent) => this.handleTaskCheckKeyDown(e, task)}\n                ?checked=${completed}>\n                  ${name}\n              </fluent-checkbox>\n            </div>\n            <div class=\"task-options\">${taskOptions}</div>\n          </div>\n          <div class=\"bottom\">${taskDetails}</div>\n        </div>\n      </div>\n    `;\n  }\n\n  private async handleTaskCheckKeyDown(e: KeyboardEvent, task: ITask) {\n    if (e.key === 'Enter') {\n      e.stopPropagation();\n      e.preventDefault();\n      await this.checkTask(task);\n    }\n  }\n\n  private async handleTaskCheckClick(e: MouseEvent, task: ITask) {\n    e.stopPropagation();\n    e.preventDefault();\n    await this.checkTask(task);\n  }\n\n  private async checkTask(task: ITask) {\n    if (!this.readOnly) {\n      const target = this.shadowRoot.querySelector(`[data-id='task-${task.id}'`);\n      if (target) target.classList.add('updating');\n      if (!task.completed) {\n        await this.completeTask(task);\n      } else {\n        await this.uncompleteTask(task);\n      }\n      if (target) target.classList.remove('updating');\n    }\n  }\n\n  private readonly renderPlannerIcon = (iconColor: string) => {\n    return getSvg(SvgIcon.Planner, iconColor);\n  };\n  private readonly renderBucketIcon = (iconColor: string) => {\n    return getSvg(SvgIcon.Milestone, iconColor);\n  };\n\n  private readonly handlePeopleClick = (e: MouseEvent, task: ITask) => {\n    this.togglePeoplePicker(task);\n    e.stopPropagation();\n  };\n\n  private readonly handlePeopleKeydown = (e: KeyboardEvent, task: ITask) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      this.togglePeoplePicker(task);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n\n  private readonly handlePeoplePickerKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.stopPropagation();\n    }\n  };\n\n  private renderAssignedPeople(task: ITask): TemplateResult {\n    let assignedGroupId: string;\n    const taskAssigneeClasses = {\n      'new-task-assignee': task === null,\n      'task-assignee': task !== null,\n      'task-detail': task !== null\n    };\n\n    const taskId = task ? task.id : 'new-task';\n    taskAssigneeClasses[`flyout-${taskId}`] = true;\n\n    const assignedPeople = task ? Object.keys(task.assignments).map(key => key) : [];\n\n    if (!this.newTaskVisible) {\n      const raw: PlannerTask = task?._raw;\n      const planId = raw?.planId;\n      if (planId) {\n        const group = this._groups.filter(grp => grp.id === planId);\n        assignedGroupId = group.pop()?.containerId;\n      }\n    }\n\n    const planGroupId = this.isNewTaskVisible ? this._newTaskContainerId : assignedGroupId;\n\n    const assignedPeopleTemplate: HTMLTemplateResult = mgtHtml`\n      <mgt-people\n        class=\"people people-${taskId}\"\n        .userIds=${assignedPeople}\n        person-card=\"none\"\n        @click=${(e: MouseEvent) => this.handlePeopleClick(e, task)}\n        @keydown=${(e: KeyboardEvent) => this.handlePeopleKeydown(e, task)}\n      >\n        <template data-type=\"no-data\">\n          <fluent-button>\n            <span style=\"display:flex;place-content:start;gap:4px;padding-inline-start:4px\">\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\" class=\"svg\" fill=\"currentColor\">\n                <path d=\"M9 2a4 4 0 100 8 4 4 0 000-8zM6 6a3 3 0 116 0 3 3 0 01-6 0z\"></path>\n                <path d=\"M4 11a2 2 0 00-2 2c0 1.7.83 2.97 2.13 3.8A9.14 9.14 0 009 18c.41 0 .82-.02 1.21-.06A5.5 5.5 0 019.6 17 12 12 0 019 17a8.16 8.16 0 01-4.33-1.05A3.36 3.36 0 013 13a1 1 0 011-1h5.6c.18-.36.4-.7.66-1H4z\"></path>\n                <path d=\"M14.5 19a4.5 4.5 0 100-9 4.5 4.5 0 000 9zm0-7c.28 0 .5.22.5.5V14h1.5a.5.5 0 010 1H15v1.5a.5.5 0 01-1 0V15h-1.5a.5.5 0 010-1H14v-1.5c0-.28.22-.5.5-.5z\"></path>\n              </svg> Assign</span>\n            </fluent-button>\n        </template>\n      </mgt-people>`;\n\n    const picker = mgtHtml`\n      <mgt-people-picker\n        class=\"people-picker picker-${taskId}\"\n        .groupId=${ifDefined(planGroupId)}\n        @keydown=${this.handlePeoplePickerKeydown}>\n      ></mgt-people-picker>`;\n\n    return mgtHtml`\n      <mgt-flyout\n        light-dismiss\n        class=${classMap(taskAssigneeClasses)}\n        @closed=${() => this.updateAssignedPeople(task)}\n      >\n        <div slot=\"anchor\">${assignedPeopleTemplate}</div>\n        <div slot=\"flyout\" part=\"picker\" class=\"picker\">${picker}</div>\n      </mgt-flyout>\n    `;\n  }\n\n  private handleTaskClick(task: ITask) {\n    if (task) {\n      this.fireCustomEvent('taskClick', task);\n    }\n  }\n\n  private renderLoadingTask() {\n    return html`\n      <div class=\"header\">\n        <div class=\"title\">\n          <fluent-skeleton shimmer class=\"shimmer\" shape=\"rect\"></fluent-skeleton>\n        </div>\n        <div class=\"new-task-button\">\n          <fluent-skeleton shimmer class=\"shimmer\" shape=\"rect\"></fluent-skeleton>\n        </div>\n      </div>\n      <div class=\"tasks\">\n        <div class=\"task incomplete\">\n          <div class=\"task-details-container\">\n            <div class=\"top\">\n              <div class=\"check-and-title shimmer\">\n                <fluent-skeleton shimmer class=\"checkbox\" shape=\"circle\"></fluent-skeleton>\n                <fluent-skeleton shimmer class=\"title\" shape=\"rect\"></fluent-skeleton>\n              </div>\n              <div class=\"task-options\">\n                <fluent-skeleton shimmer class=\"options\" shape=\"rect\"></fluent-skeleton>\n              </div>\n            </div>\n            <div class=\"bottom\">\n              <div class=\"task-group\">\n                <div class=\"task-icon\">\n                  <fluent-skeleton shimmer class=\"shimmer icon\" shape=\"rect\"></fluent-skeleton>\n                </div>\n                <div class=\"task-icon-text\">\n                  <fluent-skeleton shimmer class=\"shimmer text\" shape=\"rect\"></fluent-skeleton>\n                </div>\n              </div>\n              <div class=\"task-bucket\">\n                <div class=\"task-icon\">\n                  <fluent-skeleton shimmer class=\"shimmer icon\" shape=\"rect\"></fluent-skeleton>\n                </div>\n                <div class=\"task-icon-text\">\n                  <fluent-skeleton shimmer class=\"shimmer text\" shape=\"rect\"></fluent-skeleton>\n                </div>\n              </div>\n              <div class=\"task-details shimmer\">\n                <fluent-skeleton shimmer class=\"shimmer icon\" shape=\"circle\"></fluent-skeleton>\n                <fluent-skeleton shimmer class=\"shimmer icon\" shape=\"circle\"></fluent-skeleton>\n                <fluent-skeleton shimmer class=\"shimmer icon\" shape=\"circle\"></fluent-skeleton>\n              </div>\n              <div class=\"task-due\">\n                <div class=\"task-icon-text\">\n                  <fluent-skeleton shimmer class=\"shimmer text\" shape=\"rect\"></fluent-skeleton>\n                </div>\n              </div>\n              </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private getTaskSource(): ITaskSource | null {\n    const p = Providers.globalProvider;\n    if (!p || p.state !== ProviderState.SignedIn) {\n      return null;\n    }\n\n    const graph = p.graph.forComponent(this);\n    return new PlannerTaskSource(graph);\n  }\n\n  private getPlanTitle(planId: string): string {\n    if (!planId) {\n      return this.strings.baseSelfAssigned;\n    } else if (planId === this.strings.plansSelfAssigned) {\n      return this.strings.plansSelfAssigned;\n    } else {\n      return (\n        this._groups.find(plan => plan.id === planId) || {\n          title: this.strings.planNotFound\n        }\n      ).title;\n    }\n  }\n\n  private getFolderName(bucketId: string): string {\n    if (!bucketId) {\n      return this.strings.bucketsSelfAssigned;\n    }\n    return (\n      this._folders.find(buck => buck.id === bucketId) || {\n        name: this.strings.bucketNotFound\n      }\n    ).name;\n  }\n\n  private isTaskInSelectedGroupFilter(task: ITask) {\n    return (\n      !this._currentGroup ||\n      task.topParentId === this._currentGroup ||\n      (!this._currentGroup && this.getTaskSource().isAssignedToMe(task, this._me?.id))\n    );\n  }\n\n  private isTaskInSelectedFolderFilter(task: ITask) {\n    return task.immediateParentId === this._currentFolder || !this._currentFolder;\n  }\n\n  private dateToInputValue(date: Date) {\n    if (date) {\n      return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n    }\n\n    return null;\n  }\n}\n\nexport { ITask };\n"]}