{"version":3,"file":"GraphHelpers.tests.js","sourceRoot":"src/","sources":["utils/GraphHelpers.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/* eslint-disable @typescript-eslint/no-unused-expressions */\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { expect } from '@open-wc/testing';\nimport { fake } from 'sinon';\nimport { AuthenticationHandlerOptions, Middleware } from '@microsoft/microsoft-graph-client';\nimport { MockProvider } from '../mock/MockProvider';\nimport { Providers } from '../providers/Providers';\nimport { chainMiddleware } from './chainMiddleware';\nimport { prepScopes } from './prepScopes';\nimport { validateBaseURL } from './validateBaseURL';\n\ndescribe('GraphHelpers - prepScopes', () => {\n  it('should return an empty array when incremental consent is disabled', async () => {\n    const scopes = ['scope1', 'scope2'];\n    Providers.globalProvider = new MockProvider(true);\n    Providers.globalProvider.isIncrementalConsentDisabled = true;\n    // eql for loose equality\n    await expect(prepScopes(scopes)).to.eql([]);\n  });\n  it('should return an array of AuthenticationHandlerOptions when incremental consent is enabled with only the first scope in the list', async () => {\n    const scopes = ['scope1', 'scope2'];\n    Providers.globalProvider = new MockProvider(true);\n    Providers.globalProvider.isIncrementalConsentDisabled = false;\n    await expect(prepScopes(scopes)).to.eql([new AuthenticationHandlerOptions(undefined, { scopes: ['scope1'] })]);\n  });\n});\n\ndescribe('GraphHelpers - chainMiddleware', () => {\n  it('should return the first middleware when only one is passed', async () => {\n    const middleware: Middleware[] = [{ execute: fake(), setNext: fake() }];\n    const result = chainMiddleware(...middleware);\n    await expect(result).to.equal(middleware[0]);\n  });\n\n  it('should return undefined when the middleware array is empty', () => {\n    const middleware: Middleware[] = [];\n    const result = chainMiddleware(...middleware);\n    expect(result).to.be.undefined;\n  });\n  it('should now throw when the middleware array is undefined', () => {\n    let error: string;\n    try {\n      const result = chainMiddleware(undefined);\n      expect(result).to.be.undefined;\n    } catch (e) {\n      error = 'thrown and caught';\n    }\n    expect(error).to.be.undefined;\n  });\n});\n\ndescribe('GraphHelpers - validateBaseUrl', () => {\n  it('should return as a valid Url', async () => {\n    const validUrls = [\n      'https://graph.microsoft.com',\n      'https://graph.microsoft.us',\n      'https://dod-graph.microsoft.us',\n      'https://graph.microsoft.de',\n      'https://microsoftgraph.chinacloudapi.cn'\n    ];\n    for (const url of validUrls) {\n      await expect(validateBaseURL(url)).to.equal(url);\n    }\n  });\n  it('should return undefeined for invalid Url', () => {\n    const validUrls = ['https://graph.microsoft.net', 'https://random.us', 'https://nope.cn'];\n    for (const url of validUrls) {\n      expect(validateBaseURL(url)).to.be.undefined;\n    }\n  });\n\n  it('should return undefined for when supplied a %p which is not a well formed url', () => {\n    const testValues = ['not a url', 'graph.microsoft.com'];\n    for (const test of testValues) {\n      expect(validateBaseURL(test)).to.be.undefined;\n    }\n  });\n});\n"]}