{"version":3,"file":"mgt-person-card.graph.js","sourceRoot":"src/","sources":["components/mgt-person-card/mgt-person-card.graph.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { BatchResponse, CacheItem, CacheService, CacheStore, IBatch, IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { Chat, ChatMessage, Person } from '@microsoft/microsoft-graph-types';\nimport { Profile } from '@microsoft/microsoft-graph-types-beta';\n\nimport { getEmailFromGraphEntity } from '../../graph/graph.people';\nimport { IDynamicPerson } from '../../graph/types';\nimport { MgtPersonCardState } from './mgt-person-card.types';\nimport { MgtPersonCardConfig } from './MgtPersonCardConfig';\nimport { validUserByIdScopes } from '../../graph/graph.user';\nimport { validInsightScopes } from '../../graph/graph.files';\nimport { schemas } from '../../graph/cacheStores';\n\nconst userProperties =\n  'businessPhones,companyName,department,displayName,givenName,jobTitle,mail,mobilePhone,officeLocation,preferredLanguage,surname,userPrincipalName,id,accountEnabled';\n\nconst batchKeys = {\n  directReports: 'directReports',\n  files: 'files',\n  messages: 'messages',\n  people: 'people',\n  person: 'person'\n};\n\ninterface CacheCardState extends MgtPersonCardState, CacheItem {}\n\nexport const getCardStateInvalidationTime = (): number =>\n  CacheService.config.users.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Get data to populate the person card\n *\n * @export\n * @param {IGraph} graph\n * @param {IDynamicPerson} personDetails\n * @param {boolean} isMe\n * @param {MgtPersonCardConfig} config\n * @return {*}  {Promise<MgtPersonCardState>}\n */\nexport const getPersonCardGraphData = async (\n  graph: IGraph,\n  personDetails: IDynamicPerson,\n  isMe: boolean\n): Promise<MgtPersonCardState> => {\n  const userId: string = personDetails?.id || (personDetails as Person)?.userPrincipalName;\n  const email = getEmailFromGraphEntity(personDetails);\n  const cache: CacheStore<CacheCardState> = CacheService.getCache<CacheCardState>(\n    schemas.users,\n    schemas.users.stores.cardState\n  );\n  const cardState = await cache.getValue(userId);\n\n  if (cardState && getCardStateInvalidationTime() > Date.now() - cardState.timeCached) {\n    return cardState;\n  }\n\n  const isContactOrGroup =\n    'classification' in personDetails ||\n    ('personType' in personDetails &&\n      (personDetails.personType.subclass === 'PersonalContact' || personDetails.personType.class === 'Group'));\n\n  const batch = graph.createBatch();\n\n  if (!isContactOrGroup) {\n    if (MgtPersonCardConfig.sections.organization) {\n      buildOrgStructureRequest(batch, userId);\n\n      if (MgtPersonCardConfig.sections.organization.showWorksWith) {\n        buildWorksWithRequest(batch, userId);\n      }\n    }\n  }\n\n  if (MgtPersonCardConfig.sections.mailMessages && email) {\n    buildMessagesWithUserRequest(batch, email);\n  }\n\n  if (MgtPersonCardConfig.sections.files) {\n    buildFilesRequest(batch, isMe ? null : email);\n  }\n\n  let response: Map<string, BatchResponse>;\n  const data: MgtPersonCardState = {}; // TODO\n  try {\n    response = await batch.executeAll();\n  } catch {\n    // nop\n  }\n\n  if (response) {\n    for (const [key, value] of response) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      data[key] = value.content?.value || value.content;\n    }\n  }\n\n  if (!isContactOrGroup && MgtPersonCardConfig.sections.profile) {\n    try {\n      const profile = await getProfile(graph, userId);\n      if (profile) {\n        data.profile = profile;\n      }\n    } catch {\n      // nop\n    }\n  }\n\n  // filter out disabled users from direct reports.\n  if (data.directReports && data.directReports.length > 0) {\n    data.directReports = data.directReports.filter(report => report.accountEnabled);\n  }\n\n  await cache.putValue(userId, data);\n\n  return data;\n};\n\nconst buildOrgStructureRequest = (batch: IBatch, userId: string) => {\n  const expandManagers = `manager($levels=max;$select=${userProperties})`;\n\n  batch.get(\n    batchKeys.person,\n    `users/${userId}?$expand=${expandManagers}&$select=${userProperties}&$count=true`,\n    validUserByIdScopes,\n    {\n      ConsistencyLevel: 'eventual'\n    }\n  );\n\n  batch.get(batchKeys.directReports, `users/${userId}/directReports?$select=${userProperties}`);\n};\n\nconst validPeopleScopes = ['People.Read.All'];\nconst buildWorksWithRequest = (batch: IBatch, userId: string) => {\n  batch.get(batchKeys.people, `users/${userId}/people?$filter=personType/class eq 'Person'`, validPeopleScopes);\n};\nconst validMailSearchScopes = ['Mail.ReadBasic', 'Mail.Read', 'Mail.ReadWrite'];\nconst buildMessagesWithUserRequest = (batch: IBatch, emailAddress: string) => {\n  batch.get(batchKeys.messages, `me/messages?$search=\"from:${emailAddress}\"`, validMailSearchScopes);\n};\n\nconst buildFilesRequest = (batch: IBatch, emailAddress?: string) => {\n  let request: string;\n\n  if (emailAddress) {\n    request = `me/insights/shared?$filter=lastshared/sharedby/address eq '${emailAddress}'`;\n  } else {\n    request = 'me/insights/used';\n  }\n\n  batch.get(batchKeys.files, request, validInsightScopes);\n};\n\nconst validProfileScopes = ['User.Read.All', 'User.ReadWrite.All'];\n/**\n * Get the profile for a user\n *\n * @param {IGraph} graph\n * @param {string} userId\n * @return {*}  {Promise<Profile>}\n */\nconst getProfile = async (graph: IGraph, userId: string): Promise<Profile> =>\n  (await graph\n    .api(`/users/${userId}/profile`)\n    .version('beta')\n    .middlewareOptions(prepScopes(validProfileScopes))\n    .get()) as Profile;\n\nconst validCreateChatScopes = ['Chat.Create', 'Chat.ReadWrite'];\n\n/**\n * Initiate a chat to a user\n *\n * @export\n * @param {IGraph} graph\n * @param {{ chatType: string; members: [{\"@odata.type\": string,\"roles\": [\"owner\"],\"user@odata.bind\": string},{\"@odata.type\": string,\"roles\": [\"owner\"],\"user@odata.bind\": string}]  }} chatData\n * @return {*}  {Promise<Chat>}\n */\nexport const createChat = async (graph: IGraph, person: string, user: string): Promise<Chat> => {\n  const chatData = {\n    chatType: 'oneOnOne',\n    members: [\n      {\n        '@odata.type': '#microsoft.graph.aadUserConversationMember',\n        roles: ['owner'],\n        'user@odata.bind': `https://graph.microsoft.com/v1.0/users('${user}')`\n      },\n      {\n        '@odata.type': '#microsoft.graph.aadUserConversationMember',\n        roles: ['owner'],\n        'user@odata.bind': `https://graph.microsoft.com/v1.0/users('${person}')`\n      }\n    ]\n  };\n  return (await graph\n    .api('/chats')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes(validCreateChatScopes))\n    .post(chatData)) as Chat;\n};\n\nconst validSendChatMessageScopes = ['ChatMessage.Send', 'Chat.ReadWrite'];\n\n/**\n * Send a chat message to a user\n *\n * @export\n * @param {IGraph} graph\n * @param {{ body: {\"content\": string}  }} messageData\n * @return {*}  {Promise<ChatMessage>}\n */\nexport const sendMessage = async (\n  graph: IGraph,\n  chatId: string,\n  messageData: Pick<ChatMessage, 'body'>\n): Promise<ChatMessage> =>\n  (await graph\n    .api(`/chats/${chatId}/messages`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes(validSendChatMessageScopes))\n    .post(messageData)) as ChatMessage;\n"]}