{"version":3,"file":"mgt-teams-channel-picker.graph.js","sourceRoot":"src/","sources":["components/mgt-teams-channel-picker/mgt-teams-channel-picker.graph.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, CacheService, CacheStore, prepScopes } from '@microsoft/mgt-element';\nimport { Team, Channel } from '@microsoft/microsoft-graph-types';\nimport {\n  getPhotoForResource,\n  CachePhoto,\n  getPhotoInvalidationTime,\n  getIsPhotosCacheEnabled\n} from '../../graph/graph.photos';\nimport { schemas } from '../../graph/cacheStores';\nimport { CollectionResponse } from '@microsoft/mgt-element';\nimport { DropdownItem } from './teams-channel-picker-types';\n\nconst teamReadScopes = [\n  'Team.ReadBasic.All',\n  'TeamSettings.Read.All',\n  'TeamSettings.ReadWrite.All',\n  'User.Read.All',\n  'User.ReadWrite.All'\n];\n\nconst channelReadScopes = ['Channel.ReadBasic.All', 'ChannelSettings.Read.All', 'ChannelSettings.ReadWrite.All'];\n\nconst teamPhotoReadScopes = ['Team.ReadBasic.All', 'TeamSettings.Read.All', 'TeamSettings.ReadWrite.All'];\n\n/**\n * async promise, returns all Teams associated with the user logged in\n *\n * @returns {Promise<Team[]>}\n * @memberof Graph\n */\nexport const getAllMyTeams = async (graph: IGraph): Promise<Team[]> => {\n  const scopes = teamReadScopes;\n  const teams = (await graph\n    .api('/me/joinedTeams')\n    .select(['displayName', 'id', 'isArchived'])\n    .middlewareOptions(prepScopes(scopes))\n    .get()) as CollectionResponse<Team>;\n\n  return teams?.value;\n};\n\n/** An object collection of cached photos. */\ntype CachePhotos = Record<string, CachePhoto>;\n\n/**\n * Load the photos for a give set of teamIds\n *\n * @param graph {IGraph}\n * @param teamIds {string[]}\n * @returns {Promise<CachePhotos>}\n */\nexport const getTeamsPhotosForPhotoIds = async (graph: IGraph, teamIds: string[]): Promise<CachePhotos> => {\n  let cache: CacheStore<CachePhoto>;\n  let photos: CachePhotos = {};\n\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.teams);\n    for (const id of teamIds) {\n      try {\n        const photoDetail = await cache.getValue(id);\n        if (photoDetail && getPhotoInvalidationTime() > Date.now() - photoDetail.timeCached) {\n          photos[id] = photoDetail;\n        }\n      } catch (_) {\n        // no-op\n      }\n    }\n    if (Object.keys(photos).length) {\n      return photos;\n    }\n  }\n\n  photos = {};\n\n  for (const id of teamIds) {\n    try {\n      const photoDetail = await getPhotoForResource(graph, `/teams/${id}`, teamPhotoReadScopes);\n      if (getIsPhotosCacheEnabled() && photoDetail) {\n        await cache.putValue(id, photoDetail);\n      }\n      photos[id] = photoDetail;\n    } catch (_) {\n      // no-op\n    }\n  }\n\n  return photos;\n};\n\n/**\n * Creates an array of DropdownItems from an array of Teams populated with channels and photos\n *\n * @param graph {IGraph}\n * @param teams {Team[]} the teams to get channels for\n * @returns {Promise<DropdownItem[]>} a promise that resolves to an array of DropdownItems\n */\nexport const getChannelsForTeams = async (graph: IGraph, teams: Team[]): Promise<DropdownItem[]> => {\n  const batch = graph.createBatch<CollectionResponse<Channel>>();\n\n  for (const team of teams) {\n    batch.get(team.id, `teams/${team.id}/channels`, channelReadScopes);\n  }\n\n  const responses = await batch.executeAll();\n  const result: DropdownItem[] = [];\n  for (const team of teams) {\n    const channelsForTeam = responses.get(team.id);\n    // skip over any teams that don't have channels\n    if (!channelsForTeam?.content?.value?.length) continue;\n    result.push({\n      item: team,\n      channels: channelsForTeam.content.value.map(c => ({ item: c }))\n    });\n  }\n  return result;\n};\n"]}