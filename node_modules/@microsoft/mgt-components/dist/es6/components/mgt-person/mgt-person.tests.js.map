{"version":3,"file":"mgt-person.tests.js","sourceRoot":"src/","sources":["components/mgt-person/mgt-person.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { fixture, html, expect, oneEvent } from '@open-wc/testing';\nimport { LocalizationHelper, MockProvider, Providers } from '@microsoft/mgt-element';\nimport { registerMgtPersonComponent } from './mgt-person';\n\ndescribe('mgt-person - tests', () => {\n  registerMgtPersonComponent();\n  Providers.globalProvider = new MockProvider(true);\n  it('should render', async () => {\n    const person = await fixture(html`<mgt-person person-query=\"me\" view=\"twolines\"></mgt-person>`);\n    // @ts-expect-error TS2554 expects 3 arguments got 2 https://github.com/open-wc/open-wc/issues/2746\n    await oneEvent(person, 'person-image-rendered');\n    await expect(person).shadowDom.to.equal(\n      `<div class=\" person-root twolines \" dir=\"ltr\">\n        <div class=\"avatar-wrapper\">\n          <img alt=\"Photo for Megan Bowen\" src=\"\">\n        </div>\n        <div class=\" details-wrapper \">\n              <div class=\"line1\" part=\"detail-line\" role=\"presentation\" aria-label=\"Megan Bowen\">Megan Bowen</div>\n              <div class=\"line2\" part=\"detail-line\" role=\"presentation\" aria-label=\"Auditor\">Auditor</div>\n        </div>\n      </div>`,\n      { ignoreAttributes: ['src'] }\n    );\n    await expect(person).shadowDom.to.be.accessible();\n  });\n\n  it('should pop up a flyout on click', async () => {\n    const person = await fixture(html`<mgt-person person-query=\"me\" view=\"twolines\" person-card=\"click\"></mgt-person>`);\n    // @ts-expect-error TS2554 expects 3 arguments got 2 https://github.com/open-wc/open-wc/issues/2746\n    await oneEvent(person, 'person-image-rendered');\n    await expect(person).shadowDom.to.equal(\n      `<div class=\" person-root twolines \" dir=\"ltr\"tabindex=\"0\">\n        <mgt-flyout\n          class=\"flyout\"\n          light-dismiss=\"\"\n        >\n          <div slot=\"anchor\" class=\" twolines \">\n            <div class=\"avatar-wrapper\">\n              <img alt=\"Photo for Megan Bowen\">\n            </div>\n            <div class=\"details-wrapper\">\n              <div\n                aria-label=\"Megan Bowen\"\n                class=\"line1\"\n                part=\"detail-line\"\n                role=\"presentation\"\n              >\n                Megan Bowen\n              </div>\n              <div\n                aria-label=\"Auditor\"\n                class=\"line2\"\n                part=\"detail-line\"\n                role=\"presentation\"\n              >\n                Auditor\n              </div>\n            </div>\n        </mgt-flyout>\n      </div>`,\n      { ignoreAttributes: ['src'] }\n    );\n    person.shadowRoot.querySelector('img').click();\n    // need to use wait until here because of the dynamic import of the person card\n    // this can be flaky due to the dynamic import and timing variance\n    // @ts-expect-error TS2554 expects 3 arguments got 2 https://github.com/open-wc/open-wc/issues/2746\n    await oneEvent(person, 'flyout-content-rendered');\n    const flyout = person.shadowRoot.querySelector('div[data-testid=\"flyout-slot\"]');\n    await expect(flyout).dom.to.be.equal(`\n      <div slot=\"flyout\" data-testid=\"flyout-slot\">\n        <mgt-person-card class=\"mgt-person-card\" lock-tab-navigation=\"\">\n        </mgt-person-card>\n      </div>`);\n  });\n\n  it('should render with initials when given name and surname are supplied', async () => {\n    const person = await fixture(\n      html`<mgt-person person-details='${JSON.stringify({\n        displayName: 'Frank Herbert',\n        mail: 'herbert@dune.net',\n        givenName: 'Brian',\n        surname: 'Herbert',\n        personType: {}\n      })}' view=\"twolines\"></mgt-person>`\n    );\n    await expect(person.shadowRoot.querySelector('span.initials')).lightDom.to.equal('BH');\n  });\n\n  it('should render with initials when given name and surname are null', async () => {\n    Providers.globalProvider = new MockProvider(true);\n    const person = await fixture(html`\n      <mgt-person person-details='${JSON.stringify({\n        displayName: 'Frank Herbert',\n        mail: 'herbert@dune.net',\n        givenName: null,\n        surname: null,\n        personType: {}\n      })}' view=\"twolines\"></mgt-person>`);\n    await expect(person.shadowRoot.querySelector('span.initials')).lightDom.to.equal('FH');\n  });\n\n  it('should render with first initial when only given name is supplied', async () => {\n    const person = await fixture(html`\n      <mgt-person person-details='${JSON.stringify({\n        displayName: 'Frank Herbert',\n        mail: 'herbert@dune.net',\n        givenName: 'Frank',\n        surname: null,\n        personType: {}\n      })}' view=\"twolines\"></mgt-person>`);\n    await expect(person.shadowRoot.querySelector('span.initials')).lightDom.to.equal('F');\n  });\n\n  it('should render with first initial when only given name is populated and surname is an empty string', async () => {\n    const person = await fixture(html`\n      <mgt-person person-details='${JSON.stringify({\n        displayName: 'Frank Herbert',\n        mail: 'herbert@dune.net',\n        givenName: 'Frank',\n        surname: '',\n        personType: {}\n      })}' view=\"twolines\"></mgt-person>`);\n    await expect(person.shadowRoot.querySelector('span.initials')).lightDom.to.equal('F');\n  });\n\n  it('should render with last initial when only surname is supplied', async () => {\n    const person = await fixture(html`\n      <mgt-person person-details='${JSON.stringify({\n        displayName: 'Frank Herbert',\n        mail: 'herbert@dune.net',\n        givenName: null,\n        surname: 'Herbert',\n        personType: {}\n      })}' view=\"twolines\"></mgt-person>`);\n    await expect(person.shadowRoot.querySelector('span.initials')).lightDom.to.equal('H');\n  });\n  it('should render with last initial when only surname is populated and given name is an empty string', async () => {\n    const person = await fixture(html`\n      <mgt-person person-details='${JSON.stringify({\n        displayName: 'Frank Herbert',\n        mail: 'herbert@dune.net',\n        givenName: '',\n        surname: 'Herbert',\n        personType: {}\n      })}' view=\"twolines\"></mgt-person>`);\n    await expect(person.shadowRoot.querySelector('span.initials')).lightDom.to.equal('H');\n  });\n\n  it('should render with one initial when only displayName of one word is supplied', async () => {\n    const person = await fixture(html`\n      <mgt-person person-details='${JSON.stringify({\n        displayName: 'Frank',\n        mail: 'herbert@dune.net',\n        givenName: null,\n        surname: null,\n        personType: {}\n      })}' view=\"twolines\"></mgt-person>`);\n    await expect(person.shadowRoot.querySelector('span.initials')).lightDom.to.equal('F');\n  });\n\n  it('should render with two initial when only displayName of more than two words is supplied', async () => {\n    const person = await fixture(html`\n      <mgt-person person-details='${JSON.stringify({\n        displayName: 'Frank van Herbert',\n        mail: 'herbert@dune.net',\n        givenName: null,\n        surname: null,\n        personType: {}\n      })}' view=\"twolines\"></mgt-person>`);\n    await expect(person.shadowRoot.querySelector('span.initials')).lightDom.to.equal('FV');\n  });\n});\n\ndescribe('mgt-person - localization', () => {\n  registerMgtPersonComponent();\n  Providers.globalProvider = new MockProvider(true);\n\n  afterEach(() => {\n    LocalizationHelper.strings = {\n      _components: {}\n    };\n  });\n  it('should render with updated photo for text', async () => {\n    LocalizationHelper.strings = {\n      _components: {\n        person: {\n          photoFor: 'test value'\n        }\n      }\n    };\n    const person = await fixture(html`<mgt-person person-query=\"me\" view=\"twolines\"></mgt-person>`);\n    // @ts-expect-error TS2554 expects 3 arguments got 2 https://github.com/open-wc/open-wc/issues/2746\n    await oneEvent(person, 'person-image-rendered');\n    await expect(person).shadowDom.to.equal(\n      `<div class=\" person-root twolines \" dir=\"ltr\">\n        <div class=\"avatar-wrapper\">\n          <img alt=\"test value Megan Bowen\" src=\"\">\n        </div>\n        <div class=\" details-wrapper \">\n              <div class=\"line1\" part=\"detail-line\" role=\"presentation\" aria-label=\"Megan Bowen\">Megan Bowen</div>\n              <div class=\"line2\" part=\"detail-line\" role=\"presentation\" aria-label=\"Auditor\">Auditor</div>\n        </div>\n      </div>`,\n      { ignoreAttributes: ['src'] }\n    );\n  });\n  it('should render with updated email address text', async () => {\n    LocalizationHelper.strings = {\n      _components: {\n        person: {\n          emailAddress: 'test value'\n        }\n      }\n    };\n    const person = await fixture(\n      html`<mgt-person person-details='${JSON.stringify({\n        mail: 'herbert@dune.net',\n        personType: {}\n      })}' view=\"image\"></mgt-person>`\n    );\n    // await oneEvent(person, 'person-icon-rendered');\n    await expect(person).shadowDom.to.equal(\n      `<div class=\"noline person-root small\" dir=\"ltr\">\n        <div class=\"avatar-wrapper\">\n          <span\n            class=\"contact-icon\"\n            title=\"test value herbert@dune.net\"\n          >\n            <i></i>\n          </span>\n        </div>\n      </div>`,\n      { ignoreAttributes: ['src'] }\n    );\n  });\n});\n"]}