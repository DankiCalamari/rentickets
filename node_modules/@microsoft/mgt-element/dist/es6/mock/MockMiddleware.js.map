{"version":3,"file":"MockMiddleware.js","sourceRoot":"src/","sources":["mock/MockMiddleware.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAGH,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAEvE;;;;;;GAMG;AACH,MAAM,OAAO,cAAc;IAUjB,MAAM,KAAK,aAAa;QAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACvD,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;QACnC,CAAC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEY,OAAO,CAAC,OAAgB;;YACnC,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;gBAClD,OAAO,CAAC,OAAO,GAAG,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,OAAiB,CAAC,CAAC;YAC5E,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,eAAe;YACjB,CAAC;YACD,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;KAAA;IACD;;;;;OAKG;IACI,OAAO,CAAC,IAAgB;QAC7B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAO,UAAU;;;YAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACnB,MAAM,eAAe,GAAG,MAAA,IAAI,CAAC,aAAa,0CAAE,OAAO,CAAC,aAAa,CAAC,CAAC;gBACnE,IAAI,eAAe,EAAE,CAAC;oBACpB,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC;gBAClC,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC;wBACH,2DAA2D;wBAC3D,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,6DAA6D,CAAC,CAAC;wBAC5F,MAAM,IAAI,GAAY,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;wBAC5C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;4BAC7B,cAAc,CAAC,kBAAkB,EAAE,CAAC;wBACtC,CAAC;6BAAM,CAAC;4BACN,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,OAAO,CAAC;wBACjC,CAAC;oBACH,CAAC;oBAAC,WAAM,CAAC;wBACP,8BAA8B;wBAC9B,cAAc,CAAC,kBAAkB,EAAE,CAAC;oBACtC,CAAC;oBACD,MAAA,IAAI,CAAC,aAAa,0CAAE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5D,CAAC;YACH,CAAC;YAED,OAAO,IAAI,CAAC,QAAQ,CAAC;;KACtB;IAEO,MAAM,CAAC,kBAAkB;QAC/B,IAAI,CAAC,QAAQ,GAAG,qDAAqD,CAAC;IACxE,CAAC;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Context, Middleware } from '@microsoft/microsoft-graph-client';\nimport { SessionCache, storageAvailable } from '../utils/SessionCache';\n\n/**\n * Implements Middleware for the Mock Client to escape\n * the graph url from the request\n *\n * @class MockMiddleware\n * @implements {Middleware}\n */\nexport class MockMiddleware implements Middleware {\n  /**\n   * @private\n   * A member to hold next middleware in the middleware chain\n   */\n  private _nextMiddleware: Middleware;\n\n  private static _baseUrl: string;\n\n  private static _cache: SessionCache;\n  private static get _sessionCache(): SessionCache {\n    if (!this._cache && storageAvailable('sessionStorage')) {\n      this._cache = new SessionCache();\n    }\n    return this._cache;\n  }\n\n  public async execute(context: Context): Promise<void> {\n    try {\n      const baseUrl = await MockMiddleware.getBaseUrl();\n      context.request = baseUrl + encodeURIComponent(context.request as string);\n    } catch (error) {\n      // ignore error\n    }\n    return await this._nextMiddleware.execute(context);\n  }\n  /**\n   * Handles setting of next middleware\n   *\n   * @param {Middleware} next\n   * @memberof SdkVersionMiddleware\n   */\n  public setNext(next: Middleware): void {\n    this._nextMiddleware = next;\n  }\n\n  /**\n   * Gets the base url for the mock graph, either from the session cache or from the endpoint service\n   *\n   * @static\n   * @return {string} the base url for the mock graph to use.\n   * @memberof MockMiddleware\n   */\n  public static async getBaseUrl() {\n    if (!this._baseUrl) {\n      const sessionEndpoint = this._sessionCache?.getItem('endpointURL');\n      if (sessionEndpoint) {\n        this._baseUrl = sessionEndpoint;\n      } else {\n        try {\n          // get the url we should be using from the endpoint service\n          const response = await fetch('https://cdn.graph.office.net/en-us/graph/api/proxy/endpoint');\n          const base: unknown = await response.json();\n          if (typeof base !== 'string') {\n            MockMiddleware.setBaseFallbackUrl();\n          } else {\n            this._baseUrl = base + '?url=';\n          }\n        } catch {\n          // fallback to hardcoded value\n          MockMiddleware.setBaseFallbackUrl();\n        }\n        this._sessionCache?.setItem('endpointURL', this._baseUrl);\n      }\n    }\n\n    return this._baseUrl;\n  }\n\n  private static setBaseFallbackUrl() {\n    this._baseUrl = 'https://graph.office.net/en-us/graph/api/proxy?url=';\n  }\n}\n"]}