{"version":3,"file":"mgt-taxonomy-picker.js","sourceRoot":"src/","sources":["components/mgt-taxonomy-picker/mgt-taxonomy-picker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport type * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { Position } from '../../graph/types';\nimport { html, PropertyValueMap, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { MgtTemplatedTaskComponent, mgtHtml } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { fluentCombobox, fluentOption } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport '../../styles/style-helper';\nimport { styles } from './mgt-taxonomy-picker-css';\nimport { DataChangedDetail, registerMgtGetComponent } from '../mgt-get/mgt-get';\nimport { registerComponent } from '@microsoft/mgt-element';\nimport { registerMgtSpinnerComponent } from '../sub-components/mgt-spinner/mgt-spinner';\n\nexport const registerMgtTaxonomyPickerComponent = () => {\n  registerFluentComponents(fluentCombobox, fluentOption);\n\n  registerMgtSpinnerComponent();\n  registerMgtGetComponent();\n  registerComponent('taxonomy-picker', MgtTaxonomyPicker);\n};\n\n/**\n * Web component that can query the Microsoft Graph API for Taxonomy\n * and render a dropdown control with terms,\n * allowing selection of a single term based on\n * the specified term set id or a combination of the specified term set id and the specified term id.\n * Uses mgt-get.\n *\n * @fires {CustomEvent<MicrosoftGraph.TermStore.Term>} selectionChanged - Fired when an option is clicked/selected\n * @export\n * @class MgtTaxonomyPicker\n * @extends {MgtTemplatedTaskComponent}\n *\n * @cssprop --taxonomy-picker-background-color - {Color} Picker component background color\n * @cssprop --taxonomy-picker-list-max-height - {String} max height for options list. Default value is 380px.\n * @cssprop --taxonomy-picker-placeholder-color - {Color} Text color for the placeholder in the picker\n * @cssprop --taxonomy-picker-placeholder-hover-color - {Color} Text color for the placeholder in the picker on hover\n */\nexport class MgtTaxonomyPicker extends MgtTemplatedTaskComponent {\n  /**\n   * The strings to be used for localizing the component.\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtTaxonomyPicker\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * The termsetId of the term set whose children to get.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'term-set-id',\n    type: String\n  })\n  public termsetId: string;\n\n  /**\n   * The termId of the term whose children to get. This term must be a child of the term set specified by termsetId.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'term-id',\n    type: String\n  })\n  public termId: string;\n\n  /**\n   * The id of the site where the termset is located. If not specified, the termset is assumed to be at the tenant level.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'site-id',\n    type: String\n  })\n  public siteId: string;\n\n  /**\n   * The locale based on which the term names should be returned.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'locale',\n    type: String\n  })\n  public locale: string;\n\n  /**\n   * Api version to use for request.\n   * Default is beta.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'beta';\n\n  /**\n   * A placeholder for the picker.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'placeholder',\n    type: String\n  })\n  public placeholder: string;\n\n  /**\n   * The position of the dropdown. Can be 'above' or 'below'.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'position',\n    type: String,\n    converter: (value: Position): Position => {\n      if (value === 'above') {\n        return 'above';\n      }\n      return 'below';\n    }\n  })\n  public position: Position = 'below';\n\n  /**\n   * The default selected term id.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'default-selected-term-id',\n    type: String\n  })\n  public defaultSelectedTermId: string;\n\n  /**\n   * The selected term.\n   *\n   * @type {MicrosoftGraph.TermStore.Term}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'selected-term',\n    type: Object\n  })\n  public selectedTerm: MicrosoftGraph.TermStore.Term | null = null;\n\n  /**\n   * Determines whether component should be disabled or not\n   *\n   * @type {boolean}\n   * @memberof MgtPeoplePicker\n   */\n  @property({\n    attribute: 'disabled',\n    type: Boolean\n  })\n  public disabled: boolean;\n\n  /**\n   * Enables cache on the response from the specified resource.\n   * Default is false.\n   *\n   * @type {boolean}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'cache-enabled',\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds.\n   *\n   * @type {number}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  @state() private terms: MicrosoftGraph.TermStore.Term[];\n  @state() private noTerms: boolean;\n  // @state() private error: object;\n\n  constructor() {\n    super();\n    this.placeholder = this.strings.comboboxPlaceholder;\n    this.noTerms = false;\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtTaxonomyPicker\n   */\n  public refresh(hardRefresh = false) {\n    if (hardRefresh) {\n      this.clearState();\n    }\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtTaxonomyPicker\n   */\n  protected clearState(): void {\n    this.terms = null;\n    this.error = null;\n    this.noTerms = false;\n  }\n  /**\n   * Renders loading spinner while terms are fetched from the Graph\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderLoading = () => {\n    if (!this.terms) {\n      return (\n        this.renderTemplate('loading', null, 'loading') ||\n        mgtHtml`\n        <div class=\"message-parent\">\n          <mgt-spinner></mgt-spinner>\n          <div label=\"loading-text\" aria-label=\"loading\">\n            ${this.strings.loadingMessage}\n          </div>\n        </div>\n      `\n      );\n    }\n    return this.renderContent();\n  };\n\n  /**\n   * Invoked on each update to perform rendering the picker. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  public renderContent = () => {\n    // if error state, render error template\n    if (this.error) {\n      return this.renderError();\n    }\n\n    // if no terms are found, render no-data template\n    if (this.noTerms) {\n      return this.renderNoData();\n    }\n\n    // if terms are found, render picker else render get\n    return this.terms?.length > 0 ? this.renderTaxonomyPicker() : this.renderGet();\n  };\n\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderError = (): TemplateResult =>\n    this.renderTemplate('error', null, 'error') || html`<span>${this.error}</span>`;\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html`<span>${this.strings.noTermsFound}</span>`;\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderTaxonomyPicker(): TemplateResult {\n    return mgtHtml`\n      <fluent-combobox class=\"taxonomy-picker\" autocomplete=\"both\" placeholder=${this.placeholder} position=${\n        this.position\n      } ?disabled=${this.disabled}>\n        ${this.terms.map(term => this.renderTaxonomyPickerItem(term))}\n      </fluent-combobox>\n     `;\n  }\n\n  /**\n   * Render picker item.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderTaxonomyPickerItem(term: MicrosoftGraph.TermStore.Term): TemplateResult {\n    const selected: boolean = this.defaultSelectedTermId && this.defaultSelectedTermId === term.id;\n\n    return html`\n        <fluent-option value=${term.id} ?selected=${selected} @click=${(e: MouseEvent) => this.handleClick(e, term)}> ${\n          this.renderTemplate('term', { term }, term.id) || term.labels[0].name\n        } </fluent-option>\n        `;\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderGet(): TemplateResult {\n    // if termsetId is not specified, return error message\n    if (!this.termsetId) {\n      return html`<span>${this.strings.termsetIdRequired}</span>`;\n    }\n\n    let resource = `/termStore/sets/${this.termsetId}/children`;\n\n    // if both termsetId and termId are specified, then set resource to /termStore/sets/{termsetId}/terms/{termId}/children\n    if (this.termId) {\n      resource = `/termStore/sets/${this.termsetId}/terms/${this.termId}/children`;\n    }\n\n    // if siteId is specified, then prefix /sites/{siteId}/ to the resource\n    if (this.siteId) {\n      resource = `/sites/${this.siteId}${resource}`;\n    }\n\n    // Add properties to select to the resource\n    resource += '?$select=id,labels,descriptions,properties';\n\n    return mgtHtml`\n      <mgt-get\n        class=\"mgt-get\"\n        resource=${resource}\n        version=${this.version}\n        scopes=\"TermStore.Read.All, TermStore.ReadWrite.All\"\n        ?cache-enabled=${this.cacheEnabled}\n        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>\n      </mgt-get>`;\n  }\n\n  protected firstUpdated(changedProperties: PropertyValueMap<unknown> | Map<PropertyKey, unknown>): void {\n    super.firstUpdated(changedProperties);\n    const parent = this.renderRoot;\n    parent.addEventListener('dataChange', (e: CustomEvent<DataChangedDetail>): void => this.handleDataChange(e));\n  }\n\n  private handleDataChange(e: CustomEvent<DataChangedDetail>): void {\n    const error = e.detail.error ? e.detail.error : null;\n\n    if (error) {\n      this.error = error;\n      return;\n    }\n\n    // if locale is specified, then convert it to lower case\n    if (this.locale) {\n      this.locale = this.locale.toLowerCase();\n    }\n\n    const response = e.detail.response.value;\n\n    // if response is not null and has values, if locale is specified, then\n    // get the label in response that has languageTag equal to locale and make it the first label and append the rest of the labels\n\n    const terms = response.map((item: MicrosoftGraph.TermStore.Term) => {\n      const labels = item.labels;\n      if (labels && labels.length > 0) {\n        if (this.locale) {\n          const label = labels.find(l => l.languageTag.toLowerCase() === this.locale);\n          if (label) {\n            item.labels = [label, ...labels.filter(l => l.languageTag.toLowerCase() !== this.locale)];\n          }\n        }\n      }\n      return item;\n    });\n\n    this.terms = terms;\n\n    //  if there are no terms then set noTerms to true\n    if (terms.length === 0) {\n      this.noTerms = true;\n    }\n  }\n\n  private handleClick(e: MouseEvent, item: MicrosoftGraph.TermStore.Term) {\n    this.selectedTerm = item;\n    this.fireCustomEvent('selectionChanged', item);\n  }\n}\n"]}