/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { fluentMenu, fluentMenuItem, fluentButton } from '@fluentui/web-components';
import { MgtBaseTaskComponent } from '@microsoft/mgt-element';
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { strings } from './strings';
import { registerFluentComponents } from '../../../utils/FluentComponents';
import { styles } from './mgt-dot-options-css';
import { registerComponent } from '@microsoft/mgt-element';
import { SvgIcon, getSvg } from '../../../utils/SvgHelper';
export const registerMgtDotOptionsComponent = () => {
    registerFluentComponents(fluentMenu, fluentMenuItem, fluentButton);
    registerComponent('dot-options', MgtDotOptions);
};
/**
 * Custom Component used to handle an arrow rendering for TaskGroups utilized in the task component.
 *
 * @export MgtDotOptions
 * @class MgtDotOptions
 * @extends {MgtBaseComponent}
 *
 * @cssprop --dot-options-menu-background-color - {Color} The color of the background of the menu.
 * @cssprop --dot-options-menu-shadow-color - {Color} The color of the shadow of the menu.
 * @cssprop --dot-options-menu-item-color - {Color} The color of the menu items.
 * @cssprop --dot-options-menu-item-hover-background-color - {Color} The color of the menu items when hovered.
 */
export class MgtDotOptions extends MgtBaseTaskComponent {
    constructor() {
        super(...arguments);
        this._clickHandler = () => (this.open = false);
        /**
         * Invoked from the base class render method when the _task is in a completed state.
         */
        this.renderContent = () => {
            const menuOptions = Object.keys(this.options);
            return html `
      <fluent-button
        appearance="stealth"
        aria-label=${this.strings.dotOptionsTitle}
        aria-expanded=${this.open}
        @click=${this.onDotClick}
        @keydown=${this.onDotKeydown}
        class="dot-icon">${getSvg(SvgIcon.Dot)}</fluent-button>
      <fluent-menu class=${classMap({ menu: true, open: this.open })} aria-expanded=${this.open} aria-label=${this.strings.dotOptionsTitle}>
        ${menuOptions.map(opt => this.getMenuOption(opt, this.options[opt]))}
      </fluent-menu>`;
        };
        this.handleItemClick = (e, fn) => {
            e.preventDefault();
            e.stopPropagation();
            fn(e);
            this.open = false;
        };
        this.handleItemKeydown = (e, fn) => {
            this.handleKeydownMenuOption(e);
            fn(e);
            this.open = false;
        };
        this.onDotClick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.open = !this.open;
        };
        this.onDotKeydown = (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                e.stopPropagation();
                this.open = !this.open;
            }
        };
    }
    /**
     * Array of styles to apply to the element. The styles should be defined
     * user the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    /**
     * Strings for localization
     *
     * @readonly
     * @protected
     * @memberof MgtDotOptions
     */
    get strings() {
        return strings;
    }
    connectedCallback() {
        super.connectedCallback();
        window.addEventListener('click', this._clickHandler);
    }
    disconnectedCallback() {
        window.removeEventListener('click', this._clickHandler);
        super.disconnectedCallback();
    }
    /**
     * Used by the render method to attach click handler to each dot item
     *
     * @param {string} name
     * @param {MenuOptionEventFunction} clickFn
     * @returns
     * @memberof MgtDotOptions
     */
    getMenuOption(name, clickFn) {
        return html `
      <fluent-menu-item
        @click=${(e) => this.handleItemClick(e, clickFn)}
        @keydown=${(e) => this.handleItemKeydown(e, clickFn)}>
          ${name}
      </fluent-menu-item>`;
    }
    handleKeydownMenuOption(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            e.stopPropagation();
        }
    }
}
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Boolean)
], MgtDotOptions.prototype, "open", void 0);
__decorate([
    property({ type: Object }),
    __metadata("design:type", Object)
], MgtDotOptions.prototype, "options", void 0);
//# sourceMappingURL=mgt-dot-options.js.map