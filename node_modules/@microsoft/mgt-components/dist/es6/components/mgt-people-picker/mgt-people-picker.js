/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { html } from 'lit';
import { property, state } from 'lit/decorators.js';
import { repeat } from 'lit/directives/repeat.js';
import { TaskStatus } from '@lit/task';
import { findGroups, getGroupsForGroupIds, getGroup, findGroupsFromGroupIds, isGroupType, groupTypeConverter } from '../../graph/graph.groups';
import { findPeople, getPeople, personTypeConverter, userTypeConverter } from '../../graph/graph.people';
import { findUsers, findGroupMembers, findUsersFromGroupIds, getUser, getUsersForUserIds, getUsers } from '../../graph/graph.user';
import { Providers, ProviderState, MgtTemplatedTaskComponent, arraysAreEqual, mgtHtml } from '@microsoft/mgt-element';
import '../../styles/style-helper';
import { debounce, isValidEmail } from '../../utils/Utils';
import { MgtPerson, defaultPersonProperties, registerMgtPersonComponent } from '../mgt-person/mgt-person';
import { registerMgtFlyoutComponent } from '../sub-components/mgt-flyout/mgt-flyout';
import { styles } from './mgt-people-picker-css';
import { SvgIcon, getSvg } from '../../utils/SvgHelper';
import { fluentTextField, fluentCard } from '@fluentui/web-components';
import { registerFluentComponents } from '../../utils/FluentComponents';
import { strings } from './strings';
import { registerComponent } from '@microsoft/mgt-element';
import { registerMgtSpinnerComponent } from '../sub-components/mgt-spinner/mgt-spinner';
import { isGraphError } from '../../graph/isGraphError';
import { personCardConverter } from './../PersonCardInteraction';
export const registerMgtPeoplePickerComponent = () => {
    registerFluentComponents(fluentTextField, fluentCard);
    registerMgtFlyoutComponent();
    registerMgtPersonComponent();
    registerMgtSpinnerComponent();
    registerComponent('people-picker', MgtPeoplePicker);
};
/**
 * Web component used to search for people from the Microsoft Graph
 *
 * @export
 * @class MgtPicker
 * @extends {MgtTemplatedTaskComponent}
 *
 * @fires {CustomEvent<IDynamicPerson[]>} selectionChanged - Fired when set of selected people changes
 *
 * @cssprop --people-picker-selected-option-background-color - {Color} the background color of the selected person.
 * @cssprop --people-picker-selected-option-highlight-background-color - {Color} the background color of the selected person when you select it for copy/cut.
 * @cssprop --people-picker-dropdown-background-color - {Color} the background color of the dropdown card.
 * @cssprop --people-picker-dropdown-result-background-color - {Color} the background color of the dropdown result.
 * @cssprop --people-picker-dropdown-result-hover-background-color - {Color} the background color of the dropdown result on hover.
 * @cssprop --people-picker-dropdown-result-focus-background-color - {Color} the background color of the dropdown result on focus.
 * @cssprop --people-picker-no-results-text-color - {Color} the no results found text color.
 * @cssprop --people-picker-input-background - {Color} the input background color.
 * @cssprop --people-picker-input-border-color - {Color} the input border color.
 * @cssprop --people-picker-input-hover-background - {Color} the input background color when you hover.
 * @cssprop --people-picker-input-hover-border-color - {Color} the input border color when you hover
 * @cssprop --people-picker-input-focus-background - {Color} the input background color when you focus.
 * @cssprop --people-picker-input-focus-border-color - {Color} the input border color when you focus.
 * @cssprop --people-picker-input-placeholder-focus-text-color - {Color} the placeholder text color when you focus.
 * @cssprop --people-picker-input-placeholder-hover-text-color - {Color} the placeholder text color when you hover.
 * @cssprop --people-picker-input-placeholder-text-color - {Color} the placeholder text color.
 * @cssprop --people-picker-search-icon-color - {Color} the search icon color
 * @cssprop --people-picker-remove-selected-close-icon-color - {Color} the remove selected person close icon color.
 * @cssprop --people-picker-result-person-avatar-size - {Length} the avatar size of the person in the result. Default is 40px.
 * @cssprop --people-picker-selected-person-avatar-size - {Length} the avatar size of the selected person. Default is 24px.
 * @cssprop --people-picker-font-size - {Length} the font size of the text in the people picker input. Default is 14px.
 */
export class MgtPeoplePicker extends MgtTemplatedTaskComponent {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * user the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    /**
     * The strings to be used for localizing the component.
     *
     * @readonly
     * @protected
     * @memberof MgtPeoplePicker
     */
    get strings() {
        return strings;
    }
    /**
     * Gets the flyout element
     *
     * @protected
     * @type {MgtFlyout}
     * @memberof MgtLogin
     */
    get flyout() {
        return this.renderRoot.querySelector('.flyout');
    }
    /**
     * Gets the input element
     *
     * @protected
     * @type {MgtFlyout}
     * @memberof MgtLogin
     */
    get input() {
        return this.renderRoot.querySelector('fluent-text-field');
    }
    /**
     * array of user picked people.
     *
     * @type {IDynamicPerson[]}
     */
    get selectedPeople() {
        return this._selectedPeople;
    }
    set selectedPeople(value) {
        if (!value)
            value = [];
        if (!arraysAreEqual(this._selectedPeople, value)) {
            this._selectedPeople = value;
            this.fireCustomEvent('selectionChanged', this._selectedPeople);
        }
    }
    /**
     * Get the scopes required for people picker
     *
     * @static
     * @return {*}  {string[]}
     * @memberof MgtPeoplePicker
     */
    static get requiredScopes() {
        return [
            ...new Set([
                'user.read.all',
                'people.read',
                'group.read.all',
                'user.readbasic.all',
                'contacts.read',
                ...MgtPerson.requiredScopes
            ])
        ];
    }
    constructor() {
        super();
        /**
         * array of groups for search to be filtered by.
         *
         * @type {string[]}
         */
        this.groupIds = [];
        /**
         * Value determining if search is filtered to a group.
         * Valid options are 'any', 'person', 'group'
         *
         * @type {PersonType}
         */
        this.type = 'any';
        /**
         * Type of groups to search for - requires personType to be set to "Group" or "All"
         * Valid values are 'any', 'unified', 'security', 'mailenabledsecurity', 'distribution'
         * Default is ['any'].
         *
         * @type {GroupType}
         */
        this.groupType = ['any'];
        /**
         * The type of user to search for.
         * Valid options are 'any', 'user', 'contact'
         * Default is any.
         *
         * @type {UserType}
         * @memberof MgtPeoplePicker
         */
        this.userType = 'any';
        /**
         * whether the return should contain a flat list of all nested members
         *
         * @type {boolean}
         */
        this.transitiveSearch = false;
        /**
         * containing object of IDynamicPerson.
         *
         * @type {IDynamicPerson[]}
         */
        this.people = null;
        /**
         * determining how many people to show in list.
         *
         * @type {number}
         */
        this.showMax = 6;
        /**
         * Sets whether the person image should be fetched
         * from the Microsoft Graph
         *
         * @type {boolean}
         * @memberof MgtPerson
         */
        this.disableImages = false;
        /**
         * Sets how the person-card is invoked
         * Set to PersonCardInteraction.none to not show the card
         *
         * @type {PersonCardInteraction}
         * @memberof MgtPerson
         */
        this.personCardInteraction = 'none';
        /**
         * array of people to be selected upon initialization
         *
         * @type {string[]}
         * @memberof MgtPeoplePicker
         */
        this.defaultSelectedUserIds = [];
        /**
         * array of groups to be selected upon initialization
         *
         * @type {string[]}
         * @memberof MgtPeoplePicker
         */
        this.defaultSelectedGroupIds = [];
        /**
         * Determines whether component should be disabled or not
         *
         * @type {boolean}
         * @memberof MgtPeoplePicker
         */
        this.disabled = false;
        /**
         * Determines if a user can enter an email without selecting a person
         *
         * @type {boolean}
         * @memberof MgtPeoplePicker
         */
        this.allowAnyEmail = false;
        /**
         * Array of the only users to be searched.
         *
         * @type {string[]}
         * @memberof MgtPeoplePicker
         */
        this.userIds = [];
        /**
         * Sets whether the people suggestions should apper on the suggestion list
         *
         * @type {boolean}
         * @memberof MgtPerson
         */
        this.disableSuggestions = false;
        /**
         * User input in search.
         *
         * @protected
         * @type {string}
         * @memberof MgtPeoplePicker
         */
        this.userInput = '';
        this._selectedPeople = [];
        // tracking of user arrow key input for selection
        this._arrowSelectionCount = -1;
        this.defaultSelectedUsers = [];
        this.defaultSelectedGroups = [];
        // List of users highlighted for copy/cut-pasting
        this._highlightedUsers = [];
        // current user index to the left of the highlighted users
        this._currentHighlightedUserPos = 0;
        /**
         * Checks if the input is focused.
         */
        this._isFocused = false;
        /**
         * Switch to determine if a typed email can be set.
         */
        this._setAnyEmail = false;
        /**
         * Clears the disabled property on the people picker when used in single mode.
         */
        this.handleSelectionChanged = () => {
            if (this.selectedPeople.length === 0 && !this.disabled) {
                this.enableTextInput();
            }
        };
        /**
         * Render the loading state.
         *
         * @protected
         * @returns
         * @memberof MgtPeoplePicker
         */
        this.renderLoading = () => {
            return (this.renderTemplate('loading', null) ||
                mgtHtml `
         <div class="message-parent">
           <mgt-spinner></mgt-spinner>
           <div aria-label="${this.strings.loadingMessage}" aria-live="polite" role="alert" class="loading-text">
             ${this.strings.loadingMessage}
           </div>
         </div>
       `);
        };
        // handle input click
        this.handleInputClick = () => {
            if (!this.flyout.isOpen) {
                this.handleUserSearch();
            }
        };
        // handle input focus
        this.gainedFocus = () => {
            this.clearHighlighted();
            this._isFocused = true;
            void this.loadState();
            this.showFlyout();
        };
        // handle input blur
        this.lostFocus = () => {
            this._isFocused = false;
            if (this.input) {
                this.input.setAttribute('aria-activedescendant', '');
            }
            const peopleList = this.renderRoot.querySelector('.people-list');
            if (peopleList) {
                for (const el of peopleList.children) {
                    el.classList.remove('focused');
                    el.setAttribute('aria-selected', 'false');
                }
            }
            this.requestUpdate();
        };
        /**
         * Handles input from the key up events on the keyboard.
         */
        this.onUserKeyUp = (event) => {
            const keyName = event.key;
            const isCmdOrCtrlKey = event.getModifierState('Control') || event.getModifierState('Meta');
            const isPaste = isCmdOrCtrlKey && keyName === 'v';
            const isArrowKey = ['ArrowDown', 'ArrowRight', 'ArrowUp', 'ArrowLeft'].includes(keyName);
            if ((!isPaste && isCmdOrCtrlKey) || isArrowKey) {
                if (isCmdOrCtrlKey || ['ArrowLeft', 'ArrowRight'].includes(keyName)) {
                    // Only hide the flyout when you're doing selections with Left/Right Arrow key
                    this.hideFlyout();
                }
                if (keyName === 'ArrowDown') {
                    if (!this.flyout.isOpen && this._isFocused) {
                        this.handleUserSearch();
                    }
                }
                return;
            }
            if (['Tab', 'Enter', 'Shift'].includes(keyName))
                return;
            if (keyName === 'Escape') {
                this.clearInput();
                this._foundPeople = [];
                this._arrowSelectionCount = -1;
                return;
            }
            if (keyName === 'Backspace' && this.userInput.length === 0 && this.selectedPeople.length > 0) {
                this.clearHighlighted();
                // remove last person in selected list
                this.selectedPeople = this.selectedPeople.splice(0, this.selectedPeople.length - 1);
                void this.loadState();
                this.hideFlyout();
                return;
            }
            if ([';', ','].includes(keyName)) {
                if (this.allowAnyEmail) {
                    this._setAnyEmail = true;
                    event.preventDefault();
                    event.stopPropagation();
                }
                return;
            }
        };
        this.onUserInput = (event) => {
            const input = event.target;
            this.userInput = input.value;
            if (this.userInput) {
                const validEmail = isValidEmail(this.userInput);
                if (validEmail && this.allowAnyEmail) {
                    if (this._setAnyEmail) {
                        this.handleAnyEmail();
                    }
                }
                else {
                    this.handleUserSearch();
                }
                this._setAnyEmail = false;
            }
            else {
                this._foundPeople = [];
            }
        };
        /**
         * Tracks event on user search (keydown)
         *
         * @param event - event tracked on user input (keydown)
         */
        this.onUserKeyDown = (event) => {
            event.stopPropagation();
            const keyName = event.key;
            const selectedList = this.renderRoot.querySelector('.selected-list');
            const isCmdOrCtrlKey = event.getModifierState('Control') || event.getModifierState('Meta');
            if (isCmdOrCtrlKey && selectedList) {
                const selectedPeople = selectedList.querySelectorAll('mgt-person.person-image-selected');
                this.hideFlyout();
                if (isCmdOrCtrlKey && keyName === 'ArrowLeft') {
                    this._currentHighlightedUserPos =
                        (this._currentHighlightedUserPos - 1 + selectedPeople.length) % selectedPeople.length;
                    if (this._currentHighlightedUserPos >= 0 && !Number.isNaN(this._currentHighlightedUserPos)) {
                        this._highlightedUsers.push(selectedPeople[this._currentHighlightedUserPos]);
                    }
                    else {
                        this._currentHighlightedUserPos = 0;
                    }
                }
                else if (isCmdOrCtrlKey && keyName === 'ArrowRight') {
                    const person = this._highlightedUsers.pop();
                    if (person) {
                        const personParent = person.parentElement;
                        if (personParent) {
                            this.clearHighlighted(personParent);
                            this._currentHighlightedUserPos++;
                        }
                    }
                }
                else if (isCmdOrCtrlKey && keyName === 'a') {
                    this._highlightedUsers = [];
                    selectedPeople.forEach(person => this._highlightedUsers.push(person));
                }
                if (this._highlightedUsers) {
                    this.highlightSelectedPeople(this._highlightedUsers);
                }
                return;
            }
            this.clearHighlighted();
            if (!this.flyout.isOpen) {
                return;
            }
            if (keyName === 'ArrowUp' || keyName === 'ArrowDown') {
                this.handleArrowSelection(event);
                event.preventDefault();
            }
            if (keyName === 'Enter') {
                if (!event.shiftKey && this._foundPeople) {
                    event.preventDefault();
                    const foundPerson = this._foundPeople[this._arrowSelectionCount];
                    if (foundPerson) {
                        this.addPerson(foundPerson);
                        this.hideFlyout();
                        this.input.value = '';
                        if (this.hasMaxSelections) {
                            this.disableTextInput();
                        }
                        return;
                    }
                }
                if (this.allowAnyEmail) {
                    this.handleAnyEmail();
                }
                else {
                    this.showFlyout();
                }
            }
            if ([';', ',', 'Tab'].includes(keyName)) {
                if (this.allowAnyEmail) {
                    // need to ensure the tab key does tab things
                    if ('Tab' !== keyName)
                        event.preventDefault();
                    this.userInput = this.input.value;
                    this.handleAnyEmail();
                }
            }
            // need to ensure that the tab key hides the flyout even if the input doesn't have an email address
            if (keyName === 'Tab') {
                this.hideFlyout();
            }
        };
        /**
         * Handles the cut event when it is fired
         */
        this.handleCut = () => {
            this.writeHighlightedText().then(() => {
                this.removeHighlightedOnCut();
            }, () => {
                // intentionally left blank
            });
        };
        /**
         * Handles the copy event when it is fired
         */
        this.handleCopy = () => {
            void this.writeHighlightedText();
        };
        /**
         * Parses the copied people text and adds them when you paste
         */
        this.handlePaste = () => {
            navigator.clipboard.readText().then(copiedText => {
                if (copiedText) {
                    try {
                        const people = JSON.parse(copiedText);
                        if (people && people.length > 0) {
                            for (const person of people) {
                                this.addPerson(person);
                            }
                        }
                    }
                    catch (error) {
                        if (error instanceof SyntaxError) {
                            const delimiters = [',', ';'];
                            let listOfUsers;
                            try {
                                for (const delimiter of delimiters) {
                                    listOfUsers = copiedText.split(delimiter);
                                    if (listOfUsers.length > 1) {
                                        this.hideFlyout();
                                        void this.selectUsersById(listOfUsers);
                                        break;
                                    }
                                }
                                // eslint-disable-next-line no-empty
                            }
                            catch (_) { }
                        }
                    }
                }
            }, 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            error => {
                // 'navigator.clipboard.readText is not a function' error is thrown in Mozilla
                // more information here https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#browser_compatibility
                // Firefox only supports reading the clipboard in browser extensions,
                // using the "clipboardRead" extension permission.
            });
        };
        this.addEventListener('copy', this.handleCopy);
        this.addEventListener('cut', this.handleCut);
        this.addEventListener('paste', this.handlePaste);
        this.addEventListener('selectionChanged', this.handleSelectionChanged);
    }
    /**
     * Disable the inner input of the fluent-text-field.
     */
    disableTextInput() {
        const inputControl = this.input.shadowRoot.querySelector('input');
        if (inputControl) {
            inputControl.setAttribute('disabled', 'true');
            inputControl.value = '';
        }
    }
    /**
     * Enable the inner input of the fluent-text-field.
     */
    enableTextInput() {
        const inputControl = this.input.shadowRoot.querySelector('input');
        if (inputControl) {
            inputControl.removeAttribute('disabled');
            inputControl.focus();
        }
    }
    get hasMaxSelections() {
        return this.selectionMode === 'single' && this.selectedPeople.length >= 1;
    }
    /**
     * Focuses the input element when focus is called
     *
     * @param {FocusOptions} [options]
     * @memberof MgtPeoplePicker
     */
    focus(options) {
        if (!this.input) {
            return;
        }
        this.input.focus(options);
        this.input.select();
    }
    /**
     * Queries the microsoft graph for a user based on the user id and adds them to the selectedPeople array
     *
     * @param {readonly string []} an array of user ids to add to selectedPeople
     * @returns {Promise<void>}
     * @memberof MgtPeoplePicker
     */
    selectUsersById(userIds) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const provider = Providers.globalProvider;
            const graph = Providers.globalProvider.graph;
            if (provider && provider.state === ProviderState.SignedIn) {
                // eslint-disable-next-line guard-for-in, @typescript-eslint/no-for-in-array
                for (const id in userIds) {
                    const userId = userIds[id];
                    try {
                        const personDetails = yield getUser(graph, userId, defaultPersonProperties);
                        this.addPerson(personDetails);
                    }
                    catch (e) {
                        // This caters for allow-any-email property if it's enabled on the component
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
                        if (isGraphError(e) && ((_a = e.message) === null || _a === void 0 ? void 0 : _a.includes('does not exist')) && this.allowAnyEmail) {
                            if (isValidEmail(userId)) {
                                const anyMailUser = {
                                    mail: userId,
                                    displayName: userId
                                };
                                this.addPerson(anyMailUser);
                            }
                        }
                    }
                }
            }
        });
    }
    /**
     * Queries the microsoft graph for a group of users from a group id, and adds them to the selectedPeople
     *
     * @param {readonly string []} an array of group ids to add to selectedPeople
     * @returns {Promise<void>}
     * @memberof MgtPeoplePicker
     */
    selectGroupsById(groupIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = Providers.globalProvider;
            const graph = Providers.globalProvider.graph;
            if (provider && provider.state === ProviderState.SignedIn) {
                // eslint-disable-next-line guard-for-in, @typescript-eslint/no-for-in-array
                for (const id in groupIds) {
                    try {
                        const groupDetails = yield getGroup(graph, groupIds[id]);
                        this.addPerson(groupDetails);
                    }
                    catch (e) {
                        // no-op
                    }
                }
            }
        });
    }
    /**
     * Invoked on each update to perform rendering tasks. This method must return a lit-html TemplateResult.
     * Setting properties inside this method will not trigger the element to update.
     *
     * @returns {TemplateResult}
     * @memberof MgtPeoplePicker
     */
    render() {
        const defaultTemplate = this.renderTemplate('default', { people: this._foundPeople });
        if (defaultTemplate) {
            return defaultTemplate;
        }
        const selectedPeopleTemplate = this.renderSelectedPeople(this.selectedPeople);
        if (this.selectionMode === 'single' && this.selectedPeople.length === 1) {
            return selectedPeopleTemplate;
        }
        else {
            const inputTemplate = this.renderInput(selectedPeopleTemplate);
            const flyoutTemplate = this.renderFlyout(inputTemplate);
            return html `
      <div>
        ${flyoutTemplate}
      </div>
    `;
        }
    }
    args() {
        return [
            this.providerState,
            this.groupId,
            this.groupIds,
            this.type,
            this.groupType,
            this.userType,
            this.transitiveSearch,
            this.people,
            this.showMax,
            this.defaultSelectedUserIds,
            this.defaultSelectedGroupIds,
            this.userIds,
            this.userFilters,
            this.peopleFilters,
            this.groupFilters
        ];
    }
    /**
     * Clears state of the component
     *
     * @protected
     * @memberof MgtPeoplePicker
     */
    clearState() {
        this.selectedPeople = [];
        this.userInput = '';
        this._highlightedUsers = [];
        this._currentHighlightedUserPos = 0;
    }
    /**
     * Render the input text box.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPeoplePicker
     */
    renderInput(selectedPeopleTemplate) {
        var _a, _b, _c;
        const placeholder = this.disabled ? '' : this.placeholder || this.strings.inputPlaceholderText;
        const maxSelectionsAriaLabel = this.hasMaxSelections ? this.strings.maxSelectionsAriaLabel : '';
        const searchIcon = html `<span class="search-icon">${getSvg(SvgIcon.Search)}</span>`;
        const startSlot = ((_a = this.selectedPeople) === null || _a === void 0 ? void 0 : _a.length) > 0 ? selectedPeopleTemplate : searchIcon;
        return html `
      <fluent-text-field
        autocomplete="off"
        appearance="outline"
        slot="anchor"
        id="people-picker-input"
        role="combobox"
        aria-live="assertive"
        aria-atomic="true"
        placeholder=${this.hasMaxSelections ? this.strings.maxSelectionsPlaceHolder : placeholder}
        aria-label=${this.ariaLabel || maxSelectionsAriaLabel || placeholder || this.strings.selectContact}
        aria-expanded=${(_c = (_b = this.flyout) === null || _b === void 0 ? void 0 : _b.isOpen) !== null && _c !== void 0 ? _c : false}
        @click="${this.hasMaxSelections ? undefined : this.handleInputClick}"
        @focus="${this.hasMaxSelections ? undefined : this.gainedFocus}"
        @keydown="${this.hasMaxSelections ? undefined : this.onUserKeyDown}"
        @input="${this.hasMaxSelections ? undefined : this.onUserInput}"
        @blur="${this.lostFocus}"
        ?disabled=${this.disabled}
      >
        <span slot="start">${startSlot}</span>
      </fluent-text-field>
    `;
    }
    /**
     * Render the selected people tokens.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPeoplePicker
     */
    renderSelectedPeople(selectedPeople) {
        if (!(selectedPeople === null || selectedPeople === void 0 ? void 0 : selectedPeople.length)) {
            return html ``;
        }
        return html `
       <ul
        id="selected-list"
        aria-label="${this.strings.selected}"
        class="selected-list">
          ${repeat(selectedPeople, person => person === null || person === void 0 ? void 0 : person.id, person => {
            var _a;
            return html `
            <li class="selected-list-item">
              ${this.renderTemplate('selected-person', { person }, `selected-${(person === null || person === void 0 ? void 0 : person.id) ? person.id : person.displayName}`) || this.renderSelectedPerson(person)}

              <div
                role="button"
                tabindex="0"
                class="selected-list-item-close-icon"
                aria-label="${this.strings.removeSelectedUser}${(_a = person === null || person === void 0 ? void 0 : person.displayName) !== null && _a !== void 0 ? _a : ''}"
                @click="${(e) => this.removePerson(person, e)}"
                @keydown="${(e) => this.handleRemovePersonKeyDown(person, e)}">
                  ${getSvg(SvgIcon.Close)}
              </div>
          </li>`;
        })}
      </ul>`;
    }
    /**
     * Render the flyout chrome.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPeoplePicker
     */
    renderFlyout(anchor) {
        return mgtHtml `
       <mgt-flyout light-dismiss class="flyout">
         ${anchor}
         <fluent-card
          tabindex="0"
          slot="flyout"
          class="flyout-root"
          @wheel=${(e) => this.handleSectionScroll(e)}
          @keydown=${(e) => this.onUserKeyDown(e)}
          class="custom">
           ${this.renderFlyoutContent()}
         </fluent-card>
       </mgt-flyout>
     `;
    }
    /**
     * Render the appropriate state in the results flyout.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPeoplePicker
     */
    renderFlyoutContent() {
        if (this._task.status === TaskStatus.PENDING) {
            return this.renderLoading();
        }
        const people = this._foundPeople;
        if (!people || people.length === 0 || this.showMax === 0) {
            return this.renderNoData();
        }
        else {
            return this.renderSearchResults(people);
        }
    }
    /**
     * Render the state when no results are found for the search query.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPeoplePicker
     */
    renderNoData() {
        if (!this._isFocused) {
            return;
        }
        return (this.renderTemplate('error', null) ||
            this.renderTemplate('no-data', null) ||
            html `
         <div class="message-parent">
           <div aria-label=${this.strings.noResultsFound} aria-live="polite" role="alert" class="search-error-text">
             ${this.strings.noResultsFound}
           </div>
         </div>
       `);
    }
    /**
     * Render the list of search results.
     *
     * @protected
     * @param {IDynamicPerson[]} people
     * @returns
     * @memberof MgtPeoplePicker
     */
    renderSearchResults(people) {
        const filteredPeople = people.filter(person => person.id);
        return html `
      <ul
        id="suggestions-list"
        class="searched-people-list"
        role="listbox"
        aria-live="polite"
        aria-label="${this.strings.suggestionsTitle}"
        title=${this.strings.suggestionsTitle}
      >
        ${repeat(filteredPeople, person => person.id, person => html `
          <li
            id="${person.id}"
            class="searched-people-list-result"
            role="option"
            @click="${() => this.handleSuggestionClick(person)}">
              ${this.renderPersonResult(person)}
          </li>
        `)}
      </ul>
     `;
    }
    /**
     * Render an individual person search result.
     *
     * @protected
     * @param {IDynamicPerson} person
     * @returns {TemplateResult}
     * @memberof MgtPeoplePicker
     */
    renderPersonResult(person) {
        return (this.renderTemplate('person', { person }, person.id) ||
            mgtHtml `
         <mgt-person
          class="person-image-result"
          ?show-presence=${this.showPresence}
          view="twolines"
          line2-property="jobTitle,mail"
          .personDetails=${person}
          ?fetch-image=${!this.disableImages}
          person-card="none"
        ></mgt-person>`);
    }
    /**
     * Render an individual selected person token.
     *
     * @protected
     * @param {IDynamicPerson} person
     * @returns {TemplateResult}
     * @memberof MgtPeoplePicker
     */
    renderSelectedPerson(person) {
        return mgtHtml `
       <mgt-person
         class="person-image-selected"
         .personDetails=${person}
         ?fetch-image=${!this.disableImages}
         view="oneline"
         person-card=${this.personCardInteraction}
        ></mgt-person>
     `;
    }
    /**
     * Async query to Graph for members of group if determined by developer.
     * set's `this.groupPeople` to those members.
     */
    loadState() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this._groupPeople = null;
            this._foundPeople = null;
            this.defaultPeople = null;
            let people = this.people;
            const input = this.userInput.toLowerCase();
            const provider = Providers.globalProvider;
            if (people === null || people === void 0 ? void 0 : people.length) {
                if (input) {
                    const displayNameMatch = people.filter(person => person === null || person === void 0 ? void 0 : person.displayName.toLowerCase().includes(input));
                    people = displayNameMatch;
                }
            }
            else if (!people && provider && provider.state === ProviderState.SignedIn) {
                const graph = provider.graph.forComponent(this);
                if (!input.length) {
                    if ((this.defaultSelectedUserIds.length > 0 || this.defaultSelectedGroupIds.length > 0) &&
                        !this.selectedPeople.length &&
                        !this.defaultSelectedUsers.length &&
                        !this.defaultSelectedGroups.length) {
                        this.defaultSelectedUsers = yield getUsersForUserIds(graph, this.defaultSelectedUserIds, '', this.userFilters);
                        this.defaultSelectedGroups = yield getGroupsForGroupIds(graph, this.defaultSelectedGroupIds, this.peopleFilters);
                        this.defaultSelectedGroups = this.defaultSelectedGroups.filter(group => {
                            return group !== null;
                        });
                        this.defaultSelectedUsers = this.defaultSelectedUsers.filter(user => {
                            return user !== null;
                        });
                        this.selectedPeople = [...this.defaultSelectedUsers, ...this.defaultSelectedGroups];
                        if (this.hasMaxSelections) {
                            this.disableTextInput();
                        }
                        this.requestUpdate();
                    }
                    if (this.disableSuggestions) {
                        this._foundPeople = [];
                        return;
                    }
                    if (this.defaultPeople) {
                        people = this.defaultPeople;
                    }
                    else {
                        if (this.groupId || this.groupIds.length) {
                            if (this._groupPeople === null) {
                                if (this.groupId) {
                                    try {
                                        if (this.type === 'group') {
                                            this._groupPeople = yield findGroupMembers(graph, null, this.groupId, this.showMax, this.type, this.transitiveSearch);
                                        }
                                        else {
                                            this._groupPeople = yield findGroupMembers(graph, null, this.groupId, this.showMax, this.type, this.transitiveSearch, this.userFilters, this.peopleFilters);
                                        }
                                    }
                                    catch (_) {
                                        this._groupPeople = [];
                                    }
                                }
                                else {
                                    if (this.type === 'group') {
                                        try {
                                            this._groupPeople = yield getGroupsForGroupIds(graph, this.groupIds, this.groupFilters);
                                        }
                                        catch (_) {
                                            this._groupPeople = [];
                                        }
                                    }
                                    else {
                                        try {
                                            const peopleInGroups = yield findUsersFromGroupIds(graph, '', this.groupIds, this.showMax, this.type, this.transitiveSearch, this.userFilters);
                                            this._groupPeople = peopleInGroups;
                                        }
                                        catch (_) {
                                            this._groupPeople = [];
                                        }
                                    }
                                }
                            }
                            people = this._groupPeople || [];
                        }
                        else if (this.type === 'person' || this.type === 'any') {
                            if (this.userIds.length) {
                                people = yield getUsersForUserIds(graph, this.userIds, '', this.userFilters);
                            }
                            else {
                                const isUserOrContactType = this.userType === 'user' || this.userType === 'contact';
                                if (this.userFilters && isUserOrContactType) {
                                    people = yield getUsers(graph, this.userFilters, this.showMax);
                                }
                                else {
                                    people = yield getPeople(graph, this.userType, this.peopleFilters, this.showMax);
                                }
                            }
                        }
                        else if (this.type === 'group') {
                            let groups = (yield findGroups(graph, '', this.showMax, this.groupType, this.groupFilters)) || [];
                            // eslint-disable-next-line @typescript-eslint/dot-notation
                            if (groups.length > 0 && groups[0]['value']) {
                                // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-assignment
                                groups = groups[0]['value'];
                            }
                            people = groups;
                        }
                        this.defaultPeople = people;
                    }
                }
                if (input) {
                    people = [];
                    if (this.groupId) {
                        people =
                            (yield findGroupMembers(graph, input, this.groupId, this.showMax, this.type, this.transitiveSearch, this.userFilters, this.peopleFilters)) || [];
                    }
                    else {
                        if (this.type === 'person' || this.type === 'any') {
                            try {
                                // Default UserType === any
                                if (this.userType === 'contact' || this.userType === 'user') {
                                    // we might have a user-filters property set, search for users with it.
                                    if ((_a = this.userIds) === null || _a === void 0 ? void 0 : _a.length) {
                                        // has the user-ids property set
                                        people = yield getUsersForUserIds(graph, this.userIds, input, this.userFilters);
                                    }
                                    else {
                                        people = yield findUsers(graph, input, this.showMax, this.userFilters);
                                    }
                                }
                                else {
                                    if (!this.groupIds.length) {
                                        if ((_b = this.userIds) === null || _b === void 0 ? void 0 : _b.length) {
                                            // has the user-ids property set
                                            people = yield getUsersForUserIds(graph, this.userIds, input, this.userFilters);
                                        }
                                        else {
                                            people = (yield findPeople(graph, input, this.showMax, this.userType, this.peopleFilters)) || [];
                                        }
                                    }
                                    else {
                                        // Does not work when the PersonType = person.
                                        try {
                                            people = yield findUsersFromGroupIds(graph, input, this.groupIds, this.showMax, this.type, this.transitiveSearch, this.userFilters);
                                        }
                                        catch (_) {
                                            // nop
                                        }
                                    }
                                }
                            }
                            catch (e) {
                                // nop
                            }
                            // Don't follow this path if a people-filters attribute is set on the component as the
                            // default type === PersonType.person
                            if (people && people.length < this.showMax && this.userType !== 'contact' && this.type !== 'person') {
                                try {
                                    const users = (yield findUsers(graph, input, this.showMax, this.userFilters)) || [];
                                    // make sure only unique people
                                    const peopleIds = new Set(people.map(p => p.id));
                                    for (const user of users) {
                                        if (!peopleIds.has(user.id)) {
                                            people.push(user);
                                        }
                                    }
                                }
                                catch (e) {
                                    // no-op
                                }
                            }
                        }
                        if ((this.type === 'group' || this.type === 'any') && people.length < this.showMax) {
                            if (this.groupIds.length) {
                                try {
                                    people = yield findGroupsFromGroupIds(graph, input, this.groupIds, this.showMax, this.groupType, this.userFilters);
                                }
                                catch (_) {
                                    // no-op
                                }
                            }
                            else {
                                let groups = [];
                                try {
                                    groups = (yield findGroups(graph, input, this.showMax, this.groupType, this.groupFilters)) || [];
                                    people = people.concat(groups);
                                }
                                catch (e) {
                                    // nop
                                }
                            }
                        }
                    }
                }
            }
            // people = this.getUniquePeople(people);
            this._foundPeople = this.filterPeople(people);
        });
    }
    /**
     * Gets the Groups in a list of group IDs.
     *
     * @param graph the graph object
     * @param people already found groups
     * @returns groups found
     */
    getGroupsForGroupIds(graph, people) {
        return __awaiter(this, void 0, void 0, function* () {
            const groups = yield getGroupsForGroupIds(graph, this.groupIds, this.groupFilters);
            for (const group of groups) {
                people = people.concat(group);
            }
            people = people.filter(person => person);
            return people;
        });
    }
    /**
     * Hide the results flyout.
     *
     * @protected
     * @memberof MgtPeoplePicker
     */
    hideFlyout() {
        const flyout = this.flyout;
        if (flyout) {
            flyout.close();
        }
        if (this.input) {
            this.input.setAttribute('aria-activedescendant', '');
        }
        this._arrowSelectionCount = -1;
    }
    /**
     * Show the results flyout.
     *
     * @protected
     * @memberof MgtPeoplePicker
     */
    showFlyout() {
        const flyout = this.flyout;
        if (flyout) {
            flyout.open();
        }
        this._arrowSelectionCount = -1;
    }
    /**
     * Removes person from selected people
     *
     * @param person - person and details pertaining to user selected
     */
    removePerson(person, e) {
        e.stopPropagation();
        const filteredPersonArr = this.selectedPeople.filter(p => {
            if (!person.id && p.displayName) {
                return p.displayName !== person.displayName;
            }
            return p.id !== person.id;
        });
        this.selectedPeople = filteredPersonArr;
        void this.loadState();
    }
    /**
     * Checks if key pressed is an `Enter` key before removing person
     *
     * @param person
     * @param e
     */
    handleRemovePersonKeyDown(person, e) {
        if (e.key === 'Enter') {
            this.removePerson(person, e);
            this.enableTextInput();
        }
    }
    /**
     * Tracks when user selects person from picker
     *
     * @param person - contains details pertaining to selected user
     * @param event - tracks user event
     */
    addPerson(person) {
        if (person) {
            setTimeout(() => {
                this.clearInput();
            }, 50);
            const duplicatePeople = this.selectedPeople.filter(p => {
                if (!person.id && p.displayName) {
                    return p.displayName === person.displayName;
                }
                return p.id === person.id;
            });
            if (duplicatePeople.length === 0) {
                this.selectedPeople = [...this.selectedPeople, person];
                void this.loadState();
                this._foundPeople = [];
                this._arrowSelectionCount = -1;
            }
            if (this._isFocused) {
                this.enableTextInput();
            }
        }
    }
    clearInput() {
        this.clearHighlighted();
        if (this.selectionMode !== 'single') {
            this.input.value = '';
        }
        this.userInput = '';
    }
    handleAnyEmail() {
        this._arrowSelectionCount = -1;
        if (isValidEmail(this.userInput)) {
            const anyMailUser = {
                mail: this.userInput,
                displayName: this.userInput
            };
            this.addPerson(anyMailUser);
        }
        this.hideFlyout();
        if (this.input) {
            this.input.focus();
            this._isFocused = true;
        }
    }
    // handle suggestion list item click
    handleSuggestionClick(person) {
        this.addPerson(person);
        if (this.hasMaxSelections) {
            this.disableTextInput();
            this.input.value = '';
        }
        this.hideFlyout();
    }
    /**
     * Tracks event on user input in search
     *
     * @param input - input text
     */
    handleUserSearch() {
        if (!this._debouncedSearch) {
            this._debouncedSearch = debounce(() => __awaiter(this, void 0, void 0, function* () {
                yield this._task.run();
                this._arrowSelectionCount = -1;
                this.showFlyout();
            }), 400);
        }
        this._debouncedSearch();
    }
    /**
     * Gets the text of the highlighed people and writes it to the clipboard
     */
    writeHighlightedText() {
        return __awaiter(this, void 0, void 0, function* () {
            const copyText = [];
            for (const element of this._highlightedUsers) {
                // eslint-disable-next-line @typescript-eslint/dot-notation
                const { id, displayName, mail, userPrincipalName, scoredEmailAddresses } = element['_personDetails'];
                let emailAddress;
                if (scoredEmailAddresses && scoredEmailAddresses.length > 0) {
                    emailAddress = scoredEmailAddresses.pop().address;
                }
                else {
                    emailAddress = userPrincipalName || mail;
                }
                copyText.push({ id, displayName, email: emailAddress });
            }
            let copiedTextStr = '';
            if (copyText.length > 0) {
                copiedTextStr = JSON.stringify(copyText);
            }
            yield navigator.clipboard.writeText(copiedTextStr);
        });
    }
    /**
     * Removes only the highlighted elements from the peoplePicker during cut operations.
     */
    removeHighlightedOnCut() {
        this.selectedPeople = this.selectedPeople.splice(0, this.selectedPeople.length - this._highlightedUsers.length);
        this._highlightedUsers = [];
        this._currentHighlightedUserPos = 0;
        void this.loadState();
        this.hideFlyout();
    }
    /**
     * Changes the color class to show which people are selected for copy/cut-paste
     *
     * @param people list of selected people classes
     */
    highlightSelectedPeople(people) {
        for (const person of people) {
            const parentElement = person === null || person === void 0 ? void 0 : person.parentElement;
            parentElement.classList.add('highlighted');
        }
    }
    /**
     * Defaults the people class back to the normal view
     */
    clearHighlighted(node) {
        if (node) {
            node.classList.remove('highlighted');
        }
        else {
            for (const person of this._highlightedUsers) {
                const parentElement = person.parentElement;
                if (parentElement) {
                    parentElement.classList.remove('highlighted');
                }
            }
            this._highlightedUsers = [];
            this._currentHighlightedUserPos = 0;
        }
    }
    /**
     * Tracks user key selection for arrow key selection of people
     *
     * @param event - tracks user key selection
     */
    handleArrowSelection(event) {
        var _a, _b;
        const peopleList = this.renderRoot.querySelector('.searched-people-list');
        if ((_a = peopleList === null || peopleList === void 0 ? void 0 : peopleList.children) === null || _a === void 0 ? void 0 : _a.length) {
            if (event) {
                // update arrow count
                if (event.key === 'ArrowUp') {
                    if (this._arrowSelectionCount === -1) {
                        this._arrowSelectionCount = 0;
                    }
                    else {
                        this._arrowSelectionCount =
                            (this._arrowSelectionCount - 1 + peopleList.children.length) % peopleList.children.length;
                    }
                }
                if (event.key === 'ArrowDown') {
                    if (this._arrowSelectionCount === -1) {
                        this._arrowSelectionCount = 0;
                    }
                    else {
                        this._arrowSelectionCount =
                            (this._arrowSelectionCount + 1 + peopleList.children.length) % peopleList.children.length;
                    }
                }
            }
            for (const person of (_b = peopleList === null || peopleList === void 0 ? void 0 : peopleList.children) !== null && _b !== void 0 ? _b : []) {
                const p = person;
                p.setAttribute('aria-selected', 'false');
                p.blur();
                p.removeAttribute('tabindex');
            }
            // set selected background
            // set aria-selected to true
            const focusedItem = peopleList.children[this._arrowSelectionCount];
            if (focusedItem) {
                focusedItem.setAttribute('tabindex', '0');
                focusedItem.focus();
                focusedItem.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
                focusedItem.setAttribute('aria-selected', 'true');
                this.input.setAttribute('aria-activedescendant', focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.id);
            }
        }
    }
    /**
     * Filters people searched from already selected people
     *
     * @param people - array of people returned from query to Graph
     */
    filterPeople(people) {
        // check if people need to be updated
        // ensuring people list is displayed
        // find ids from selected people
        const uniquePeople = [];
        if (people && people.length > 0) {
            people = people.filter(person => person);
            const idFilter = this.selectedPeople.map(el => {
                return el.id ? el.id : el.displayName;
            });
            // filter id's
            const filtered = people.filter((person) => {
                if (person === null || person === void 0 ? void 0 : person.id) {
                    return idFilter.indexOf(person.id) === -1;
                }
                else {
                    return idFilter.indexOf(person === null || person === void 0 ? void 0 : person.displayName) === -1;
                }
            });
            // remove duplicates
            const dupsSet = new Set();
            for (const d of filtered) {
                const person = JSON.stringify(d);
                dupsSet.add(person);
            }
            dupsSet.forEach((person) => {
                const p = JSON.parse(person);
                uniquePeople.push(p);
            });
        }
        return uniquePeople;
    }
    // stop propagating wheel event to flyout so mouse scrolling works
    handleSectionScroll(e) {
        const target = this.renderRoot.querySelector('.flyout-root');
        if (target) {
            if (!(e.deltaY < 0 && target.scrollTop === 0) &&
                !(e.deltaY > 0 && target.clientHeight + target.scrollTop >= target.scrollHeight - 1)) {
                e.stopPropagation();
            }
        }
    }
}
__decorate([
    property({ attribute: 'group-id', converter: value => value.trim() }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "groupId", void 0);
__decorate([
    property({
        attribute: 'group-ids',
        converter: value => {
            return value.split(',').map(v => v.trim());
        }
    }),
    __metadata("design:type", Array)
], MgtPeoplePicker.prototype, "groupIds", void 0);
__decorate([
    property({
        attribute: 'type',
        converter: value => personTypeConverter(value, 'any')
    }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "type", void 0);
__decorate([
    property({
        attribute: 'group-type',
        converter: value => {
            const defaultResult = ['any'];
            if (!value || value.length === 0) {
                return defaultResult;
            }
            const values = value.split(',');
            const groupTypes = [];
            for (let v of values) {
                v = v.trim();
                if (isGroupType(v)) {
                    groupTypes.push(groupTypeConverter(v));
                }
            }
            if (groupTypes.length === 0) {
                return defaultResult;
            }
            return groupTypes;
        }
    }),
    __metadata("design:type", Array)
], MgtPeoplePicker.prototype, "groupType", void 0);
__decorate([
    property({
        attribute: 'user-type',
        converter: value => userTypeConverter(value)
    }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "userType", void 0);
__decorate([
    property({
        attribute: 'transitive-search',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "transitiveSearch", void 0);
__decorate([
    property({
        attribute: 'people',
        type: Object
    }),
    __metadata("design:type", Array)
], MgtPeoplePicker.prototype, "people", void 0);
__decorate([
    property({
        attribute: 'show-max',
        type: Number
    }),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "showMax", void 0);
__decorate([
    property({
        attribute: 'disable-images',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "disableImages", void 0);
__decorate([
    property({
        attribute: 'show-presence',
        type: Boolean
    }),
    __metadata("design:type", Boolean)
], MgtPeoplePicker.prototype, "showPresence", void 0);
__decorate([
    property({
        attribute: 'person-card',
        converter: value => personCardConverter(value)
    }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "personCardInteraction", void 0);
__decorate([
    property({
        attribute: 'selected-people',
        type: Array
    }),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], MgtPeoplePicker.prototype, "selectedPeople", null);
__decorate([
    property({
        attribute: 'default-selected-user-ids',
        converter: value => {
            return value.split(',').map(v => v.trim());
        },
        type: String
    }),
    __metadata("design:type", Array)
], MgtPeoplePicker.prototype, "defaultSelectedUserIds", void 0);
__decorate([
    property({
        attribute: 'default-selected-group-ids',
        converter: value => {
            return value.split(',').map(v => v.trim());
        },
        type: String
    }),
    __metadata("design:type", Array)
], MgtPeoplePicker.prototype, "defaultSelectedGroupIds", void 0);
__decorate([
    property({
        attribute: 'placeholder',
        type: String
    }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "placeholder", void 0);
__decorate([
    property({
        attribute: 'disabled',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "disabled", void 0);
__decorate([
    property({
        attribute: 'allow-any-email',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "allowAnyEmail", void 0);
__decorate([
    property({
        attribute: 'selection-mode',
        type: String
    }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "selectionMode", void 0);
__decorate([
    property({
        attribute: 'user-ids',
        converter: value => {
            return value.split(',').map(v => v.trim());
        },
        type: String
    }),
    __metadata("design:type", Array)
], MgtPeoplePicker.prototype, "userIds", void 0);
__decorate([
    property({ attribute: 'user-filters' }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "userFilters", void 0);
__decorate([
    property({ attribute: 'people-filters' }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "peopleFilters", void 0);
__decorate([
    property({ attribute: 'group-filters' }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "groupFilters", void 0);
__decorate([
    property({
        attribute: 'aria-label',
        type: String
    }),
    __metadata("design:type", String)
], MgtPeoplePicker.prototype, "ariaLabel", void 0);
__decorate([
    property({
        attribute: 'disable-suggestions',
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "disableSuggestions", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "userInput", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "_arrowSelectionCount", void 0);
__decorate([
    state(),
    __metadata("design:type", Array)
], MgtPeoplePicker.prototype, "_highlightedUsers", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "_isFocused", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], MgtPeoplePicker.prototype, "_setAnyEmail", void 0);
__decorate([
    state(),
    __metadata("design:type", Array)
], MgtPeoplePicker.prototype, "_foundPeople", void 0);
//# sourceMappingURL=mgt-people-picker.js.map