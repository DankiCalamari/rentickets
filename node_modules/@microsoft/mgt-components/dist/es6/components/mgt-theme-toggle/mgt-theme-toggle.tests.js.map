{"version":3,"file":"mgt-theme-toggle.tests.js","sourceRoot":"src/","sources":["components/mgt-theme-toggle/mgt-theme-toggle.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/* eslint-disable @typescript-eslint/no-unused-expressions */\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { registerMgtThemeToggleComponent } from './mgt-theme-toggle';\n\nimport { html, fixture, expect } from '@open-wc/testing';\nimport { sendMouse, emulateMedia } from '@web/test-runner-commands';\nclass Deferred<T = unknown> {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\nconst getMiddleOfElement = (element: Element) => {\n  const { x, y, width, height } = element.getBoundingClientRect();\n\n  return {\n    x: Math.floor(x + window.scrollX + width / 2),\n    y: Math.floor(y + window.scrollY + height / 2)\n  };\n};\n\ndescribe('mgt-theme-toggle - media behavior tests', () => {\n  registerMgtThemeToggleComponent();\n\n  it('should render as checked whe color scheme is dark', async () => {\n    await emulateMedia({ colorScheme: 'dark' });\n    expect(matchMedia('(prefers-color-scheme: dark)').matches).to.be.true;\n    const darkToggle = await fixture('<mgt-theme-toggle></mgt-theme-toggle>');\n    await expect(darkToggle).shadowDom.to.equal(\n      `<fluent-switch\n        aria-checked=\"true\"\n        aria-disabled=\"false\"\n        checked=\"true\"\n        role=\"switch\"\n        tabindex=\"0\"\n      >\n        <span slot=\"checked-message\">Dark</span>\n        <span slot=\"unchecked-message\">Light</span>\n        <label for=\"direction-switch\">Color mode:</label>\n      </fluent-switch>`\n    );\n  });\n  it('should emit darkmodechanged true on inital render when the color scheme is dark', async () => {\n    const deferred = new Deferred<boolean>();\n    const listener = (e: CustomEvent<boolean>) => {\n      deferred.resolve(e.detail);\n    };\n    await emulateMedia({ colorScheme: 'dark' });\n    expect(matchMedia('(prefers-color-scheme: dark)').matches).to.be.true;\n    await fixture(html`<mgt-theme-toggle @darkmodechanged=${listener}></mgt-theme-toggle>`);\n    // darkmodechanged emitted when setting initial value of checked\n    expect(await deferred.promise).to.be.true;\n  });\n\n  it('should render as unchecked when color scheme is light', async () => {\n    await emulateMedia({ colorScheme: 'light' });\n    expect(matchMedia('(prefers-color-scheme: light)').matches).to.be.true;\n    const lightToggle = await fixture('<mgt-theme-toggle></mgt-theme-toggle>');\n    await expect(lightToggle).shadowDom.to.equal(\n      `<fluent-switch\n        aria-checked=\"false\"\n        aria-disabled=\"false\"\n        checked=\"false\"\n        role=\"switch\"\n        tabindex=\"0\"\n      >\n        <span slot=\"checked-message\">Dark</span>\n        <span slot=\"unchecked-message\">Light</span>\n        <label for=\"direction-switch\">Color mode:</label>\n      </fluent-switch>`\n    );\n  });\n});\n\ndescribe('mgt-theme-toggle - tests', () => {\n  beforeEach(() => {\n    registerMgtThemeToggleComponent();\n  });\n  it('should render', async () => {\n    const toggle = await fixture('<mgt-theme-toggle></mgt-theme-toggle>');\n    await expect(toggle).shadowDom.to.equal(\n      `<fluent-switch\n        aria-checked=\"false\"\n        aria-disabled=\"false\"\n        checked=\"false\"\n        role=\"switch\"\n        tabindex=\"0\"\n      >\n        <span slot=\"checked-message\">Dark</span>\n        <span slot=\"unchecked-message\">Light</span>\n        <label for=\"direction-switch\">Color mode:</label>\n      </fluent-switch>`\n    );\n  });\n\n  it(\"should emit darkmodechanged with the current 'checked' state on click\", async () => {\n    let darkModeDeferred = new Deferred<boolean>();\n    const listener = (e: CustomEvent<boolean>) => {\n      darkModeDeferred.resolve(e.detail);\n    };\n\n    const element = await fixture(html`<mgt-theme-toggle @darkmodechanged=${listener}></mgt-theme-toggle>`);\n    const toggle: HTMLInputElement = element.shadowRoot.querySelector('[role=switch]');\n    const { x, y } = getMiddleOfElement(element);\n\n    // darkmodechanged emitted when setting initial value of checked\n    expect(await darkModeDeferred.promise).to.be.false;\n    expect(toggle).attribute('checked', 'false');\n\n    // click to set switch on\n    darkModeDeferred = new Deferred<boolean>();\n    await sendMouse({ type: 'click', position: [x, y] });\n\n    expect(await darkModeDeferred.promise).to.be.true;\n    expect(toggle.checked).to.be.true;\n\n    // click to set switch off\n    darkModeDeferred = new Deferred<boolean>();\n    await sendMouse({ type: 'click', position: [x, y] });\n\n    expect(await darkModeDeferred.promise).to.be.false;\n    expect(toggle.checked).to.be.false;\n  });\n\n  it('should have a checked switch if mode is dark', async () => {\n    const toggle = await fixture('<mgt-theme-toggle mode=\"dark\"></mgt-theme-toggle>');\n    await expect(toggle).shadowDom.to.equal(\n      `<fluent-switch\n        aria-checked=\"true\"\n        aria-disabled=\"false\"\n        checked=\"true\"\n        role=\"switch\"\n        tabindex=\"0\"\n      >\n        <span slot=\"checked-message\">Dark</span>\n        <span slot=\"unchecked-message\">Light</span>\n        <label for=\"direction-switch\">Color mode:</label>\n      </fluent-switch>`\n    );\n    await expect(toggle).shadowDom.to.be.accessible();\n  });\n});\n"]}