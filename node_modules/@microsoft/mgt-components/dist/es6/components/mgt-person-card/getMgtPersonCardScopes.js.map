{"version":3,"file":"getMgtPersonCardScopes.js","sourceRoot":"src/","sources":["components/mgt-person-card/getMgtPersonCardScopes.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D;;;;;;GAMG;AAEH,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAa,EAAE;IACnD,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,IAAI,mBAAmB,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,mBAAmB,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,mBAAmB,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAE7B,IAAI,mBAAmB,CAAC,QAAQ,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC;YAC5D,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,IAAI,mBAAmB,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/B,CAAC;IAED,IAAI,mBAAmB,CAAC,cAAc,EAAE,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/B,CAAC;IAED,IAAI,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC;QACxC,mCAAmC;QACnC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,IAAI,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,CAAC;QAC1C,mCAAmC;QACnC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7B,CAAC;IAED,IAAI,mBAAmB,CAAC,oBAAoB,EAAE,CAAC;QAC7C,gGAAgG;QAChG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAChC,CAAC;IAED,gBAAgB;IAChB,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { MgtPersonCardConfig } from './MgtPersonCardConfig';\n\n/**\n * Scopes used to fetch data for the mgt-person-card component\n *\n * @static\n * @return {*}  {string[]}\n * @memberof MgtPersonCard\n */\n\nexport const getMgtPersonCardScopes = (): string[] => {\n  const scopes: string[] = [];\n\n  if (MgtPersonCardConfig.sections.files) {\n    scopes.push('Sites.Read.All');\n  }\n\n  if (MgtPersonCardConfig.sections.mailMessages) {\n    scopes.push('Mail.Read');\n    scopes.push('Mail.ReadBasic');\n  }\n\n  if (MgtPersonCardConfig.sections.organization) {\n    scopes.push('User.Read.All');\n\n    if (MgtPersonCardConfig.sections.organization.showWorksWith) {\n      scopes.push('People.Read.All');\n    }\n  }\n\n  if (MgtPersonCardConfig.sections.profile) {\n    scopes.push('User.Read.All');\n  }\n\n  if (MgtPersonCardConfig.useContactApis) {\n    scopes.push('Contacts.Read');\n  }\n\n  if (scopes.indexOf('User.Read.All') < 0) {\n    // at minimum, we need these scopes\n    scopes.push('User.ReadBasic.All');\n    scopes.push('User.Read');\n  }\n\n  if (scopes.indexOf('People.Read.All') < 0) {\n    // at minimum, we need these scopes\n    scopes.push('People.Read');\n  }\n\n  if (MgtPersonCardConfig.isSendMessageVisible) {\n    // Chat.ReadWrite can create a chat and send a message, so just request one scope instead of two\n    scopes.push('Chat.ReadWrite');\n  }\n\n  // return unique\n  return [...new Set(scopes)];\n};\n"]}